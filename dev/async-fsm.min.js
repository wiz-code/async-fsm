!function e(t,n,r){function s(o,a){if(!n[o]){if(!t[o]){var c="function"==typeof require&&require;if(!a&&c)return c(o,!0);if(i)return i(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(t,e,n){(function(t,r){!function(t){if("object"==typeof n&&void 0!==e)e.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var i;"undefined"!=typeof window?i=window:void 0!==r?i=r:"undefined"!=typeof self&&(i=self),i.Promise=t()}}(function(){var e,n,i;return function e(t,n,r){function s(o,a){if(!n[o]){if(!t[o]){var c="function"==typeof _dereq_&&_dereq_;if(!a&&c)return c(o,!0);if(i)return i(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof _dereq_&&_dereq_,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(t,e,n){"use strict";e.exports=function(t){function any(t){var n=new e(t),r=n.promise();return n.setHowMany(1),n.setUnwrap(),n.init(),r}var e=t._SomePromiseArray;t.any=function(t){return any(t)},t.prototype.any=function(){return any(this)}}},{}],2:[function(e,n,r){"use strict";function Async(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new s(16),this._normalQueue=new s(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var t=this;this.drainQueues=function(){t._drainQueues()},this._schedule=o}function AsyncInvokeLater(t,e,n){this._lateQueue.push(t,e,n),this._queueTick()}function AsyncInvoke(t,e,n){this._normalQueue.push(t,e,n),this._queueTick()}function AsyncSettlePromises(t){this._normalQueue._pushOne(t),this._queueTick()}var i;try{throw new Error}catch(t){i=t}var o=e("./schedule"),s=e("./queue"),a=e("./util");Async.prototype.setScheduler=function(t){var e=this._schedule;return this._schedule=t,this._customScheduler=!0,e},Async.prototype.hasCustomScheduler=function(){return this._customScheduler},Async.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},Async.prototype.disableTrampolineIfNecessary=function(){a.hasDevTools&&(this._trampolineEnabled=!1)},Async.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},Async.prototype.fatalError=function(e,n){n?(t.stderr.write("Fatal "+(e instanceof Error?e.stack:e)+"\n"),t.exit(2)):this.throwLater(e)},Async.prototype.throwLater=function(t,e){if(1===arguments.length&&(e=t,t=function(){throw e}),"undefined"!=typeof setTimeout)setTimeout(function(){t(e)},0);else try{this._schedule(function(){t(e)})}catch(t){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},a.hasDevTools?(Async.prototype.invokeLater=function(t,e,n){this._trampolineEnabled?AsyncInvokeLater.call(this,t,e,n):this._schedule(function(){setTimeout(function(){t.call(e,n)},100)})},Async.prototype.invoke=function(t,e,n){this._trampolineEnabled?AsyncInvoke.call(this,t,e,n):this._schedule(function(){t.call(e,n)})},Async.prototype.settlePromises=function(t){this._trampolineEnabled?AsyncSettlePromises.call(this,t):this._schedule(function(){t._settlePromises()})}):(Async.prototype.invokeLater=AsyncInvokeLater,Async.prototype.invoke=AsyncInvoke,Async.prototype.settlePromises=AsyncSettlePromises),Async.prototype._drainQueue=function(t){for(;t.length()>0;){var e=t.shift();if("function"==typeof e){var n=t.shift(),r=t.shift();e.call(n,r)}else e._settlePromises()}},Async.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,this._drainQueue(this._lateQueue)},Async.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},Async.prototype._reset=function(){this._isTickUsed=!1},n.exports=Async,n.exports.firstLineError=i},{"./queue":26,"./schedule":29,"./util":36}],3:[function(t,e,n){"use strict";e.exports=function(t,e,n,r){var i=!1,o=function(t,e){this._reject(e)},s=function(t,e){e.promiseRejectionQueued=!0,e.bindingPromise._then(o,o,null,this,t)},a=function(t,e){0==(50397184&this._bitField)&&this._resolveCallback(e.target)},c=function(t,e){e.promiseRejectionQueued||this._reject(t)};t.prototype.bind=function(o){i||(i=!0,t.prototype._propagateFrom=r.propagateFromFunction(),t.prototype._boundValue=r.boundValueFunction());var u=n(o),l=new t(e);l._propagateFrom(this,1);var h=this._target();if(l._setBoundTo(u),u instanceof t){var f={promiseRejectionQueued:!1,promise:l,target:h,bindingPromise:u};h._then(e,s,void 0,l,f),u._then(a,c,void 0,l,f),l._setOnCancel(u)}else l._resolveCallback(h);return l},t.prototype._setBoundTo=function(t){void 0!==t?(this._bitField=2097152|this._bitField,this._boundTo=t):this._bitField=-2097153&this._bitField},t.prototype._isBound=function(){return 2097152==(2097152&this._bitField)},t.bind=function(e,n){return t.resolve(n).bind(e)}}},{}],4:[function(t,e,n){"use strict";var r;"undefined"!=typeof Promise&&(r=Promise);var i=t("./promise")();i.noConflict=function(){try{Promise===i&&(Promise=r)}catch(t){}return i},e.exports=i},{"./promise":22}],5:[function(t,e,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}e.exports=function(e){function ensureMethod(t,n){var i;if(null!=t&&(i=t[n]),"function"!=typeof i){var o="Object "+r.classString(t)+" has no method '"+r.toString(n)+"'";throw new e.TypeError(o)}return i}function caller(t){return ensureMethod(t,this.pop()).apply(t,this)}function namedGetter(t){return t[this]}function indexedGetter(t){var e=+this;return e<0&&(e=Math.max(0,e+t.length)),t[e]}var n,r=t("./util"),i=r.canEvaluate;r.isIdentifier;e.prototype.call=function(t){var e=[].slice.call(arguments,1);return e.push(t),this._then(caller,void 0,void 0,e,void 0)},e.prototype.get=function(t){var e;if("number"==typeof t)e=indexedGetter;else if(i){var r=n(t);e=null!==r?r:namedGetter}else e=namedGetter;return this._then(e,void 0,void 0,t,void 0)}}},{"./util":36}],6:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),s=o.tryCatch,a=o.errorObj,c=e._async;e.prototype.break=e.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var t=this,e=t;t._isCancellable();){if(!t._cancelBy(e)){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}var n=t._cancellationParent;if(null==n||!n._isCancellable()){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}t._isFollowing()&&t._followee().cancel(),t._setWillBeCancelled(),e=t,t=n}},e.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},e.prototype._enoughBranchesHaveCancelled=function(){return void 0===this._branchesRemainingToCancel||this._branchesRemainingToCancel<=0},e.prototype._cancelBy=function(t){return t===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),!!this._enoughBranchesHaveCancelled()&&(this._invokeOnCancel(),!0))},e.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},e.prototype._cancel=function(){this._isCancellable()&&(this._setCancelled(),c.invoke(this._cancelPromises,this,void 0))},e.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},e.prototype._unsetOnCancel=function(){this._onCancelField=void 0},e.prototype._isCancellable=function(){return this.isPending()&&!this._isCancelled()},e.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},e.prototype._doInvokeOnCancel=function(t,e){if(o.isArray(t))for(var n=0;n<t.length;++n)this._doInvokeOnCancel(t[n],e);else if(void 0!==t)if("function"==typeof t){if(!e){var r=s(t).call(this._boundValue());r===a&&(this._attachExtraTrace(r.e),c.throwLater(r.e))}}else t._resultCancelled(this)},e.prototype._invokeOnCancel=function(){var t=this._onCancel();this._unsetOnCancel(),c.invoke(this._doInvokeOnCancel,this,t)},e.prototype._invokeInternalOnCancel=function(){this._isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},e.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(t,e,n){"use strict";e.exports=function(e){var n=t("./util"),r=t("./es5").keys,i=n.tryCatch,o=n.errorObj;return function(t,s,a){return function(c){var u=a._boundValue();t:for(var l=0;l<t.length;++l){var h=t[l];if(h===Error||null!=h&&h.prototype instanceof Error){if(c instanceof h)return i(s).call(u,c)}else if("function"==typeof h){var f=i(h).call(u,c);if(f===o)return f;if(f)return i(s).call(u,c)}else if(n.isObject(c)){for(var p=r(h),_=0;_<p.length;++_){var d=p[_];if(h[d]!=c[d])continue t}return i(s).call(u,c)}}return e}}}},{"./es5":13,"./util":36}],8:[function(t,e,n){"use strict";e.exports=function(t){function Context(){this._trace=new Context.CapturedTrace(peekContext())}function peekContext(){var t=n.length-1;if(t>=0)return n[t]}var e=!1,n=[];return t.prototype._promiseCreated=function(){},t.prototype._pushContext=function(){},t.prototype._popContext=function(){return null},t._peekContext=t.prototype._peekContext=function(){},Context.prototype._pushContext=function(){void 0!==this._trace&&(this._trace._promiseCreated=null,n.push(this._trace))},Context.prototype._popContext=function(){if(void 0!==this._trace){var t=n.pop(),e=t._promiseCreated;return t._promiseCreated=null,e}return null},Context.CapturedTrace=null,Context.create=function(){if(e)return new Context},Context.deactivateLongStackTraces=function(){},Context.activateLongStackTraces=function(){var n=t.prototype._pushContext,r=t.prototype._popContext,i=t._peekContext,o=t.prototype._peekContext,s=t.prototype._promiseCreated;Context.deactivateLongStackTraces=function(){t.prototype._pushContext=n,t.prototype._popContext=r,t._peekContext=i,t.prototype._peekContext=o,t.prototype._promiseCreated=s,e=!1},e=!0,t.prototype._pushContext=Context.prototype._pushContext,t.prototype._popContext=Context.prototype._popContext,t._peekContext=t.prototype._peekContext=peekContext,t.prototype._promiseCreated=function(){var t=this._peekContext();t&&null==t._promiseCreated&&(t._promiseCreated=this)}},Context}},{}],9:[function(e,n,r){"use strict";n.exports=function(n,r){function generatePromiseLifecycleEventObject(t,e){return{promise:e}}function defaultFireEvent(){return!1}function cancellationExecute(t,e,n){var r=this;try{t(e,n,function(t){if("function"!=typeof t)throw new TypeError("onCancel must be a function, got: "+l.toString(t));r._attachCancellationCallback(t)})}catch(t){return t}}function cancellationAttachCancellationCallback(t){if(!this._isCancellable())return this;var e=this._onCancel();void 0!==e?l.isArray(e)?e.push(t):this._setOnCancel([e,t]):this._setOnCancel(t)}function cancellationOnCancel(){return this._onCancelField}function cancellationSetOnCancel(t){this._onCancelField=t}function cancellationClearCancellationData(){this._cancellationParent=void 0,this._onCancelField=void 0}function cancellationPropagateFrom(t,e){if(0!=(1&e)){this._cancellationParent=t;var n=t._branchesRemainingToCancel;void 0===n&&(n=0),t._branchesRemainingToCancel=n+1}0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}function boundValueFunction(){var t=this._boundTo;return void 0!==t&&t instanceof n?t.isFulfilled()?t.value():void 0:t}function longStackTracesCaptureStackTrace(){this._trace=new CapturedTrace(this._peekContext())}function longStackTracesAttachExtraTrace(t,e){if(h(t)){var n=this._trace;if(void 0!==n&&e&&(n=n._parent),void 0!==n)n.attachExtraTrace(t);else if(!t.__stackCleaned__){var r=parseStackAndMessage(t);l.notEnumerableProp(t,"stack",r.message+"\n"+r.stack.join("\n")),l.notEnumerableProp(t,"__stackCleaned__",!0)}}}function warn(t,e,r){if(F.warnings){var i,o=new u(t);if(e)r._attachExtraTrace(o);else if(F.longStackTraces&&(i=n._peekContext()))i.attachExtraTrace(o);else{var s=parseStackAndMessage(o);o.stack=s.message+"\n"+s.stack.join("\n")}E("warning",o)||formatAndLogError(o,"",!0)}}function reconstructStack(t,e){for(var n=0;n<e.length-1;++n)e[n].push("From previous event:"),e[n]=e[n].join("\n");return n<e.length&&(e[n]=e[n].join("\n")),t+"\n"+e.join("\n")}function removeDuplicateOrEmptyJumps(t){for(var e=0;e<t.length;++e)(0===t[e].length||e+1<t.length&&t[e][0]===t[e+1][0])&&(t.splice(e,1),e--)}function removeCommonRoots(t){for(var e=t[0],n=1;n<t.length;++n){for(var r=t[n],i=e.length-1,o=e[i],s=-1,a=r.length-1;a>=0;--a)if(r[a]===o){s=a;break}for(a=s;a>=0;--a){var c=r[a];if(e[i]!==c)break;e.pop(),i--}e=r}}function cleanStack(t){for(var e=[],n=0;n<t.length;++n){var r=t[n],i="    (No stack trace)"===r||d.test(r),o=i&&A(r);i&&!o&&(y&&" "!==r.charAt(0)&&(r="    "+r),e.push(r))}return e}function stackFramesAsArray(t){for(var e=t.stack.replace(/\s+$/g,"").split("\n"),n=0;n<e.length;++n){var r=e[n];if("    (No stack trace)"===r||d.test(r))break}return n>0&&"SyntaxError"!=t.name&&(e=e.slice(n)),e}function parseStackAndMessage(t){var e=t.stack,n=t.toString();return e="string"==typeof e&&e.length>0?stackFramesAsArray(t):["    (No stack trace)"],{message:n,stack:"SyntaxError"==t.name?e:cleanStack(e)}}function formatAndLogError(t,e,n){if("undefined"!=typeof console){var r;if(l.isObject(t)){var i=t.stack;r=e+v(i,t)}else r=e+String(t);"function"==typeof s?s(r,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(r)}}function fireRejectionEvent(t,e,n,r){var i=!1;try{"function"==typeof e&&(i=!0,"rejectionHandled"===t?e(r):e(n,r))}catch(t){c.throwLater(t)}"unhandledRejection"===t?E(t,n,r)||i||formatAndLogError(n,"Unhandled rejection "):E(t,r)}function formatNonError(t){var e;if("function"==typeof t)e="[function "+(t.name||"anonymous")+"]";else{if(e=t&&"function"==typeof t.toString?t.toString():l.toString(t),/\[object [a-zA-Z0-9$_]+\]/.test(e))try{e=JSON.stringify(t)}catch(t){}0===e.length&&(e="(empty array)")}return"(<"+snip(e)+">, no stack trace)"}function snip(t){return t.length<41?t:t.substr(0,38)+"..."}function longStackTracesIsSupported(){return"function"==typeof T}function parseLineInfo(t){var e=t.match(j);if(e)return{fileName:e[1],line:parseInt(e[2],10)}}function CapturedTrace(t){this._parent=t,this._promisesCreated=0;var e=this._length=1+(void 0===t?0:t._length);T(this,CapturedTrace),e>32&&this.uncycle()}var i,o,s,a=n._getDomain,c=n._async,u=e("./errors").Warning,l=e("./util"),h=l.canAttachTrace,f=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,p=/\((?:timers\.js):\d+:\d+\)/,_=/[\/<\(](.+?):(\d+):(\d+)\)?\s*$/,d=null,v=null,y=!1,m=!(0==l.env("BLUEBIRD_DEBUG")),g=!(0==l.env("BLUEBIRD_WARNINGS")||!m&&!l.env("BLUEBIRD_WARNINGS")),b=!(0==l.env("BLUEBIRD_LONG_STACK_TRACES")||!m&&!l.env("BLUEBIRD_LONG_STACK_TRACES")),P=0!=l.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(g||!!l.env("BLUEBIRD_W_FORGOTTEN_RETURN"));n.prototype.suppressUnhandledRejections=function(){var t=this._target();t._bitField=-1048577&t._bitField|524288},n.prototype._ensurePossibleRejectionHandled=function(){0==(524288&this._bitField)&&(this._setRejectionIsUnhandled(),c.invokeLater(this._notifyUnhandledRejection,this,void 0))},n.prototype._notifyUnhandledRejectionIsHandled=function(){fireRejectionEvent("rejectionHandled",i,void 0,this)},n.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},n.prototype._returnedNonUndefined=function(){return 0!=(268435456&this._bitField)},n.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var t=this._settledValue();this._setUnhandledRejectionIsNotified(),fireRejectionEvent("unhandledRejection",o,t,this)}},n.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},n.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},n.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},n.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},n.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},n.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},n.prototype._warn=function(t,e,n){return warn(t,e,n||this)},n.onPossiblyUnhandledRejection=function(t){var e=a();o="function"==typeof t?null===e?t:l.domainBind(e,t):void 0},n.onUnhandledRejectionHandled=function(t){var e=a();i="function"==typeof t?null===e?t:l.domainBind(e,t):void 0};var w=function(){};n.longStackTraces=function(){if(c.haveItemsQueued()&&!F.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!F.longStackTraces&&longStackTracesIsSupported()){var t=n.prototype._captureStackTrace,e=n.prototype._attachExtraTrace;F.longStackTraces=!0,w=function(){if(c.haveItemsQueued()&&!F.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");n.prototype._captureStackTrace=t,n.prototype._attachExtraTrace=e,r.deactivateLongStackTraces(),c.enableTrampoline(),F.longStackTraces=!1},n.prototype._captureStackTrace=longStackTracesCaptureStackTrace,n.prototype._attachExtraTrace=longStackTracesAttachExtraTrace,r.activateLongStackTraces(),c.disableTrampolineIfNecessary()}},n.hasLongStackTraces=function(){return F.longStackTraces&&longStackTracesIsSupported()};var C=function(){try{if("function"==typeof CustomEvent){t=new CustomEvent("CustomEvent");return l.global.dispatchEvent(t),function(t,e){var n=new CustomEvent(t.toLowerCase(),{detail:e,cancelable:!0});return!l.global.dispatchEvent(n)}}if("function"==typeof Event){var t=new Event("CustomEvent");return l.global.dispatchEvent(t),function(t,e){var n=new Event(t.toLowerCase(),{cancelable:!0});return n.detail=e,!l.global.dispatchEvent(n)}}return(t=document.createEvent("CustomEvent")).initCustomEvent("testingtheevent",!1,!0,{}),l.global.dispatchEvent(t),function(t,e){var n=document.createEvent("CustomEvent");return n.initCustomEvent(t.toLowerCase(),!1,!0,e),!l.global.dispatchEvent(n)}}catch(t){}return function(){return!1}}(),S=l.isNode?function(){return t.emit.apply(t,arguments)}:l.global?function(t){var e="on"+t.toLowerCase(),n=l.global[e];return!!n&&(n.apply(l.global,[].slice.call(arguments,1)),!0)}:function(){return!1},k={promiseCreated:generatePromiseLifecycleEventObject,promiseFulfilled:generatePromiseLifecycleEventObject,promiseRejected:generatePromiseLifecycleEventObject,promiseResolved:generatePromiseLifecycleEventObject,promiseCancelled:generatePromiseLifecycleEventObject,promiseChained:function(t,e,n){return{promise:e,child:n}},warning:function(t,e){return{warning:e}},unhandledRejection:function(t,e,n){return{reason:e,promise:n}},rejectionHandled:generatePromiseLifecycleEventObject},E=function(t){var e=!1;try{e=S.apply(null,arguments)}catch(t){c.throwLater(t),e=!0}var n=!1;try{n=C(t,k[t].apply(null,arguments))}catch(t){c.throwLater(t),n=!0}return n||e};n.config=function(t){if("longStackTraces"in(t=Object(t))&&(t.longStackTraces?n.longStackTraces():!t.longStackTraces&&n.hasLongStackTraces()&&w()),"warnings"in t){var e=t.warnings;F.warnings=!!e,P=F.warnings,l.isObject(e)&&"wForgottenReturn"in e&&(P=!!e.wForgottenReturn)}if("cancellation"in t&&t.cancellation&&!F.cancellation){if(c.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");n.prototype._clearCancellationData=cancellationClearCancellationData,n.prototype._propagateFrom=cancellationPropagateFrom,n.prototype._onCancel=cancellationOnCancel,n.prototype._setOnCancel=cancellationSetOnCancel,n.prototype._attachCancellationCallback=cancellationAttachCancellationCallback,n.prototype._execute=cancellationExecute,x=cancellationPropagateFrom,F.cancellation=!0}return"monitoring"in t&&(t.monitoring&&!F.monitoring?(F.monitoring=!0,n.prototype._fireEvent=E):!t.monitoring&&F.monitoring&&(F.monitoring=!1,n.prototype._fireEvent=defaultFireEvent)),n},n.prototype._fireEvent=defaultFireEvent,n.prototype._execute=function(t,e,n){try{t(e,n)}catch(t){return t}},n.prototype._onCancel=function(){},n.prototype._setOnCancel=function(t){},n.prototype._attachCancellationCallback=function(t){},n.prototype._captureStackTrace=function(){},n.prototype._attachExtraTrace=function(){},n.prototype._clearCancellationData=function(){},n.prototype._propagateFrom=function(t,e){};var x=function(t,e){0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)},A=function(){return!1},j=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;l.inherits(CapturedTrace,Error),r.CapturedTrace=CapturedTrace,CapturedTrace.prototype.uncycle=function(){var t=this._length;if(!(t<2)){for(var e=[],n={},r=0,i=this;void 0!==i;++r)e.push(i),i=i._parent;for(r=(t=this._length=r)-1;r>=0;--r){var o=e[r].stack;void 0===n[o]&&(n[o]=r)}for(r=0;r<t;++r){var s=n[e[r].stack];if(void 0!==s&&s!==r){s>0&&(e[s-1]._parent=void 0,e[s-1]._length=1),e[r]._parent=void 0,e[r]._length=1;var a=r>0?e[r-1]:this;s<t-1?(a._parent=e[s+1],a._parent.uncycle(),a._length=a._parent._length+1):(a._parent=void 0,a._length=1);for(var c=a._length+1,u=r-2;u>=0;--u)e[u]._length=c,c++;return}}}},CapturedTrace.prototype.attachExtraTrace=function(t){if(!t.__stackCleaned__){this.uncycle();for(var e=parseStackAndMessage(t),n=e.message,r=[e.stack],i=this;void 0!==i;)r.push(cleanStack(i.stack.split("\n"))),i=i._parent;removeCommonRoots(r),removeDuplicateOrEmptyJumps(r),l.notEnumerableProp(t,"stack",reconstructStack(n,r)),l.notEnumerableProp(t,"__stackCleaned__",!0)}};var T=function(){var t=/^\s*at\s*/,e=function(t,e){return"string"==typeof t?t:void 0!==e.name&&void 0!==e.message?e.toString():formatNonError(e)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,d=t,v=e;var n=Error.captureStackTrace;return A=function(t){return f.test(t)},function(t,e){Error.stackTraceLimit+=6,n(t,e),Error.stackTraceLimit-=6}}var r=new Error;if("string"==typeof r.stack&&r.stack.split("\n")[0].indexOf("stackDetection@")>=0)return d=/@/,v=e,y=!0,function(t){t.stack=(new Error).stack};var i;try{throw new Error}catch(t){i="stack"in t}return"stack"in r||!i||"number"!=typeof Error.stackTraceLimit?(v=function(t,e){return"string"==typeof t?t:"object"!=typeof e&&"function"!=typeof e||void 0===e.name||void 0===e.message?formatNonError(e):e.toString()},null):(d=t,v=e,function(t){Error.stackTraceLimit+=6;try{throw new Error}catch(e){t.stack=e.stack}Error.stackTraceLimit-=6})}();"undefined"!=typeof console&&void 0!==console.warn&&(s=function(t){console.warn(t)},l.isNode&&t.stderr.isTTY?s=function(t,e){var n=e?"[33m":"[31m";console.warn(n+t+"[0m\n")}:l.isNode||"string"!=typeof(new Error).stack||(s=function(t,e){console.warn("%c"+t,e?"color: darkorange":"color: red")}));var F={warnings:g,longStackTraces:!1,cancellation:!1,monitoring:!1};return b&&n.longStackTraces(),{longStackTraces:function(){return F.longStackTraces},warnings:function(){return F.warnings},cancellation:function(){return F.cancellation},monitoring:function(){return F.monitoring},propagateFromFunction:function(){return x},boundValueFunction:function(){return boundValueFunction},checkForgottenReturns:function(t,e,n,r,i){if(void 0===t&&null!==e&&P){if(void 0!==i&&i._returnedNonUndefined())return;if(0==(65535&r._bitField))return;n&&(n+=" ");var o="",s="";if(e._trace){for(var a=e._trace.stack.split("\n"),c=cleanStack(a),u=c.length-1;u>=0;--u){var l=c[u];if(!p.test(l)){var h=l.match(_);h&&(o="at "+h[1]+":"+h[2]+":"+h[3]+" ");break}}if(c.length>0)for(var f=c[0],u=0;u<a.length;++u)if(a[u]===f){u>0&&(s="\n"+a[u-1]);break}}var d="a promise was created in a "+n+"handler "+o+"but was not returned from it, see http://goo.gl/rRqMUw"+s;r._warn(d,!0,e)}},setBounds:function(t,e){if(longStackTracesIsSupported()){for(var n,r,i=t.stack.split("\n"),o=e.stack.split("\n"),s=-1,a=-1,c=0;c<i.length;++c)if(u=parseLineInfo(i[c])){n=u.fileName,s=u.line;break}for(c=0;c<o.length;++c){var u=parseLineInfo(o[c]);if(u){r=u.fileName,a=u.line;break}}s<0||a<0||!n||!r||n!==r||s>=a||(A=function(t){if(f.test(t))return!0;var e=parseLineInfo(t);return!!(e&&e.fileName===n&&s<=e.line&&e.line<=a)})}},warn:warn,deprecated:function(t,e){var n=t+" is deprecated and will be removed in a future version.";return e&&(n+=" Use "+e+" instead."),warn(n)},CapturedTrace:CapturedTrace,fireDomEvent:C,fireGlobalEvent:S}}},{"./errors":12,"./util":36}],10:[function(t,e,n){"use strict";e.exports=function(t){function returner(){return this.value}function thrower(){throw this.reason}t.prototype.return=t.prototype.thenReturn=function(e){return e instanceof t&&e.suppressUnhandledRejections(),this._then(returner,void 0,void 0,{value:e},void 0)},t.prototype.throw=t.prototype.thenThrow=function(t){return this._then(thrower,void 0,void 0,{reason:t},void 0)},t.prototype.catchThrow=function(t){if(arguments.length<=1)return this._then(void 0,thrower,void 0,{reason:t},void 0);var e=arguments[1];return this.caught(t,function(){throw e})},t.prototype.catchReturn=function(e){if(arguments.length<=1)return e instanceof t&&e.suppressUnhandledRejections(),this._then(void 0,returner,void 0,{value:e},void 0);var n=arguments[1];n instanceof t&&n.suppressUnhandledRejections();return this.caught(e,function(){return n})}}},{}],11:[function(t,e,n){"use strict";e.exports=function(t,e){function promiseAllThis(){return r(this)}var n=t.reduce,r=t.all;t.prototype.each=function(t){return n(this,t,e,0)._then(promiseAllThis,void 0,void 0,this,void 0)},t.prototype.mapSeries=function(t){return n(this,t,e,e)},t.each=function(t,r){return n(t,r,e,0)._then(promiseAllThis,void 0,void 0,t,void 0)},t.mapSeries=function(t,r){return n(t,r,e,e)}}},{}],12:[function(t,e,n){"use strict";function subError(t,e){function SubError(n){if(!(this instanceof SubError))return new SubError(n);u(this,"message","string"==typeof n?n:e),u(this,"name",t),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this)}return c(SubError,Error),SubError}function OperationalError(t){if(!(this instanceof OperationalError))return new OperationalError(t);u(this,"name","OperationalError"),u(this,"message",t),this.cause=t,this.isOperational=!0,t instanceof Error?(u(this,"message",t.message),u(this,"stack",t.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}var r,i,o=t("./es5"),s=o.freeze,a=t("./util"),c=a.inherits,u=a.notEnumerableProp,l=subError("Warning","warning"),h=subError("CancellationError","cancellation error"),f=subError("TimeoutError","timeout error"),p=subError("AggregateError","aggregate error");try{r=TypeError,i=RangeError}catch(t){r=subError("TypeError","type error"),i=subError("RangeError","range error")}for(var _="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),d=0;d<_.length;++d)"function"==typeof Array.prototype[_[d]]&&(p.prototype[_[d]]=Array.prototype[_[d]]);o.defineProperty(p.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),p.prototype.isOperational=!0;var v=0;p.prototype.toString=function(){var t=Array(4*v+1).join(" "),e="\n"+t+"AggregateError of:\n";v++,t=Array(4*v+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=t+i[o];e+=(r=i.join("\n"))+"\n"}return v--,e},c(OperationalError,Error);var y=Error.__BluebirdErrorTypes__;y||(y=s({CancellationError:h,TimeoutError:f,OperationalError:OperationalError,RejectionError:OperationalError,AggregateError:p}),o.defineProperty(Error,"__BluebirdErrorTypes__",{value:y,writable:!1,enumerable:!1,configurable:!1})),e.exports={Error:Error,TypeError:r,RangeError:i,CancellationError:y.CancellationError,OperationalError:y.OperationalError,TimeoutError:y.TimeoutError,AggregateError:y.AggregateError,Warning:l}},{"./es5":13,"./util":36}],13:[function(t,e,n){var r=function(){"use strict";return void 0===this}();if(r)e.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,s={}.constructor.prototype,a=function(t){var e=[];for(var n in t)i.call(t,n)&&e.push(n);return e};e.exports={isArray:function(t){try{return"[object Array]"===o.call(t)}catch(t){return!1}},keys:a,names:a,defineProperty:function(t,e,n){return t[e]=n.value,t},getDescriptor:function(t,e){return{value:t[e]}},freeze:function(t){return t},getPrototypeOf:function(t){try{return Object(t).constructor.prototype}catch(t){return s}},isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.map;t.prototype.filter=function(t,r){return n(this,t,r,e)},t.filter=function(t,r,i){return n(t,r,i,e)}}},{}],15:[function(t,e,n){"use strict";e.exports=function(e,n,r){function PassThroughHandlerContext(t,e,n){this.promise=t,this.type=e,this.handler=n,this.called=!1,this.cancelPromise=null}function FinallyHandlerCancelReaction(t){this.finallyHandler=t}function checkCancel(t,e){return null!=t.cancelPromise&&(arguments.length>1?t.cancelPromise._reject(e):t.cancelPromise._cancel(),t.cancelPromise=null,!0)}function succeed(){return finallyHandler.call(this,this.promise._target()._settledValue())}function fail(t){if(!checkCancel(this,t))return s.e=t,s}function finallyHandler(t){var i=this.promise,a=this.handler;if(!this.called){this.called=!0;var c=this.isFinallyHandler()?a.call(i._boundValue()):a.call(i._boundValue(),t);if(c===r)return c;if(void 0!==c){i._setReturnedNonUndefined();var u=n(c,i);if(u instanceof e){if(null!=this.cancelPromise){if(u._isCancelled()){var l=new o("late cancellation observer");return i._attachExtraTrace(l),s.e=l,s}u.isPending()&&u._attachCancellationCallback(new FinallyHandlerCancelReaction(this))}return u._then(succeed,fail,void 0,this,void 0)}}}return i.isRejected()?(checkCancel(this),s.e=t,s):(checkCancel(this),t)}var i=t("./util"),o=e.CancellationError,s=i.errorObj,a=t("./catch_filter")(r);return PassThroughHandlerContext.prototype.isFinallyHandler=function(){return 0===this.type},FinallyHandlerCancelReaction.prototype._resultCancelled=function(){checkCancel(this.finallyHandler)},e.prototype._passThrough=function(t,e,n,r){return"function"!=typeof t?this.then():this._then(n,r,void 0,new PassThroughHandlerContext(this,e,t),void 0)},e.prototype.lastly=e.prototype.finally=function(t){return this._passThrough(t,0,finallyHandler,finallyHandler)},e.prototype.tap=function(t){return this._passThrough(t,1,finallyHandler)},e.prototype.tapCatch=function(t){var n=arguments.length;if(1===n)return this._passThrough(t,1,void 0,finallyHandler);var r,o=new Array(n-1),s=0;for(r=0;r<n-1;++r){var c=arguments[r];if(!i.isObject(c))return e.reject(new TypeError("tapCatch statement predicate: expecting an object but got "+i.classString(c)));o[s++]=c}o.length=s;var u=arguments[r];return this._passThrough(a(o,u,this),1,void 0,finallyHandler)},PassThroughHandlerContext}},{"./catch_filter":7,"./util":36}],16:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function promiseFromYieldHandler(t,n,r){for(var o=0;o<n.length;++o){r._pushContext();var s=l(n[o])(t);if(r._popContext(),s===u){r._pushContext();var a=e.reject(u.e);return r._popContext(),a}var c=i(s,r);if(c instanceof e)return c}return null}function PromiseSpawn(t,n,i,o){if(s.cancellation()){var a=new e(r),c=this._finallyPromise=new e(r);this._promise=a.lastly(function(){return c}),a._captureStackTrace(),a._setOnCancel(this)}else(this._promise=new e(r))._captureStackTrace();this._stack=o,this._generatorFunction=t,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof i?[i].concat(h):h,this._yieldedPromise=null,this._cancellationPhase=!1}var a=t("./errors").TypeError,c=t("./util"),u=c.errorObj,l=c.tryCatch,h=[];c.inherits(PromiseSpawn,o),PromiseSpawn.prototype._isResolved=function(){return null===this._promise},PromiseSpawn.prototype._cleanup=function(){this._promise=this._generator=null,s.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},PromiseSpawn.prototype._promiseCancelled=function(){if(!this._isResolved()){var t;if(void 0!==this._generator.return)this._promise._pushContext(),t=l(this._generator.return).call(this._generator,void 0),this._promise._popContext();else{var n=new e.CancellationError("generator .return() sentinel");e.coroutine.returnSentinel=n,this._promise._attachExtraTrace(n),this._promise._pushContext(),t=l(this._generator.throw).call(this._generator,n),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(t)}},PromiseSpawn.prototype._promiseFulfilled=function(t){this._yieldedPromise=null,this._promise._pushContext();var e=l(this._generator.next).call(this._generator,t);this._promise._popContext(),this._continue(e)},PromiseSpawn.prototype._promiseRejected=function(t){this._yieldedPromise=null,this._promise._attachExtraTrace(t),this._promise._pushContext();var e=l(this._generator.throw).call(this._generator,t);this._promise._popContext(),this._continue(e)},PromiseSpawn.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof e){var t=this._yieldedPromise;this._yieldedPromise=null,t.cancel()}},PromiseSpawn.prototype.promise=function(){return this._promise},PromiseSpawn.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._promiseFulfilled(void 0)},PromiseSpawn.prototype._continue=function(t){var n=this._promise;if(t===u)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(t.e,!1);var r=t.value;if(!0===t.done)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(r);var o=i(r,this._promise);if(o instanceof e||null!==(o=promiseFromYieldHandler(o,this._yieldHandlers,this._promise))){var s=(o=o._target())._bitField;0==(50397184&s)?(this._yieldedPromise=o,o._proxy(this,null)):0!=(33554432&s)?e._async.invoke(this._promiseFulfilled,this,o._value()):0!=(16777216&s)?e._async.invoke(this._promiseRejected,this,o._reason()):this._promiseCancelled()}else this._promiseRejected(new a("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",String(r))+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")))},e.coroutine=function(t,e){if("function"!=typeof t)throw new a("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(e).yieldHandler,r=PromiseSpawn,i=(new Error).stack;return function(){var e=t.apply(this,arguments),o=new r(void 0,void 0,n,i),s=o.promise();return o._generator=e,o._promiseFulfilled(void 0),s}},e.coroutine.addYieldHandler=function(t){if("function"!=typeof t)throw new a("expecting a function but got "+c.classString(t));h.push(t)},e.spawn=function(t){if(s.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof t)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new PromiseSpawn(t,this),i=r.promise();return r._run(e.spawn),i}}},{"./errors":12,"./util":36}],17:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=t("./util");a.canEvaluate,a.tryCatch,a.errorObj;e.join=function(){var t,e=arguments.length-1;if(e>0&&"function"==typeof arguments[e]){t=arguments[e]}var r=[].slice.call(arguments);t&&r.pop();var i=new n(r).promise();return void 0!==t?i.spread(t):i}}},{"./util":36}],18:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function MappingPromiseArray(t,e,n,r){this.constructor$(t),this._promise._captureStackTrace();var i=a();this._callback=null===i?e:c.domainBind(i,e),this._preservedValues=r===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=[],h.invoke(this._asyncInit,this,void 0)}function map(t,n,i,o){if("function"!=typeof n)return r("expecting a function but got "+c.classString(n));var s=0;if(void 0!==i){if("object"!=typeof i||null===i)return e.reject(new TypeError("options argument must be an object but it is "+c.classString(i)));if("number"!=typeof i.concurrency)return e.reject(new TypeError("'concurrency' must be a number but it is "+c.classString(i.concurrency)));s=i.concurrency}return s="number"==typeof s&&isFinite(s)&&s>=1?s:0,new MappingPromiseArray(t,n,s,o).promise()}var a=e._getDomain,c=t("./util"),u=c.tryCatch,l=c.errorObj,h=e._async;c.inherits(MappingPromiseArray,n),MappingPromiseArray.prototype._asyncInit=function(){this._init$(void 0,-2)},MappingPromiseArray.prototype._init=function(){},MappingPromiseArray.prototype._promiseFulfilled=function(t,n){var r=this._values,o=this.length(),a=this._preservedValues,c=this._limit;if(n<0){if(n=-1*n-1,r[n]=t,c>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(c>=1&&this._inFlight>=c)return r[n]=t,this._queue.push(n),!1;null!==a&&(a[n]=t);var h=this._promise,f=this._callback,p=h._boundValue();h._pushContext();var _=u(f).call(p,t,n,o),d=h._popContext();if(s.checkForgottenReturns(_,d,null!==a?"Promise.filter":"Promise.map",h),_===l)return this._reject(_.e),!0;var v=i(_,this._promise);if(v instanceof e){var y=(v=v._target())._bitField;if(0==(50397184&y))return c>=1&&this._inFlight++,r[n]=v,v._proxy(this,-1*(n+1)),!1;if(0==(33554432&y))return 0!=(16777216&y)?(this._reject(v._reason()),!0):(this._cancel(),!0);_=v._value()}r[n]=_}return++this._totalResolved>=o&&(null!==a?this._filter(r,a):this._resolve(r),!0)},MappingPromiseArray.prototype._drainQueue=function(){for(var t=this._queue,e=this._limit,n=this._values;t.length>0&&this._inFlight<e;){if(this._isResolved())return;var r=t.pop();this._promiseFulfilled(n[r],r)}},MappingPromiseArray.prototype._filter=function(t,e){for(var n=e.length,r=new Array(n),i=0,o=0;o<n;++o)t[o]&&(r[i++]=e[o]);r.length=i,this._resolve(r)},MappingPromiseArray.prototype.preservedValues=function(){return this._preservedValues},e.prototype.map=function(t,e){return map(this,t,e,null)},e.map=function(t,e,n,r){return map(t,e,n,r)}}},{"./util":36}],19:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var s=t("./util"),a=s.tryCatch;e.method=function(t){if("function"!=typeof t)throw new e.TypeError("expecting a function but got "+s.classString(t));return function(){var r=new e(n);r._captureStackTrace(),r._pushContext();var i=a(t).apply(this,arguments),s=r._popContext();return o.checkForgottenReturns(i,s,"Promise.method",r),r._resolveFromSyncValue(i),r}},e.attempt=e.try=function(t){if("function"!=typeof t)return i("expecting a function but got "+s.classString(t));var r=new e(n);r._captureStackTrace(),r._pushContext();var c;if(arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var u=arguments[1],l=arguments[2];c=s.isArray(u)?a(t).apply(l,u):a(t).call(l,u)}else c=a(t)();var h=r._popContext();return o.checkForgottenReturns(c,h,"Promise.try",r),r._resolveFromSyncValue(c),r},e.prototype._resolveFromSyncValue=function(t){t===s.errorObj?this._rejectCallback(t.e,!1):this._resolveCallback(t,!0)}}},{"./util":36}],20:[function(t,e,n){"use strict";function isUntypedError(t){return t instanceof Error&&s.getPrototypeOf(t)===Error.prototype}function wrapAsOperationalError(t){var e;if(isUntypedError(t)){(e=new o(t)).name=t.name,e.message=t.message,e.stack=t.stack;for(var n=s.keys(t),i=0;i<n.length;++i){var c=n[i];a.test(c)||(e[c]=t[c])}return e}return r.markAsOriginatingFromRejection(t),t}var r=t("./util"),i=r.maybeWrapAsError,o=t("./errors").OperationalError,s=t("./es5"),a=/^(?:name|message|stack|cause)$/;e.exports=function(t,e){return function(n,r){if(null!==t){if(n){var o=wrapAsOperationalError(i(n));t._attachExtraTrace(o),t._reject(o)}else if(e){var s=[].slice.call(arguments,1);t._fulfill(s)}else t._fulfill(r);t=null}}}},{"./errors":12,"./es5":13,"./util":36}],21:[function(t,e,n){"use strict";e.exports=function(e){function spreadAdapter(t,e){var s=this;if(!n.isArray(t))return successAdapter.call(s,t,e);var a=i(e).apply(s._boundValue(),[null].concat(t));a===o&&r.throwLater(a.e)}function successAdapter(t,e){var n=this._boundValue(),s=void 0===t?i(e).call(n,null):i(e).call(n,null,t);s===o&&r.throwLater(s.e)}function errorAdapter(t,e){var n=this;if(!t){var s=new Error(t+"");s.cause=t,t=s}var a=i(e).call(n._boundValue(),t);a===o&&r.throwLater(a.e)}var n=t("./util"),r=e._async,i=n.tryCatch,o=n.errorObj;e.prototype.asCallback=e.prototype.nodeify=function(t,e){if("function"==typeof t){var n=successAdapter;void 0!==e&&Object(e).spread&&(n=spreadAdapter),this._then(n,errorAdapter,void 0,this,t)}return this}}},{"./util":36}],22:[function(e,n,r){"use strict";n.exports=function(){function Proxyable(){}function check(t,e){if(null==t||t.constructor!==Promise)throw new p("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");if("function"!=typeof e)throw new p("expecting a function but got "+c.classString(e))}function Promise(t){t!==d&&check(this,t),this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,this._resolveFromExecutor(t),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function deferResolve(t){this.promise._resolveCallback(t)}function deferReject(t){this.promise._rejectCallback(t,!1)}function fillTypes(t){var e=new Promise(d);e._fulfillmentHandler0=t,e._rejectionHandler0=t,e._promise0=t,e._receiver0=t}var r,i=function(){return new p("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},o=function(){return new Promise.PromiseInspection(this._target())},s=function(t){return Promise.reject(new p(t))},a={},c=e("./util");r=c.isNode?function(){var e=t.domain;return void 0===e&&(e=null),e}:function(){return null},c.notEnumerableProp(Promise,"_getDomain",r);var u=e("./es5"),l=e("./async"),h=new l;u.defineProperty(Promise,"_async",{value:h});var f=e("./errors"),p=Promise.TypeError=f.TypeError;Promise.RangeError=f.RangeError;var _=Promise.CancellationError=f.CancellationError;Promise.TimeoutError=f.TimeoutError,Promise.OperationalError=f.OperationalError,Promise.RejectionError=f.OperationalError,Promise.AggregateError=f.AggregateError;var d=function(){},v={},y={},m=e("./thenables")(Promise,d),g=e("./promise_array")(Promise,d,m,s,Proxyable),b=e("./context")(Promise),P=b.create,w=e("./debuggability")(Promise,b),C=(w.CapturedTrace,e("./finally")(Promise,m,y)),S=e("./catch_filter")(y),k=e("./nodeback"),E=c.errorObj,x=c.tryCatch;return Promise.prototype.toString=function(){return"[object Promise]"},Promise.prototype.caught=Promise.prototype.catch=function(t){var e=arguments.length;if(e>1){var n,r=new Array(e-1),i=0;for(n=0;n<e-1;++n){var o=arguments[n];if(!c.isObject(o))return s("Catch statement predicate: expecting an object but got "+c.classString(o));r[i++]=o}return r.length=i,t=arguments[n],this.then(void 0,S(r,t,this))}return this.then(void 0,t)},Promise.prototype.reflect=function(){return this._then(o,o,void 0,this,void 0)},Promise.prototype.then=function(t,e){if(w.warnings()&&arguments.length>0&&"function"!=typeof t&&"function"!=typeof e){var n=".then() only accepts functions but was passed: "+c.classString(t);arguments.length>1&&(n+=", "+c.classString(e)),this._warn(n)}return this._then(t,e,void 0,void 0,void 0)},Promise.prototype.done=function(t,e){this._then(t,e,void 0,void 0,void 0)._setIsFinal()},Promise.prototype.spread=function(t){return"function"!=typeof t?s("expecting a function but got "+c.classString(t)):this.all()._then(t,void 0,void 0,v,void 0)},Promise.prototype.toJSON=function(){var t={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(t.fulfillmentValue=this.value(),t.isFulfilled=!0):this.isRejected()&&(t.rejectionReason=this.reason(),t.isRejected=!0),t},Promise.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new g(this).promise()},Promise.prototype.error=function(t){return this.caught(c.originatesFromRejection,t)},Promise.getNewLibraryCopy=n.exports,Promise.is=function(t){return t instanceof Promise},Promise.fromNode=Promise.fromCallback=function(t){var e=new Promise(d);e._captureStackTrace();var n=arguments.length>1&&!!Object(arguments[1]).multiArgs,r=x(t)(k(e,n));return r===E&&e._rejectCallback(r.e,!0),e._isFateSealed()||e._setAsyncGuaranteed(),e},Promise.all=function(t){return new g(t).promise()},Promise.cast=function(t){var e=m(t);return e instanceof Promise||((e=new Promise(d))._captureStackTrace(),e._setFulfilled(),e._rejectionHandler0=t),e},Promise.resolve=Promise.fulfilled=Promise.cast,Promise.reject=Promise.rejected=function(t){var e=new Promise(d);return e._captureStackTrace(),e._rejectCallback(t,!0),e},Promise.setScheduler=function(t){if("function"!=typeof t)throw new p("expecting a function but got "+c.classString(t));return h.setScheduler(t)},Promise.prototype._then=function(t,e,n,i,o){var s=void 0!==o,a=s?o:new Promise(d),u=this._target(),l=u._bitField;s||(a._propagateFrom(this,3),a._captureStackTrace(),void 0===i&&0!=(2097152&this._bitField)&&(i=0!=(50397184&l)?this._boundValue():u===this?void 0:this._boundTo),this._fireEvent("promiseChained",this,a));var f=r();if(0!=(50397184&l)){var p,v,y=u._settlePromiseCtx;0!=(33554432&l)?(v=u._rejectionHandler0,p=t):0!=(16777216&l)?(v=u._fulfillmentHandler0,p=e,u._unsetRejectionIsUnhandled()):(y=u._settlePromiseLateCancellationObserver,v=new _("late cancellation observer"),u._attachExtraTrace(v),p=e),h.invoke(y,u,{handler:null===f?p:"function"==typeof p&&c.domainBind(f,p),promise:a,receiver:i,value:v})}else u._addCallbacks(t,e,a,i,f);return a},Promise.prototype._length=function(){return 65535&this._bitField},Promise.prototype._isFateSealed=function(){return 0!=(117506048&this._bitField)},Promise.prototype._isFollowing=function(){return 67108864==(67108864&this._bitField)},Promise.prototype._setLength=function(t){this._bitField=-65536&this._bitField|65535&t},Promise.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},Promise.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},Promise.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},Promise.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},Promise.prototype._isFinal=function(){return(4194304&this._bitField)>0},Promise.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},Promise.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},Promise.prototype._setWillBeCancelled=function(){this._bitField=8388608|this._bitField},Promise.prototype._setAsyncGuaranteed=function(){h.hasCustomScheduler()||(this._bitField=134217728|this._bitField)},Promise.prototype._receiverAt=function(t){var e=0===t?this._receiver0:this[4*t-4+3];if(e!==a)return void 0===e&&this._isBound()?this._boundValue():e},Promise.prototype._promiseAt=function(t){return this[4*t-4+2]},Promise.prototype._fulfillmentHandlerAt=function(t){return this[4*t-4+0]},Promise.prototype._rejectionHandlerAt=function(t){return this[4*t-4+1]},Promise.prototype._boundValue=function(){},Promise.prototype._migrateCallback0=function(t){t._bitField;var e=t._fulfillmentHandler0,n=t._rejectionHandler0,r=t._promise0,i=t._receiverAt(0);void 0===i&&(i=a),this._addCallbacks(e,n,r,i,null)},Promise.prototype._migrateCallbackAt=function(t,e){var n=t._fulfillmentHandlerAt(e),r=t._rejectionHandlerAt(e),i=t._promiseAt(e),o=t._receiverAt(e);void 0===o&&(o=a),this._addCallbacks(n,r,i,o,null)},Promise.prototype._addCallbacks=function(t,e,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof t&&(this._fulfillmentHandler0=null===i?t:c.domainBind(i,t)),"function"==typeof e&&(this._rejectionHandler0=null===i?e:c.domainBind(i,e));else{var s=4*o-4;this[s+2]=n,this[s+3]=r,"function"==typeof t&&(this[s+0]=null===i?t:c.domainBind(i,t)),"function"==typeof e&&(this[s+1]=null===i?e:c.domainBind(i,e))}return this._setLength(o+1),o},Promise.prototype._proxy=function(t,e){this._addCallbacks(void 0,void 0,e,t,null)},Promise.prototype._resolveCallback=function(t,e){if(0==(117506048&this._bitField)){if(t===this)return this._rejectCallback(i(),!1);var n=m(t,this);if(!(n instanceof Promise))return this._fulfill(t);e&&this._propagateFrom(n,2);var r=n._target();if(r!==this){var o=r._bitField;if(0==(50397184&o)){var s=this._length();s>0&&r._migrateCallback0(this);for(var a=1;a<s;++a)r._migrateCallbackAt(this,a);this._setFollowing(),this._setLength(0),this._setFollowee(r)}else if(0!=(33554432&o))this._fulfill(r._value());else if(0!=(16777216&o))this._reject(r._reason());else{var c=new _("late cancellation observer");r._attachExtraTrace(c),this._reject(c)}}else this._reject(i())}},Promise.prototype._rejectCallback=function(t,e,n){var r=c.ensureErrorObject(t),i=r===t;if(!i&&!n&&w.warnings()){var o="a promise was rejected with a non-error: "+c.classString(t);this._warn(o,!0)}this._attachExtraTrace(r,!!e&&i),this._reject(t)},Promise.prototype._resolveFromExecutor=function(t){if(t!==d){var e=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(t,function(t){e._resolveCallback(t)},function(t){e._rejectCallback(t,n)});n=!1,this._popContext(),void 0!==r&&e._rejectCallback(r,!0)}},Promise.prototype._settlePromiseFromHandler=function(t,e,n,r){var i=r._bitField;if(0==(65536&i)){r._pushContext();var o;e===v?n&&"number"==typeof n.length?o=x(t).apply(this._boundValue(),n):(o=E).e=new p("cannot .spread() a non-array: "+c.classString(n)):o=x(t).call(e,n);var s=r._popContext();0==(65536&(i=r._bitField))&&(o===y?r._reject(n):o===E?r._rejectCallback(o.e,!1):(w.checkForgottenReturns(o,s,"",r,this),r._resolveCallback(o)))}},Promise.prototype._target=function(){for(var t=this;t._isFollowing();)t=t._followee();return t},Promise.prototype._followee=function(){return this._rejectionHandler0},Promise.prototype._setFollowee=function(t){this._rejectionHandler0=t},Promise.prototype._settlePromise=function(t,e,n,r){var i=t instanceof Promise,s=this._bitField,a=0!=(134217728&s);0!=(65536&s)?(i&&t._invokeInternalOnCancel(),n instanceof C&&n.isFinallyHandler()?(n.cancelPromise=t,x(e).call(n,r)===E&&t._reject(E.e)):e===o?t._fulfill(o.call(n)):n instanceof Proxyable?n._promiseCancelled(t):i||t instanceof g?t._cancel():n.cancel()):"function"==typeof e?i?(a&&t._setAsyncGuaranteed(),this._settlePromiseFromHandler(e,n,r,t)):e.call(n,r,t):n instanceof Proxyable?n._isResolved()||(0!=(33554432&s)?n._promiseFulfilled(r,t):n._promiseRejected(r,t)):i&&(a&&t._setAsyncGuaranteed(),0!=(33554432&s)?t._fulfill(r):t._reject(r))},Promise.prototype._settlePromiseLateCancellationObserver=function(t){var e=t.handler,n=t.promise,r=t.receiver,i=t.value;"function"==typeof e?n instanceof Promise?this._settlePromiseFromHandler(e,r,i,n):e.call(r,i,n):n instanceof Promise&&n._reject(i)},Promise.prototype._settlePromiseCtx=function(t){this._settlePromise(t.promise,t.handler,t.receiver,t.value)},Promise.prototype._settlePromise0=function(t,e,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=void 0,this._receiver0=void 0,this._settlePromise(r,t,i,e)},Promise.prototype._clearCallbackDataAtIndex=function(t){var e=4*t-4;this[e+2]=this[e+3]=this[e+0]=this[e+1]=void 0},Promise.prototype._fulfill=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(t===this){var n=i();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=t,(65535&e)>0&&(0!=(134217728&e)?this._settlePromises():h.settlePromises(this))}},Promise.prototype._reject=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(this._setRejected(),this._fulfillmentHandler0=t,this._isFinal())return h.fatalError(t,c.isNode);(65535&e)>0?h.settlePromises(this):this._ensurePossibleRejectionHandled()}},Promise.prototype._fulfillPromises=function(t,e){for(var n=1;n<t;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},Promise.prototype._rejectPromises=function(t,e){for(var n=1;n<t;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},Promise.prototype._settlePromises=function(){var t=this._bitField,e=65535&t;if(e>0){if(0!=(16842752&t)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,t),this._rejectPromises(e,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,t),this._fulfillPromises(e,r)}this._setLength(0)}this._clearCancellationData()},Promise.prototype._settledValue=function(){var t=this._bitField;return 0!=(33554432&t)?this._rejectionHandler0:0!=(16777216&t)?this._fulfillmentHandler0:void 0},Promise.defer=Promise.pending=function(){return w.deprecated("Promise.defer","new Promise"),{promise:new Promise(d),resolve:deferResolve,reject:deferReject}},c.notEnumerableProp(Promise,"_makeSelfResolutionError",i),e("./method")(Promise,d,m,s,w),e("./bind")(Promise,d,m,w),e("./cancel")(Promise,g,s,w),e("./direct_resolve")(Promise),e("./synchronous_inspection")(Promise),e("./join")(Promise,g,m,d,h,r),Promise.Promise=Promise,Promise.version="3.5.0",e("./map.js")(Promise,g,s,m,d,w),e("./call_get.js")(Promise),e("./using.js")(Promise,s,m,P,d,w),e("./timers.js")(Promise,d,w),e("./generators.js")(Promise,s,d,m,Proxyable,w),e("./nodeify.js")(Promise),e("./promisify.js")(Promise,d),e("./props.js")(Promise,g,m,s),e("./race.js")(Promise,d,m,s),e("./reduce.js")(Promise,g,s,m,d,w),e("./settle.js")(Promise,g,w),e("./some.js")(Promise,g,s),e("./filter.js")(Promise,d),e("./each.js")(Promise,d),e("./any.js")(Promise),c.toFastProperties(Promise),c.toFastProperties(Promise.prototype),fillTypes({a:1}),fillTypes({b:2}),fillTypes({c:3}),fillTypes(1),fillTypes(function(){}),fillTypes(void 0),fillTypes(!1),fillTypes(new Promise(d)),w.setBounds(l.firstLineError,c.lastLineError),Promise}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){function toResolutionValue(t){switch(t){case-2:return[];case-3:return{};case-6:return new Map}}function PromiseArray(t){var r=this._promise=new e(n);t instanceof e&&r._propagateFrom(t,3),r._setOnCancel(this),this._values=t,this._length=0,this._totalResolved=0,this._init(void 0,-2)}var s=t("./util");s.isArray;return s.inherits(PromiseArray,o),PromiseArray.prototype.length=function(){return this._length},PromiseArray.prototype.promise=function(){return this._promise},PromiseArray.prototype._init=function init(t,n){var o=r(this._values,this._promise);if(o instanceof e){var a=(o=o._target())._bitField;if(this._values=o,0==(50397184&a))return this._promise._setAsyncGuaranteed(),o._then(init,this._reject,void 0,this,n);if(0==(33554432&a))return 0!=(16777216&a)?this._reject(o._reason()):this._cancel();o=o._value()}if(null!==(o=s.asArray(o)))0!==o.length?this._iterate(o):-5===n?this._resolveEmptyArray():this._resolve(toResolutionValue(n));else{var c=i("expecting an array or an iterable object but got "+s.classString(o)).reason();this._promise._rejectCallback(c,!1)}},PromiseArray.prototype._iterate=function(t){var n=this.getActualLength(t.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,s=null,a=0;a<n;++a){var c=r(t[a],i);s=c instanceof e?(c=c._target())._bitField:null,o?null!==s&&c.suppressUnhandledRejections():null!==s?0==(50397184&s)?(c._proxy(this,a),this._values[a]=c):o=0!=(33554432&s)?this._promiseFulfilled(c._value(),a):0!=(16777216&s)?this._promiseRejected(c._reason(),a):this._promiseCancelled(a):o=this._promiseFulfilled(c,a)}o||i._setAsyncGuaranteed()},PromiseArray.prototype._isResolved=function(){return null===this._values},PromiseArray.prototype._resolve=function(t){this._values=null,this._promise._fulfill(t)},PromiseArray.prototype._cancel=function(){!this._isResolved()&&this._promise._isCancellable()&&(this._values=null,this._promise._cancel())},PromiseArray.prototype._reject=function(t){this._values=null,this._promise._rejectCallback(t,!1)},PromiseArray.prototype._promiseFulfilled=function(t,e){return this._values[e]=t,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},PromiseArray.prototype._promiseCancelled=function(){return this._cancel(),!0},PromiseArray.prototype._promiseRejected=function(t){return this._totalResolved++,this._reject(t),!0},PromiseArray.prototype._resultCancelled=function(){if(!this._isResolved()){var t=this._values;if(this._cancel(),t instanceof e)t.cancel();else for(var n=0;n<t.length;++n)t[n]instanceof e&&t[n].cancel()}},PromiseArray.prototype.shouldCopyValues=function(){return!0},PromiseArray.prototype.getActualLength=function(t){return t},PromiseArray}},{"./util":36}],24:[function(t,e,n){"use strict";e.exports=function(e,n){function propsFilter(t){return!p.test(t)}function isPromisified(t){try{return!0===t.__isPromisified__}catch(t){return!1}}function hasPromisified(t,e,n){var r=o.getDataPropertyOrDefault(t,e+n,h);return!!r&&isPromisified(r)}function checkValid(t,e,n){for(var r=0;r<t.length;r+=2){var i=t[r];if(n.test(i))for(var o=i.replace(n,""),s=0;s<t.length;s+=2)if(t[s]===o)throw new l("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",e))}}function promisifiableMethods(t,e,n,r){for(var i=o.inheritedDataKeys(t),s=[],a=0;a<i.length;++a){var c=i[a],u=t[c],l=r===_||_(c,u,t);"function"!=typeof u||isPromisified(u)||hasPromisified(t,c,e)||!r(c,u,t,l)||s.push(c,u)}return checkValid(s,e,n),s}function promisifyAll(t,e,n,r,s){for(var a=new RegExp(d(e)+"$"),c=promisifiableMethods(t,e,a,n),u=0,l=c.length;u<l;u+=2){var h=c[u],f=c[u+1],p=h+e;if(r===v)t[p]=v(h,i,h,f,e,s);else{var _=r(f,function(){return v(h,i,h,f,e,s)});o.notEnumerableProp(_,"__isPromisified__",!0),t[p]=_}}return o.toFastProperties(t),t}function promisify(t,e,n){return v(t,e,void 0,t,null,n)}var r,i={},o=t("./util"),s=t("./nodeback"),a=o.withAppended,c=o.maybeWrapAsError,u=o.canEvaluate,l=t("./errors").TypeError,h={__isPromisified__:!0},f=["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"],p=new RegExp("^(?:"+f.join("|")+")$"),_=function(t){return o.isIdentifier(t)&&"_"!==t.charAt(0)&&"constructor"!==t},d=function(t){return t.replace(/([$])/,"\\$")},v=u?r:function(t,r,u,l,h,f){function promisified(){var o=r;r===i&&(o=this);var u=new e(n);u._captureStackTrace();var l="string"==typeof _&&this!==p?this[_]:t,h=s(u,f);try{l.apply(o,a(arguments,h))}catch(t){u._rejectCallback(c(t),!0,!0)}return u._isFateSealed()||u._setAsyncGuaranteed(),u}var p=function(){return this}(),_=t;return"string"==typeof _&&(t=l),o.notEnumerableProp(promisified,"__isPromisified__",!0),promisified};e.promisify=function(t,e){if("function"!=typeof t)throw new l("expecting a function but got "+o.classString(t));if(isPromisified(t))return t;var n=promisify(t,void 0===(e=Object(e)).context?i:e.context,!!e.multiArgs);return o.copyDescriptors(t,n,propsFilter),n},e.promisifyAll=function(t,e){if("function"!=typeof t&&"object"!=typeof t)throw new l("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");var n=!!(e=Object(e)).multiArgs,r=e.suffix;"string"!=typeof r&&(r="Async");var i=e.filter;"function"!=typeof i&&(i=_);var s=e.promisifier;if("function"!=typeof s&&(s=v),!o.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var a=o.inheritedDataKeys(t),c=0;c<a.length;++c){var u=t[a[c]];"constructor"!==a[c]&&o.isClass(u)&&(promisifyAll(u.prototype,r,i,s,n),promisifyAll(u,r,i,s,n))}return promisifyAll(t,r,i,s,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function PropertiesPromiseArray(t){var e,n=!1;if(void 0!==o&&t instanceof o)e=u(t),n=!0;else{var r=c.keys(t),i=r.length;e=new Array(2*i);for(var s=0;s<i;++s){var a=r[s];e[s]=t[a],e[s+i]=a}}this.constructor$(e),this._isMap=n,this._init$(void 0,n?-6:-3)}function props(t){var n,o=r(t);return a(o)?(n=o instanceof e?o._then(e.props,void 0,void 0,void 0,void 0):new PropertiesPromiseArray(o).promise(),o instanceof e&&n._propagateFrom(o,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}var o,s=t("./util"),a=s.isObject,c=t("./es5");"function"==typeof Map&&(o=Map);var u=function(){function extractEntry(n,r){this[t]=n,this[t+e]=r,t++}var t=0,e=0;return function(n){e=n.size,t=0;var r=new Array(2*n.size);return n.forEach(extractEntry,r),r}}(),l=function(t){for(var e=new o,n=t.length/2|0,r=0;r<n;++r){var i=t[n+r],s=t[r];e.set(i,s)}return e};s.inherits(PropertiesPromiseArray,n),PropertiesPromiseArray.prototype._init=function(){},PropertiesPromiseArray.prototype._promiseFulfilled=function(t,e){if(this._values[e]=t,++this._totalResolved>=this._length){var n;if(this._isMap)n=l(this._values);else{n={};for(var r=this.length(),i=0,o=this.length();i<o;++i)n[this._values[i+r]]=this._values[i]}return this._resolve(n),!0}return!1},PropertiesPromiseArray.prototype.shouldCopyValues=function(){return!1},PropertiesPromiseArray.prototype.getActualLength=function(t){return t>>1},e.prototype.props=function(){return props(this)},e.props=function(t){return props(t)}}},{"./es5":13,"./util":36}],26:[function(t,e,n){"use strict";function arrayMove(t,e,n,r,i){for(var o=0;o<i;++o)n[o+r]=t[o+e],t[o+e]=void 0}function Queue(t){this._capacity=t,this._length=0,this._front=0}Queue.prototype._willBeOverCapacity=function(t){return this._capacity<t},Queue.prototype._pushOne=function(t){var e=this.length();this._checkCapacity(e+1),this[this._front+e&this._capacity-1]=t,this._length=e+1},Queue.prototype.push=function(t,e,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(t),this._pushOne(e),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=t,this[i+1&o]=e,this[i+2&o]=n,this._length=r},Queue.prototype.shift=function(){var t=this._front,e=this[t];return this[t]=void 0,this._front=t+1&this._capacity-1,this._length--,e},Queue.prototype.length=function(){return this._length},Queue.prototype._checkCapacity=function(t){this._capacity<t&&this._resizeTo(this._capacity<<1)},Queue.prototype._resizeTo=function(t){var e=this._capacity;this._capacity=t,arrayMove(this,0,this,e,this._front+this._length&e-1)},e.exports=Queue},{}],27:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function race(t,a){var c=r(t);if(c instanceof e)return s(c);if(null===(t=o.asArray(t)))return i("expecting an array or an iterable object but got "+o.classString(t));var u=new e(n);void 0!==a&&u._propagateFrom(a,3);for(var l=u._fulfill,h=u._reject,f=0,p=t.length;f<p;++f){var _=t[f];(void 0!==_||f in t)&&e.cast(_)._then(l,h,void 0,u,null)}return u}var o=t("./util"),s=function(t){return t.then(function(e){return race(e,t)})};e.race=function(t){return race(t,void 0)},e.prototype.race=function(){return race(this,void 0)}}},{"./util":36}],28:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function ReductionPromiseArray(t,n,r,i){this.constructor$(t);var s=a();this._fn=null===s?n:c.domainBind(s,n),void 0!==r&&(r=e.resolve(r))._attachCancellationCallback(this),this._initialValue=r,this._currentCancellable=null,this._eachValues=i===o?Array(this._length):0===i?null:void 0,this._promise._captureStackTrace(),this._init$(void 0,-5)}function completed(t,e){this.isFulfilled()?e._resolve(t):e._reject(t)}function reduce(t,e,n,i){return"function"!=typeof e?r("expecting a function but got "+c.classString(e)):new ReductionPromiseArray(t,e,n,i).promise()}function gotAccum(t){this.accum=t,this.array._gotAccum(t);var n=i(this.value,this.array._promise);return n instanceof e?(this.array._currentCancellable=n,n._then(gotValue,void 0,void 0,this,void 0)):gotValue.call(this,n)}function gotValue(t){var n=this.array,r=n._promise,i=u(n._fn);r._pushContext();var o;(o=void 0!==n._eachValues?i.call(r._boundValue(),t,this.index,this.length):i.call(r._boundValue(),this.accum,t,this.index,this.length))instanceof e&&(n._currentCancellable=o);var a=r._popContext();return s.checkForgottenReturns(o,a,void 0!==n._eachValues?"Promise.each":"Promise.reduce",r),o}var a=e._getDomain,c=t("./util"),u=c.tryCatch;c.inherits(ReductionPromiseArray,n),ReductionPromiseArray.prototype._gotAccum=function(t){void 0!==this._eachValues&&null!==this._eachValues&&t!==o&&this._eachValues.push(t)},ReductionPromiseArray.prototype._eachComplete=function(t){return null!==this._eachValues&&this._eachValues.push(t),this._eachValues},ReductionPromiseArray.prototype._init=function(){},ReductionPromiseArray.prototype._resolveEmptyArray=function(){this._resolve(void 0!==this._eachValues?this._eachValues:this._initialValue)},ReductionPromiseArray.prototype.shouldCopyValues=function(){return!1},ReductionPromiseArray.prototype._resolve=function(t){this._promise._resolveCallback(t),this._values=null},ReductionPromiseArray.prototype._resultCancelled=function(t){if(t===this._initialValue)return this._cancel();this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof e&&this._currentCancellable.cancel(),this._initialValue instanceof e&&this._initialValue.cancel())},ReductionPromiseArray.prototype._iterate=function(t){this._values=t;var n,r,i=t.length;if(void 0!==this._initialValue?(n=this._initialValue,r=0):(n=e.resolve(t[0]),r=1),this._currentCancellable=n,!n.isRejected())for(;r<i;++r){var o={accum:null,value:t[r],index:r,length:i,array:this};n=n._then(gotAccum,void 0,void 0,o,void 0)}void 0!==this._eachValues&&(n=n._then(this._eachComplete,void 0,void 0,this,void 0)),n._then(completed,completed,void 0,n,this)},e.prototype.reduce=function(t,e){return reduce(this,t,e,null)},e.reduce=function(t,e,n,r){return reduce(t,e,n,r)}}},{"./util":36}],29:[function(e,n,i){"use strict";var o,s=e("./util"),a=s.getNativePromise();if(s.isNode&&"undefined"==typeof MutationObserver){var c=r.setImmediate,u=t.nextTick;o=s.isRecentNode?function(t){c.call(r,t)}:function(e){u.call(t,e)}}else if("function"==typeof a&&"function"==typeof a.resolve){var l=a.resolve();o=function(t){l.then(t)}}else o="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&(window.navigator.standalone||window.cordova)?"undefined"!=typeof setImmediate?function(t){setImmediate(t)}:"undefined"!=typeof setTimeout?function(t){setTimeout(t,0)}:function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}:function(){var t=document.createElement("div"),e={attributes:!0},n=!1,r=document.createElement("div");new MutationObserver(function(){t.classList.toggle("foo"),n=!1}).observe(r,e);var i=function(){n||(n=!0,r.classList.toggle("foo"))};return function(n){var r=new MutationObserver(function(){r.disconnect(),n()});r.observe(t,e),i()}}();n.exports=o},{"./util":36}],30:[function(t,e,n){"use strict";e.exports=function(e,n,r){function SettledPromiseArray(t){this.constructor$(t)}var i=e.PromiseInspection;t("./util").inherits(SettledPromiseArray,n),SettledPromiseArray.prototype._promiseResolved=function(t,e){return this._values[t]=e,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},SettledPromiseArray.prototype._promiseFulfilled=function(t,e){var n=new i;return n._bitField=33554432,n._settledValueField=t,this._promiseResolved(e,n)},SettledPromiseArray.prototype._promiseRejected=function(t,e){var n=new i;return n._bitField=16777216,n._settledValueField=t,this._promiseResolved(e,n)},e.settle=function(t){return r.deprecated(".settle()",".reflect()"),new SettledPromiseArray(t).promise()},e.prototype.settle=function(){return e.settle(this)}}},{"./util":36}],31:[function(t,e,n){"use strict";e.exports=function(e,n,r){function SomePromiseArray(t){this.constructor$(t),this._howMany=0,this._unwrap=!1,this._initialized=!1}function some(t,e){if((0|e)!==e||e<0)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new SomePromiseArray(t),i=n.promise();return n.setHowMany(e),n.init(),i}var i=t("./util"),o=t("./errors").RangeError,s=t("./errors").AggregateError,a=i.isArray,c={};i.inherits(SomePromiseArray,n),SomePromiseArray.prototype._init=function(){if(this._initialized)if(0!==this._howMany){this._init$(void 0,-5);var t=a(this._values);!this._isResolved()&&t&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}else this._resolve([])},SomePromiseArray.prototype.init=function(){this._initialized=!0,this._init()},SomePromiseArray.prototype.setUnwrap=function(){this._unwrap=!0},SomePromiseArray.prototype.howMany=function(){return this._howMany},SomePromiseArray.prototype.setHowMany=function(t){this._howMany=t},SomePromiseArray.prototype._promiseFulfilled=function(t){return this._addFulfilled(t),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0)},SomePromiseArray.prototype._promiseRejected=function(t){return this._addRejected(t),this._checkOutcome()},SomePromiseArray.prototype._promiseCancelled=function(){return this._values instanceof e||null==this._values?this._cancel():(this._addRejected(c),this._checkOutcome())},SomePromiseArray.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var t=new s,e=this.length();e<this._values.length;++e)this._values[e]!==c&&t.push(this._values[e]);return t.length>0?this._reject(t):this._cancel(),!0}return!1},SomePromiseArray.prototype._fulfilled=function(){return this._totalResolved},SomePromiseArray.prototype._rejected=function(){return this._values.length-this.length()},SomePromiseArray.prototype._addRejected=function(t){this._values.push(t)},SomePromiseArray.prototype._addFulfilled=function(t){this._values[this._totalResolved++]=t},SomePromiseArray.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},SomePromiseArray.prototype._getRangeError=function(t){var e="Input array must contain at least "+this._howMany+" items but contains only "+t+" items";return new o(e)},SomePromiseArray.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},e.some=function(t,e){return some(t,e)},e.prototype.some=function(t){return some(this,t)},e._SomePromiseArray=SomePromiseArray}},{"./errors":12,"./util":36}],32:[function(t,e,n){"use strict";e.exports=function(t){function PromiseInspection(t){void 0!==t?(t=t._target(),this._bitField=t._bitField,this._settledValueField=t._isFateSealed()?t._settledValue():void 0):(this._bitField=0,this._settledValueField=void 0)}PromiseInspection.prototype._settledValue=function(){return this._settledValueField};var e=PromiseInspection.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},n=PromiseInspection.prototype.error=PromiseInspection.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=PromiseInspection.prototype.isFulfilled=function(){return 0!=(33554432&this._bitField)},i=PromiseInspection.prototype.isRejected=function(){return 0!=(16777216&this._bitField)},o=PromiseInspection.prototype.isPending=function(){return 0==(50397184&this._bitField)},s=PromiseInspection.prototype.isResolved=function(){return 0!=(50331648&this._bitField)};PromiseInspection.prototype.isCancelled=function(){return 0!=(8454144&this._bitField)},t.prototype.__isCancelled=function(){return 65536==(65536&this._bitField)},t.prototype._isCancelled=function(){return this._target().__isCancelled()},t.prototype.isCancelled=function(){return 0!=(8454144&this._target()._bitField)},t.prototype.isPending=function(){return o.call(this._target())},t.prototype.isRejected=function(){return i.call(this._target())},t.prototype.isFulfilled=function(){return r.call(this._target())},t.prototype.isResolved=function(){return s.call(this._target())},t.prototype.value=function(){return e.call(this._target())},t.prototype.reason=function(){var t=this._target();return t._unsetRejectionIsUnhandled(),n.call(t)},t.prototype._value=function(){return this._settledValue()},t.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},t.PromiseInspection=PromiseInspection}},{}],33:[function(t,e,n){"use strict";e.exports=function(e,n){function doGetThen(t){return t.then}function getThen(t){try{return doGetThen(t)}catch(t){return i.e=t,i}}function isAnyBluebirdPromise(t){try{return s.call(t,"_promise0")}catch(t){return!1}}function doThenable(t,o,s){var a=new e(n),c=a;s&&s._pushContext(),a._captureStackTrace(),s&&s._popContext();var u=!0,l=r.tryCatch(o).call(t,function(t){a&&(a._resolveCallback(t),a=null)},function(t){a&&(a._rejectCallback(t,u,!0),a=null)});return u=!1,a&&l===i&&(a._rejectCallback(l.e,!0,!0),a=null),c}var r=t("./util"),i=r.errorObj,o=r.isObject,s={}.hasOwnProperty;return function(t,r){if(o(t)){if(t instanceof e)return t;var s=getThen(t);if(s===i)return r&&r._pushContext(),a=e.reject(s.e),r&&r._popContext(),a;if("function"==typeof s){if(isAnyBluebirdPromise(t)){var a=new e(n);return t._then(a._fulfill,a._reject,void 0,a,null),a}return doThenable(t,s,r)}}return t}}},{"./util":36}],34:[function(t,e,n){"use strict";e.exports=function(e,n,r){function HandleWrapper(t){this.handle=t}function successClear(t){return clearTimeout(this.handle),t}function failureClear(t){throw clearTimeout(this.handle),t}var i=t("./util"),o=e.TimeoutError;HandleWrapper.prototype._resultCancelled=function(){clearTimeout(this.handle)};var s=function(t){return a(+this).thenReturn(t)},a=e.delay=function(t,i){var o,a;return void 0!==i?(o=e.resolve(i)._then(s,null,null,t,void 0),r.cancellation()&&i instanceof e&&o._setOnCancel(i)):(o=new e(n),a=setTimeout(function(){o._fulfill()},+t),r.cancellation()&&o._setOnCancel(new HandleWrapper(a)),o._captureStackTrace()),o._setAsyncGuaranteed(),o};e.prototype.delay=function(t){return a(t,this)};var c=function(t,e,n){var r;r="string"!=typeof e?e instanceof Error?e:new o("operation timed out"):new o(e),i.markAsOriginatingFromRejection(r),t._attachExtraTrace(r),t._reject(r),null!=n&&n.cancel()};e.prototype.timeout=function(t,e){t=+t;var n,i,o=new HandleWrapper(setTimeout(function(){n.isPending()&&c(n,e,i)},t));return r.cancellation()?(i=this.then(),(n=i._then(successClear,failureClear,void 0,o,void 0))._setOnCancel(o)):n=this._then(successClear,failureClear,void 0,o,void 0),n}}},{"./util":36}],35:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function thrower(t){setTimeout(function(){throw t},0)}function castPreservingDisposable(t){var e=r(t);return e!==t&&"function"==typeof t._isDisposable&&"function"==typeof t._getDisposer&&t._isDisposable()&&e._setDisposable(t._getDisposer()),e}function dispose(t,n){function iterator(){if(i>=s)return a._fulfill();var o=castPreservingDisposable(t[i++]);if(o instanceof e&&o._isDisposable()){try{o=r(o._getDisposer().tryDispose(n),t.promise)}catch(t){return thrower(t)}if(o instanceof e)return o._then(iterator,thrower,null,null,null)}iterator()}var i=0,s=t.length,a=new e(o);return iterator(),a}function Disposer(t,e,n){this._data=t,this._promise=e,this._context=n}function FunctionDisposer(t,e,n){this.constructor$(t,e,n)}function maybeUnwrapDisposer(t){return Disposer.isDisposer(t)?(this.resources[this.index]._setDisposable(t),t.promise()):t}function ResourceList(t){this.length=t,this.promise=null,this[t-1]=null}var a=t("./util"),c=t("./errors").TypeError,u=t("./util").inherits,l=a.errorObj,h=a.tryCatch,f={};Disposer.prototype.data=function(){return this._data},Disposer.prototype.promise=function(){return this._promise},Disposer.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():f},Disposer.prototype.tryDispose=function(t){var e=this.resource(),n=this._context;void 0!==n&&n._pushContext();var r=e!==f?this.doDispose(e,t):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},Disposer.isDisposer=function(t){return null!=t&&"function"==typeof t.resource&&"function"==typeof t.tryDispose},u(FunctionDisposer,Disposer),FunctionDisposer.prototype.doDispose=function(t,e){return this.data().call(t,t,e)},ResourceList.prototype._resultCancelled=function(){for(var t=this.length,n=0;n<t;++n){var r=this[n];r instanceof e&&r.cancel()}},e.using=function(){var t=arguments.length;if(t<2)return n("you must pass at least 2 arguments to Promise.using");var i=arguments[t-1];if("function"!=typeof i)return n("expecting a function but got "+a.classString(i));var o,c=!0;2===t&&Array.isArray(arguments[0])?(t=(o=arguments[0]).length,c=!1):(o=arguments,t--);for(var u=new ResourceList(t),f=0;f<t;++f){var p=o[f];if(Disposer.isDisposer(p)){var _=p;(p=p.promise())._setDisposable(_)}else{var d=r(p);d instanceof e&&(p=d._then(maybeUnwrapDisposer,null,null,{resources:u,index:f},void 0))}u[f]=p}for(var v=new Array(u.length),f=0;f<v.length;++f)v[f]=e.resolve(u[f]).reflect();var y=e.all(v).then(function(t){for(var e=0;e<t.length;++e){var n=t[e];if(n.isRejected())return l.e=n.error(),l;if(!n.isFulfilled())return void y.cancel();t[e]=n.value()}m._pushContext(),i=h(i);var r=c?i.apply(void 0,t):i(t),o=m._popContext();return s.checkForgottenReturns(r,o,"Promise.using",m),r}),m=y.lastly(function(){var t=new e.PromiseInspection(y);return dispose(u,t)});return u.promise=m,m._setOnCancel(u),m},e.prototype._setDisposable=function(t){this._bitField=131072|this._bitField,this._disposer=t},e.prototype._isDisposable=function(){return(131072&this._bitField)>0},e.prototype._getDisposer=function(){return this._disposer},e.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=void 0},e.prototype.disposer=function(t){if("function"==typeof t)return new FunctionDisposer(t,this,i());throw new c}}},{"./errors":12,"./util":36}],36:[function(e,n,i){"use strict";function tryCatcher(){try{var t=c;return c=null,t.apply(this,arguments)}catch(t){return a.e=t,a}}function tryCatch(t){return c=t,tryCatcher}function isPrimitive(t){return null==t||!0===t||!1===t||"string"==typeof t||"number"==typeof t}function isObject(t){return"function"==typeof t||"object"==typeof t&&null!==t}function maybeWrapAsError(t){return isPrimitive(t)?new Error(safeToString(t)):t}function withAppended(t,e){var n,r=t.length,i=new Array(r+1);for(n=0;n<r;++n)i[n]=t[n];return i[n]=e,i}function getDataPropertyOrDefault(t,e,n){if(!o.isES5)return{}.hasOwnProperty.call(t,e)?t[e]:void 0;var r=Object.getOwnPropertyDescriptor(t,e);return null!=r?null==r.get&&null==r.set?r.value:n:void 0}function notEnumerableProp(t,e,n){if(isPrimitive(t))return t;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return o.defineProperty(t,e,r),t}function thrower(t){throw t}function isClass(t){try{if("function"==typeof t){var e=o.names(t.prototype),n=o.isES5&&e.length>1,r=e.length>0&&!(1===e.length&&"constructor"===e[0]),i=f.test(t+"")&&o.names(t).length>0;if(n||r||i)return!0}return!1}catch(t){return!1}}function toFastProperties(t){function FakeConstructor(){}FakeConstructor.prototype=t;for(var e=8;e--;)new FakeConstructor;return t}function isIdentifier(t){return p.test(t)}function filledRange(t,e,n){for(var r=new Array(t),i=0;i<t;++i)r[i]=e+i+n;return r}function safeToString(t){try{return t+""}catch(t){return"[no string representation]"}}function isError(t){return null!==t&&"object"==typeof t&&"string"==typeof t.message&&"string"==typeof t.name}function markAsOriginatingFromRejection(t){try{notEnumerableProp(t,"isOperational",!0)}catch(t){}}function originatesFromRejection(t){return null!=t&&(t instanceof Error.__BluebirdErrorTypes__.OperationalError||!0===t.isOperational)}function canAttachTrace(t){return isError(t)&&o.propertyIsWritable(t,"stack")}function classString(t){return{}.toString.call(t)}function copyDescriptors(t,e,n){for(var r=o.names(t),i=0;i<r.length;++i){var s=r[i];if(n(s))try{o.defineProperty(e,s,o.getDescriptor(t,s))}catch(t){}}}function env(e){return m?t.env[e]:void 0}function getNativePromise(){if("function"==typeof Promise)try{var t=new Promise(function(){});if("[object Promise]"==={}.toString.call(t))return Promise}catch(t){}}function domainBind(t,e){return t.bind(e)}var o=e("./es5"),s="undefined"==typeof navigator,a={e:{}},c,u="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r?r:void 0!==this?this:null,l=function(t,e){function T(){this.constructor=t,this.constructor$=e;for(var r in e.prototype)n.call(e.prototype,r)&&"$"!==r.charAt(r.length-1)&&(this[r+"$"]=e.prototype[r])}var n={}.hasOwnProperty;return T.prototype=e.prototype,t.prototype=new T,t.prototype},h=function(){var t=[Array.prototype,Object.prototype,Function.prototype],e=function(e){for(var n=0;n<t.length;++n)if(t[n]===e)return!0;return!1};if(o.isES5){var n=Object.getOwnPropertyNames;return function(t){for(var r=[],i=Object.create(null);null!=t&&!e(t);){var s;try{s=n(t)}catch(t){return r}for(var a=0;a<s.length;++a){var c=s[a];if(!i[c]){i[c]=!0;var u=Object.getOwnPropertyDescriptor(t,c);null!=u&&null==u.get&&null==u.set&&r.push(c)}}t=o.getPrototypeOf(t)}return r}}var r={}.hasOwnProperty;return function(n){if(e(n))return[];var i=[];t:for(var o in n)if(r.call(n,o))i.push(o);else{for(var s=0;s<t.length;++s)if(r.call(t[s],o))continue t;i.push(o)}return i}}(),f=/this\s*\.\s*\S+\s*=/,p=/^[a-z$_][a-z$_0-9]*$/i,_="stack"in new Error?function(t){return canAttachTrace(t)?t:new Error(safeToString(t))}:function(t){if(canAttachTrace(t))return t;try{throw new Error(safeToString(t))}catch(t){return t}},d=function(t){return o.isArray(t)?t:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var v="function"==typeof Array.from?function(t){return Array.from(t)}:function(t){for(var e,n=[],r=t[Symbol.iterator]();!(e=r.next()).done;)n.push(e.value);return n};d=function(t){return o.isArray(t)?t:null!=t&&"function"==typeof t[Symbol.iterator]?v(t):null}}var y=void 0!==t&&"[object process]"===classString(t).toLowerCase(),m=void 0!==t&&void 0!==t.env,g={isClass:isClass,isIdentifier:isIdentifier,inheritedDataKeys:h,getDataPropertyOrDefault:getDataPropertyOrDefault,thrower:thrower,isArray:o.isArray,asArray:d,notEnumerableProp:notEnumerableProp,isPrimitive:isPrimitive,isObject:isObject,isError:isError,canEvaluate:s,errorObj:a,tryCatch:tryCatch,inherits:l,withAppended:withAppended,maybeWrapAsError:maybeWrapAsError,toFastProperties:toFastProperties,filledRange:filledRange,toString:safeToString,canAttachTrace:canAttachTrace,ensureErrorObject:_,originatesFromRejection:originatesFromRejection,markAsOriginatingFromRejection:markAsOriginatingFromRejection,classString:classString,copyDescriptors:copyDescriptors,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:y,hasEnvVariables:m,env:env,global:u,getNativePromise:getNativePromise,domainBind:domainBind};g.isRecentNode=g.isNode&&function(){var e=t.versions.node.split(".").map(Number);return 0===e[0]&&e[1]>10||e[0]>0}(),g.isNode&&g.toFastProperties(t);try{throw new Error}catch(t){g.lastLineError=t}n.exports=g},{"./es5":13}]},{},[4])(4)}),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise)}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:2}],2:[function(t,e,n){function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(t){if(r===setTimeout)return setTimeout(t,0);if((r===defaultSetTimout||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}function runClearTimeout(t){if(i===clearTimeout)return clearTimeout(t);if((i===defaultClearTimeout||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{return i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}function cleanUpNextTick(){c&&s&&(c=!1,s.length?a=s.concat(a):u=-1,a.length&&drainQueue())}function drainQueue(){if(!c){var t=runTimeout(cleanUpNextTick);c=!0;for(var e=a.length;e;){for(s=a,a=[];++u<e;)s&&s[u].run();u=-1,e=a.length}s=null,c=!1,runClearTimeout(t)}}function Item(t,e){this.fun=t,this.array=e}function noop(){}var r,i,o=e.exports={};!function(){try{r="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(t){r=defaultSetTimout}try{i="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(t){i=defaultClearTimeout}}();var s,a=[],c=!1,u=-1;o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];a.push(new Item(t,e)),1!==a.length||c||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=noop,o.addListener=noop,o.once=noop,o.off=noop,o.removeListener=noop,o.removeAllListeners=noop,o.emit=noop,o.prependListener=noop,o.prependOnceListener=noop,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],3:[function(t,e,n){(function(){function createReduce(t){function iterator(e,n,r,i,o,s){for(;o>=0&&o<s;o+=t){var a=i?i[o]:o;r=n(r,e[a],a,e)}return r}return function(e,n,r,i){n=y(n,i,4);var o=!S(e)&&v.keys(e),s=(o||e).length,a=t>0?0:s-1;return arguments.length<3&&(r=e[o?o[a]:a],a+=t),iterator(e,n,r,o,a,s)}}function createPredicateIndexFinder(t){return function(e,n,r){n=m(n,r);for(var i=C(e),o=t>0?0:i-1;o>=0&&o<i;o+=t)if(n(e[o],o,e))return o;return-1}}function createIndexFinder(t,e,n){return function(r,i,o){var s=0,a=C(r);if("number"==typeof o)t>0?s=o>=0?o:Math.max(o+a,s):a=o>=0?Math.min(o+1,a):o+a+1;else if(n&&o&&a)return o=n(r,i),r[o]===i?o:-1;if(i!==i)return(o=e(c.call(r,s,a),v.isNaN))>=0?o+s:-1;for(o=t>0?s:a-1;o>=0&&o<a;o+=t)if(r[o]===i)return o;return-1}}function collectNonEnumProps(t,e){var n=j.length,r=t.constructor,i=v.isFunction(r)&&r.prototype||o,s="constructor";for(v.has(t,s)&&!v.contains(e,s)&&e.push(s);n--;)(s=j[n])in t&&t[s]!==i[s]&&!v.contains(e,s)&&e.push(s)}var t=this,r=t._,i=Array.prototype,o=Object.prototype,s=Function.prototype,a=i.push,c=i.slice,u=o.toString,l=o.hasOwnProperty,h=Array.isArray,f=Object.keys,p=s.bind,_=Object.create,d=function(){},v=function(t){return t instanceof v?t:this instanceof v?void(this._wrapped=t):new v(t)};void 0!==n?(void 0!==e&&e.exports&&(n=e.exports=v),n._=v):t._=v,v.VERSION="1.8.3";var y=function(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)};case 4:return function(n,r,i,o){return t.call(e,n,r,i,o)}}return function(){return t.apply(e,arguments)}},m=function(t,e,n){return null==t?v.identity:v.isFunction(t)?y(t,e,n):v.isObject(t)?v.matcher(t):v.property(t)};v.iteratee=function(t,e){return m(t,e,1/0)};var g=function(t,e){return function(n){var r=arguments.length;if(r<2||null==n)return n;for(var i=1;i<r;i++)for(var o=arguments[i],s=t(o),a=s.length,c=0;c<a;c++){var u=s[c];e&&void 0!==n[u]||(n[u]=o[u])}return n}},b=function(t){if(!v.isObject(t))return{};if(_)return _(t);d.prototype=t;var e=new d;return d.prototype=null,e},P=function(t){return function(e){return null==e?void 0:e[t]}},w=Math.pow(2,53)-1,C=P("length"),S=function(t){var e=C(t);return"number"==typeof e&&e>=0&&e<=w};v.each=v.forEach=function(t,e,n){e=y(e,n);var r,i;if(S(t))for(r=0,i=t.length;r<i;r++)e(t[r],r,t);else{var o=v.keys(t);for(r=0,i=o.length;r<i;r++)e(t[o[r]],o[r],t)}return t},v.map=v.collect=function(t,e,n){e=m(e,n);for(var r=!S(t)&&v.keys(t),i=(r||t).length,o=Array(i),s=0;s<i;s++){var a=r?r[s]:s;o[s]=e(t[a],a,t)}return o},v.reduce=v.foldl=v.inject=createReduce(1),v.reduceRight=v.foldr=createReduce(-1),v.find=v.detect=function(t,e,n){var r;if(void 0!==(r=S(t)?v.findIndex(t,e,n):v.findKey(t,e,n))&&-1!==r)return t[r]},v.filter=v.select=function(t,e,n){var r=[];return e=m(e,n),v.each(t,function(t,n,i){e(t,n,i)&&r.push(t)}),r},v.reject=function(t,e,n){return v.filter(t,v.negate(m(e)),n)},v.every=v.all=function(t,e,n){e=m(e,n);for(var r=!S(t)&&v.keys(t),i=(r||t).length,o=0;o<i;o++){var s=r?r[o]:o;if(!e(t[s],s,t))return!1}return!0},v.some=v.any=function(t,e,n){e=m(e,n);for(var r=!S(t)&&v.keys(t),i=(r||t).length,o=0;o<i;o++){var s=r?r[o]:o;if(e(t[s],s,t))return!0}return!1},v.contains=v.includes=v.include=function(t,e,n,r){return S(t)||(t=v.values(t)),("number"!=typeof n||r)&&(n=0),v.indexOf(t,e,n)>=0},v.invoke=function(t,e){var n=c.call(arguments,2),r=v.isFunction(e);return v.map(t,function(t){var i=r?e:t[e];return null==i?i:i.apply(t,n)})},v.pluck=function(t,e){return v.map(t,v.property(e))},v.where=function(t,e){return v.filter(t,v.matcher(e))},v.findWhere=function(t,e){return v.find(t,v.matcher(e))},v.max=function(t,e,n){var r,i,o=-1/0,s=-1/0;if(null==e&&null!=t)for(var a=0,c=(t=S(t)?t:v.values(t)).length;a<c;a++)(r=t[a])>o&&(o=r);else e=m(e,n),v.each(t,function(t,n,r){((i=e(t,n,r))>s||i===-1/0&&o===-1/0)&&(o=t,s=i)});return o},v.min=function(t,e,n){var r,i,o=1/0,s=1/0;if(null==e&&null!=t)for(var a=0,c=(t=S(t)?t:v.values(t)).length;a<c;a++)(r=t[a])<o&&(o=r);else e=m(e,n),v.each(t,function(t,n,r){((i=e(t,n,r))<s||i===1/0&&o===1/0)&&(o=t,s=i)});return o},v.shuffle=function(t){for(var e,n=S(t)?t:v.values(t),r=n.length,i=Array(r),o=0;o<r;o++)(e=v.random(0,o))!==o&&(i[o]=i[e]),i[e]=n[o];return i},v.sample=function(t,e,n){return null==e||n?(S(t)||(t=v.values(t)),t[v.random(t.length-1)]):v.shuffle(t).slice(0,Math.max(0,e))},v.sortBy=function(t,e,n){return e=m(e,n),v.pluck(v.map(t,function(t,n,r){return{value:t,index:n,criteria:e(t,n,r)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index}),"value")};var k=function(t){return function(e,n,r){var i={};return n=m(n,r),v.each(e,function(r,o){var s=n(r,o,e);t(i,r,s)}),i}};v.groupBy=k(function(t,e,n){v.has(t,n)?t[n].push(e):t[n]=[e]}),v.indexBy=k(function(t,e,n){t[n]=e}),v.countBy=k(function(t,e,n){v.has(t,n)?t[n]++:t[n]=1}),v.toArray=function(t){return t?v.isArray(t)?c.call(t):S(t)?v.map(t,v.identity):v.values(t):[]},v.size=function(t){return null==t?0:S(t)?t.length:v.keys(t).length},v.partition=function(t,e,n){e=m(e,n);var r=[],i=[];return v.each(t,function(t,n,o){(e(t,n,o)?r:i).push(t)}),[r,i]},v.first=v.head=v.take=function(t,e,n){if(null!=t)return null==e||n?t[0]:v.initial(t,t.length-e)},v.initial=function(t,e,n){return c.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))},v.last=function(t,e,n){if(null!=t)return null==e||n?t[t.length-1]:v.rest(t,Math.max(0,t.length-e))},v.rest=v.tail=v.drop=function(t,e,n){return c.call(t,null==e||n?1:e)},v.compact=function(t){return v.filter(t,v.identity)};var E=function(t,e,n,r){for(var i=[],o=0,s=r||0,a=C(t);s<a;s++){var c=t[s];if(S(c)&&(v.isArray(c)||v.isArguments(c))){e||(c=E(c,e,n));var u=0,l=c.length;for(i.length+=l;u<l;)i[o++]=c[u++]}else n||(i[o++]=c)}return i};v.flatten=function(t,e){return E(t,e,!1)},v.without=function(t){return v.difference(t,c.call(arguments,1))},v.uniq=v.unique=function(t,e,n,r){v.isBoolean(e)||(r=n,n=e,e=!1),null!=n&&(n=m(n,r));for(var i=[],o=[],s=0,a=C(t);s<a;s++){var c=t[s],u=n?n(c,s,t):c;e?(s&&o===u||i.push(c),o=u):n?v.contains(o,u)||(o.push(u),i.push(c)):v.contains(i,c)||i.push(c)}return i},v.union=function(){return v.uniq(E(arguments,!0,!0))},v.intersection=function(t){for(var e=[],n=arguments.length,r=0,i=C(t);r<i;r++){var o=t[r];if(!v.contains(e,o)){for(var s=1;s<n&&v.contains(arguments[s],o);s++);s===n&&e.push(o)}}return e},v.difference=function(t){var e=E(arguments,!0,!0,1);return v.filter(t,function(t){return!v.contains(e,t)})},v.zip=function(){return v.unzip(arguments)},v.unzip=function(t){for(var e=t&&v.max(t,C).length||0,n=Array(e),r=0;r<e;r++)n[r]=v.pluck(t,r);return n},v.object=function(t,e){for(var n={},r=0,i=C(t);r<i;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},v.findIndex=createPredicateIndexFinder(1),v.findLastIndex=createPredicateIndexFinder(-1),v.sortedIndex=function(t,e,n,r){for(var i=(n=m(n,r,1))(e),o=0,s=C(t);o<s;){var a=Math.floor((o+s)/2);n(t[a])<i?o=a+1:s=a}return o},v.indexOf=createIndexFinder(1,v.findIndex,v.sortedIndex),v.lastIndexOf=createIndexFinder(-1,v.findLastIndex),v.range=function(t,e,n){null==e&&(e=t||0,t=0),n=n||1;for(var r=Math.max(Math.ceil((e-t)/n),0),i=Array(r),o=0;o<r;o++,t+=n)i[o]=t;return i};var x=function(t,e,n,r,i){if(!(r instanceof e))return t.apply(n,i);var o=b(t.prototype),s=t.apply(o,i);return v.isObject(s)?s:o};v.bind=function(t,e){if(p&&t.bind===p)return p.apply(t,c.call(arguments,1));if(!v.isFunction(t))throw new TypeError("Bind must be called on a function");var n=c.call(arguments,2),r=function(){return x(t,r,e,this,n.concat(c.call(arguments)))};return r},v.partial=function(t){var e=c.call(arguments,1),n=function(){for(var r=0,i=e.length,o=Array(i),s=0;s<i;s++)o[s]=e[s]===v?arguments[r++]:e[s];for(;r<arguments.length;)o.push(arguments[r++]);return x(t,n,this,this,o)};return n},v.bindAll=function(t){var e,n,r=arguments.length;if(r<=1)throw new Error("bindAll must be passed function names");for(e=1;e<r;e++)t[n=arguments[e]]=v.bind(t[n],t);return t},v.memoize=function(t,e){var n=function(r){var i=n.cache,o=""+(e?e.apply(this,arguments):r);return v.has(i,o)||(i[o]=t.apply(this,arguments)),i[o]};return n.cache={},n},v.delay=function(t,e){var n=c.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},v.defer=v.partial(v.delay,v,1),v.throttle=function(t,e,n){var r,i,o,s=null,a=0;n||(n={});var c=function(){a=!1===n.leading?0:v.now(),s=null,o=t.apply(r,i),s||(r=i=null)};return function(){var u=v.now();a||!1!==n.leading||(a=u);var l=e-(u-a);return r=this,i=arguments,l<=0||l>e?(s&&(clearTimeout(s),s=null),a=u,o=t.apply(r,i),s||(r=i=null)):s||!1===n.trailing||(s=setTimeout(c,l)),o}},v.debounce=function(t,e,n){var r,i,o,s,a,c=function(){var u=v.now()-s;u<e&&u>=0?r=setTimeout(c,e-u):(r=null,n||(a=t.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,s=v.now();var u=n&&!r;return r||(r=setTimeout(c,e)),u&&(a=t.apply(o,i),o=i=null),a}},v.wrap=function(t,e){return v.partial(e,t)},v.negate=function(t){return function(){return!t.apply(this,arguments)}},v.compose=function(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},v.after=function(t,e){return function(){if(--t<1)return e.apply(this,arguments)}},v.before=function(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=null),n}},v.once=v.partial(v.before,2);var A=!{toString:null}.propertyIsEnumerable("toString"),j=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];v.keys=function(t){if(!v.isObject(t))return[];if(f)return f(t);var e=[];for(var n in t)v.has(t,n)&&e.push(n);return A&&collectNonEnumProps(t,e),e},v.allKeys=function(t){if(!v.isObject(t))return[];var e=[];for(var n in t)e.push(n);return A&&collectNonEnumProps(t,e),e},v.values=function(t){for(var e=v.keys(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=t[e[i]];return r},v.mapObject=function(t,e,n){e=m(e,n);for(var r,i=v.keys(t),o=i.length,s={},a=0;a<o;a++)s[r=i[a]]=e(t[r],r,t);return s},v.pairs=function(t){for(var e=v.keys(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=[e[i],t[e[i]]];return r},v.invert=function(t){for(var e={},n=v.keys(t),r=0,i=n.length;r<i;r++)e[t[n[r]]]=n[r];return e},v.functions=v.methods=function(t){var e=[];for(var n in t)v.isFunction(t[n])&&e.push(n);return e.sort()},v.extend=g(v.allKeys),v.extendOwn=v.assign=g(v.keys),v.findKey=function(t,e,n){e=m(e,n);for(var r,i=v.keys(t),o=0,s=i.length;o<s;o++)if(r=i[o],e(t[r],r,t))return r},v.pick=function(t,e,n){var r,i,o={},s=t;if(null==s)return o;v.isFunction(e)?(i=v.allKeys(s),r=y(e,n)):(i=E(arguments,!1,!1,1),r=function(t,e,n){return e in n},s=Object(s));for(var a=0,c=i.length;a<c;a++){var u=i[a],l=s[u];r(l,u,s)&&(o[u]=l)}return o},v.omit=function(t,e,n){if(v.isFunction(e))e=v.negate(e);else{var r=v.map(E(arguments,!1,!1,1),String);e=function(t,e){return!v.contains(r,e)}}return v.pick(t,e,n)},v.defaults=g(v.allKeys,!0),v.create=function(t,e){var n=b(t);return e&&v.extendOwn(n,e),n},v.clone=function(t){return v.isObject(t)?v.isArray(t)?t.slice():v.extend({},t):t},v.tap=function(t,e){return e(t),t},v.isMatch=function(t,e){var n=v.keys(e),r=n.length;if(null==t)return!r;for(var i=Object(t),o=0;o<r;o++){var s=n[o];if(e[s]!==i[s]||!(s in i))return!1}return!0};var T=function(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return t===e;t instanceof v&&(t=t._wrapped),e instanceof v&&(e=e._wrapped);var i=u.call(t);if(i!==u.call(e))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!=+t?+e!=+e:0==+t?1/+t==1/e:+t==+e;case"[object Date]":case"[object Boolean]":return+t==+e}var o="[object Array]"===i;if(!o){if("object"!=typeof t||"object"!=typeof e)return!1;var s=t.constructor,a=e.constructor;if(s!==a&&!(v.isFunction(s)&&s instanceof s&&v.isFunction(a)&&a instanceof a)&&"constructor"in t&&"constructor"in e)return!1}n=n||[],r=r||[];for(var c=n.length;c--;)if(n[c]===t)return r[c]===e;if(n.push(t),r.push(e),o){if((c=t.length)!==e.length)return!1;for(;c--;)if(!T(t[c],e[c],n,r))return!1}else{var l,h=v.keys(t);if(c=h.length,v.keys(e).length!==c)return!1;for(;c--;)if(l=h[c],!v.has(e,l)||!T(t[l],e[l],n,r))return!1}return n.pop(),r.pop(),!0};v.isEqual=function(t,e){return T(t,e)},v.isEmpty=function(t){return null==t||(S(t)&&(v.isArray(t)||v.isString(t)||v.isArguments(t))?0===t.length:0===v.keys(t).length)},v.isElement=function(t){return!(!t||1!==t.nodeType)},v.isArray=h||function(t){return"[object Array]"===u.call(t)},v.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},v.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){v["is"+t]=function(e){return u.call(e)==="[object "+t+"]"}}),v.isArguments(arguments)||(v.isArguments=function(t){return v.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(v.isFunction=function(t){return"function"==typeof t||!1}),v.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},v.isNaN=function(t){return v.isNumber(t)&&t!==+t},v.isBoolean=function(t){return!0===t||!1===t||"[object Boolean]"===u.call(t)},v.isNull=function(t){return null===t},v.isUndefined=function(t){return void 0===t},v.has=function(t,e){return null!=t&&l.call(t,e)},v.noConflict=function(){return t._=r,this},v.identity=function(t){return t},v.constant=function(t){return function(){return t}},v.noop=function(){},v.property=P,v.propertyOf=function(t){return null==t?function(){}:function(e){return t[e]}},v.matcher=v.matches=function(t){return t=v.extendOwn({},t),function(e){return v.isMatch(e,t)}},v.times=function(t,e,n){var r=Array(Math.max(0,t));e=y(e,n,1);for(var i=0;i<t;i++)r[i]=e(i);return r},v.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},v.now=Date.now||function(){return(new Date).getTime()};var F={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},O=v.invert(F),R=function(t){var e=function(e){return t[e]},n="(?:"+v.keys(t).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,e):t}};v.escape=R(F),v.unescape=R(O),v.result=function(t,e,n){var r=null==t?void 0:t[e];return void 0===r&&(r=n),v.isFunction(r)?r.call(t):r};var N=0;v.uniqueId=function(t){var e=++N+"";return t?t+e:e},v.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var D=/(.)^/,I={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},M=/\\|'|\r|\n|\u2028|\u2029/g,L=function(t){return"\\"+I[t]};v.template=function(t,e,n){!e&&n&&(e=n),e=v.defaults({},e,v.templateSettings);var r=RegExp([(e.escape||D).source,(e.interpolate||D).source,(e.evaluate||D).source].join("|")+"|$","g"),i=0,o="__p+='";t.replace(r,function(e,n,r,s,a){return o+=t.slice(i,a).replace(M,L),i=a+e.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":s&&(o+="';\n"+s+"\n__p+='"),e}),o+="';\n",e.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var s=new Function(e.variable||"obj","_",o)}catch(t){throw t.source=o,t}var a=function(t){return s.call(this,t,v)},c=e.variable||"obj";return a.source="function("+c+"){\n"+o+"}",a},v.chain=function(t){var e=v(t);return e._chain=!0,e};var U=function(t,e){return t._chain?v(e).chain():e};v.mixin=function(t){v.each(v.functions(t),function(e){var n=v[e]=t[e];v.prototype[e]=function(){var t=[this._wrapped];return a.apply(t,arguments),U(this,n.apply(v,t))}})},v.mixin(v),v.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=i[t];v.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],U(this,n)}}),v.each(["concat","join","slice"],function(t){var e=i[t];v.prototype[t]=function(){return U(this,e.apply(this._wrapped,arguments))}}),v.prototype.value=function(){return this._wrapped},v.prototype.valueOf=v.prototype.toJSON=v.prototype.value,v.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return v})}).call(this)},{}],4:[function(t,e,n){for(var r=[],i=0;i<256;++i)r[i]=(i+256).toString(16).substr(1);e.exports=function(t,e){var n=e||0,i=r;return i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]}},{}],5:[function(t,e,n){(function(t){var n,r=t.crypto||t.msCrypto;if(r&&r.getRandomValues){var i=new Uint8Array(16);n=function(){return r.getRandomValues(i),i}}if(!n){var o=new Array(16);n=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),o[e]=t>>>((3&e)<<3)&255;return o}}e.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],6:[function(t,e,n){var r=t("./lib/rng"),i=t("./lib/bytesToUuid");e.exports=function(t,e,n){var o=e&&n||0;"string"==typeof t&&(e="binary"==t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var a=0;a<16;++a)e[o+a]=s[a];return e||i(s)}},{"./lib/bytesToUuid":4,"./lib/rng":5}],7:[function(t,e,n){(function(r){!function(){"use strict";function _eachEntity(t,e){var n,r,i,o,s;for(e(t),n=0,i=t._regions.length;n<i;n+=1){for(e(s=t._regions[n]),r=0,o=s._transits.length;r<o;r+=1)e(s._transits[r]);for(r=0,o=s._states.length;r<o;r+=1)_eachEntity(s._states[r],e)}}function _findState(t,e,n){var r,o,s,a,c,u,l;if((n=i.isUndefined(n)?1/0:n)>=0)for(n-=1,r=0,s=t._states.length;r<s;r+=1){if((c=t._states[r])===e)return c;for(o=0,a=c._regions.length;o<a;o+=1)if(u=c._regions[o],l=_findState(u,e,n),!i.isUndefined(l))return l}}function _findDeepHistoryPseudoState(t){var e;return t.hasHistory(!0)?t._historyPseudo:(e=t._getUpperContainer(),i.isNull(e)?void 0:_findDeepHistoryPseudoState(e))}function _findFirstTransition(t,e){var n=t._transits;return i.isUndefined(e)&&(e=t._initialPseudo),i.find(n,function(t){return t._source===e})}function _findNextTransition(t,e,n){var r;return r=t._transits,i.find(r,function(t){return i.isUndefined(n)?t._source instanceof g?t._source===e&&!t._locked:t._source===e:t._target===n&&t._source===e})}var i,o,s,a,c,u,l,h,f,p,_,d,v,y,m,g,b,P,w,C,S,k,E,x,A,j,T;i=t("underscore"),o=t("uuid/v4"),s=t("bluebird"),h={config:{debuggable:!0}},a={logLevel:"DEBUG",logLevelData:["DEBUG","INFO","WARN","ERROR"],debug:function(t){h.config.debuggable&&i.indexOf(this.logLevelData,this.logLevel)<=0&&console.log("DEBUG: ",t)},info:function(t){h.config.debuggable&&i.indexOf(this.logLevelData,this.logLevel)<=1&&console.log("INFO: ",t)},warn:function(t){h.config.debuggable&&i.indexOf(this.logLevelData,this.logLevel)<=2&&console.log("WARN: ",t)},error:function(t){if(h.config.debuggable&&i.indexOf(this.logLevelData,this.logLevel)<=3)throw console.error("ERROR: ",t),new Error("ERROR: "+t)}},c=!(i.isUndefined(r)||!r.versions||!r.versions.node),u=i.negate(Boolean),l={accessor:{get:function(t){return this.model.get(t)},set:function(t,e){return this.model.set(t,e)},unset:function(t){return this.model.unset(t)},extend:function(t){return this.model.extend(t)},save:function(){this.model.save()},restore:function(){this.model.restore()},clear:function(){this.model.clear()}},helper:{$get:function(t){var e=this._getSuperState();if(!i.isNull(e))return e.model.get(t)},$set:function(t,e){var n=this._getSuperState();if(!i.isNull(n))return n.model.set(t,e)},$unset:function(t){var e=this._getSuperState();if(!i.isNull(e))return e.model.unset(t)},$extend:function(t){var e=this._getSuperState();if(!i.isNull(e))return e.model.extend(t)},$save:function(){var t=this._getSuperState();if(i.isNull(t))return!1;t.model.save()},$restore:function(){var t=this._getSuperState();if(i.isNull(t))return!1;t.model.restore()},$clear:function(){var t=this._getSuperState();if(i.isNull(t))return!1;t.model.clear()}},disable:{get:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},set:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},unset:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},extend:function(t){a.error(this._cname+"インスタンスは内部データを保持できません。")},save:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},restore:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},clear:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},$props:null,$methods:null,$get:function(t){a.error(this._cname+"インスタンスは内部データを保持できません。")},$set:function(t,e){a.error(this._cname+"インスタンスは内部データを保持できません。")},$unset:function(t){a.error(this._cname+"インスタンスは内部データを保持できません。")},$extend:function(t){a.error(this._cname+"インスタンスは内部データを保持できません。")},$save:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},$restore:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},$clear:function(){a.error(this._cname+"インスタンスは内部データを保持できません。")},addState:function(){a.error(this._cname+"インスタンスはサブ状態を持てません。")},removeState:function(){a.error(this._cname+"インスタンスはサブ状態を持てません。")},addTransition:function(t){a.error(this._cname+"インスタンスは遷移を持てません。")},removeTransition:function(t){a.error(this._cname+"インスタンスは遷移を持てません。")},appendRegion:function(t){a.error(this._cname+"インスタンスは領域を持てません。")},removeRegion:function(t){a.error(this._cname+"インスタンスは領域を持てません。")}},descriptor:{$props:{enumerable:!0,get:function(){var t=this._getSuperState();if(!i.isNull(t))return t.props}},$methods:{enumerable:!0,get:function(){var t=this._getSuperState();if(!i.isNull(t))return t.methods}}},manipulator:{state:{addState:function(){var t=i.toArray(arguments);return i.isNull(this.region)&&(this.appendRegion(),a.info(this._cname+'インスタンス"'+this._name+'"のRegionインスタンスが自動生成されました。')),this.region.addState.apply(this.region,t)},removeState:function(){var t=i.toArray(arguments);return i.isNull(this.region)&&a.error("コンテナのRegionインスタンスが存在しません。"),this.region.removeState.apply(this.region,t)},addTransition:function(){var t=i.toArray(arguments);return i.isNull(this.region)&&(this.appendRegion(),a.info(this._cname+'インスタンス"'+this._name+'"のRegionインスタンスが自動作成されました。')),this.region.addTransition.apply(this.region,t)},removeTransition:function(){var t=i.toArray(arguments);return i.isNull(this.region)&&a.error("コンテナのRegionインスタンスが存在しません。"),this.region.removeTransition.apply(this.region,t)},appendRegion:function(t){return i.isNull(this.region)?(i.isUndefined(t)?t=new T("default-region-of-"+this._name):t instanceof T||a.error("Regionインスタンスを指定してください。"),this.region=t):i.isUndefined(t)?t=new T(!1):t instanceof T||a.error("Regionインスタンスを指定してください。"),t._parent=this,this._regions.push(t),this._addObserver("regions",t),t._addObserver("parent",this),t._update("update-relation"),t},removeRegion:function(t){var e;return t instanceof T||a.error("Regionインスタンスを指定してください。"),t._parent=null,(e=i.indexOf(this._regions,t))>-1?this._regions.splice(e,1):a.error("削除対象のRegionインスタンスが見つかりません。"),this.region===t&&(this.region=null),t._update("update-relation"),this._removeObserver("regions",t),t._removeObserver("parent",this),t}},region:{addState:function(){var t,e,n,r,o,s;for(e=0,n=(t=i.toArray(arguments)).length;e<n;e+=1)(r=t[e])instanceof v||a.error("Stateインスタンスを指定してください。"),r instanceof w?this._initialPseudo=r:r instanceof g?this._final=r:r instanceof C&&(this._historyPseudo=r),this._states.push(r),this._states[r._id]=r,this._addObserver("states",r),r._container=this,r._addObserver("container",this),o=this._getParentLevel()+1,s=this._getRoot(),r._updateRelation(o,s);return t.length>1?t:i.first(t)},removeState:function(){var t,e,n;for(t=i.toArray(arguments),e=this._states.length;e--;)n=this._states[e],i.indexOf(t,n)>-1&&(n instanceof C&&(this._historyPseudo=null),this._states.splice(e,1),delete this._states[n._id],this._removeObserver("states",n),n._container=null,n._removeObserver("container",this),n._updateRelation(0,null));return t.length>1?t:i.first(t)},addTransition:function(){var t,e,n,r,o,s,c;for(e=0,n=(t=i.toArray(arguments)).length;e<n;e+=1)(r=t[e])instanceof j||a.error("Transitionインスタンスを指定してください。"),r._rawSource===w||u(r._rawSource)?r._source=this._initialPseudo:(o=_findState(this,r._rawSource,0),i.isUndefined(o)&&(o=_findState(this,r._rawSource,1),i.isUndefined(o)?a.error("遷移元のStateインスタンスが見つかりません。"):r._exitViaExitPoint=!0),r._source=r._rawSource),r._rawTarget===g||u(r._rawTarget)?r._target=this._final:(o=_findState(this,r._rawTarget,0),i.isUndefined(o)&&(o=_findState(this,r._rawTarget,1),i.isUndefined(o)?a.error("遷移先のStateインスタンスが見つかりません。"):r._isExplicitEntry=!0),r._target=r._rawTarget),r._name===r._id&&(r._name="transit-from-"+r._source._name+"-to-"+r._target._name),this._transits.push(r),this._transits[r._id]=r,this._addObserver("transits",r),r._container=this,r._addObserver("container",this),s=this._getParentLevel()+1,c=this._getRoot(),r._updateRelation(s,c);return t.length>1?t:i.first(t)},removeTransition:function(){var t,e,n;for(t=i.toArray(arguments),e=this._transits.length;e--;)n=this._transits[e],i.indexOf(t,n)>-1&&(this._transits.splice(e,1),delete this._transits[n._id],this._removeObserver("transits",n),n._source=null,n._target=null,n._container=null,n._removeObserver("container",this),n._updateRelation(0,null));return t.length>1?t:i.first(t)}},subMachine:{addLink:function(t){t instanceof m||a.error("Machineインスタンスを指定してください。"),this._link=t,this._addObserver("outbound",t),t._addObserver("inbound",this)},removeLink:function(){this._removeObserver("outbound",this._link),this._link._removeObserver("inbound",this),this._link=null}}}},(f=function(t){this._data={},this._cache=null,i.isObject(t)&&(this._data=this._extendDeep(this._data,t))}).prototype=i.create(Object.prototype,{constructor:f,get:function(t){return this._data[t]},set:function(t,e){return this._data[t]=e,e},unset:function(t){var e=this._data[t];if(!i.isUndefined(e))return delete this._data[t],e},extend:function(t){return this._extendDeep(this._data,t)},save:function(){this._cache=this._extendDeep(this._cache,this._data)},restore:function(){i.isNull(this._cache)||(this._data={},this._data=this._extendDeep(this._data,this._cache))},clear:function(){this._data={},this._cache=null},_cname:"Model",_extendDeep:function(t,e){return t=t||{},i.each(e,i.bind(function(e,n){i.isObject(e)?(i.isFunction(e)&&a.error("Functionはdataプロパティに登録できません。methodsプロパティに登録してください。"),t[n]=i.isArray(e)?[]:{},this._extendDeep(t[n],e)):t[n]=e},this)),t}}),(p=function(){this._observers={}}).prototype=i.create(Object.prototype,{constructor:p,_cname:"Subject",_countObservers:function(t){var e=0;return i.isUndefined(this._observers[t])||(e=this._observers[t].length),e},_setObserverType:function(){var t,e,n,r;for(n=0,r=(t=i.toArray(arguments)).length;n<r;n+=1)e=t[n],i.isUndefined(this._observers[e])&&(this._observers[e]=[])},_addObserver:function(t,e){i.isUndefined(this._observers[t])&&(this._observers[t]=[]),this._observers[t].push(e)},_removeObserver:function(t,e){var n,r;n=this._observers[t],i.isUndefined(n)?a.warn("オブザーバーが登録されていません。"):(r=i.indexOf(n,e))>-1&&n.splice(r,1)},_notify:function(t){var e,n,r,o,s;if(e=this._observers[t],s=i.toArray(arguments).slice(1),i.isUndefined(e))a.warn("オブザーバーが登録されていません。");else for(n=0,r=e.length;n<r;n+=1)o=e[n],i.isFunction(o._update)&&o._update.apply(o,s)}}),(_=function(t){p.call(this),this._id=o(),this._name=u(t)?this._id:t,this._type="entity",this._status="inactive",this.model=new f,this.props={},this.methods={},this._setObserverType("root")}).prototype=i.create(p.prototype,i.extend({constructor:_,getId:function(){return this._id},getName:function(){return this._name},setName:function(t){return this._name=t,t},isActive:function(){return"active"===this._status},addMethod:function(t){return i.mapObject(t,i.bind(function(t){return i.bind(t,this)},this))},_cname:"Entity",_activate:function(){this._status="active",a.info(this._cname+'インスタンス"'+this._name+'"がアクティブ化されました。')},_inactivate:function(){this._status="inactive",a.info(this._cname+'インスタンス"'+this._name+'"が非アクティブ化されました。')},_update:i.noop},l.accessor)),(d=function(t){_.call(this,t),this._type="element",this._container=null,this._root=null,this._level=0,this._setObserverType("container"),Object.defineProperties(this,l.descriptor)}).prototype=i.create(_.prototype,i.extend({constructor:d,getContainer:function(){return this._container},getCurrentLevel:function(){return this._level},_cname:"Elem",_async:function(t){this._notify("root","async",i.bind(function(){return i.bind(t,this)(),s.resolve()},this))}},l.helper)),(v=function(t){d.call(this,t),this._type="state",this.region=null,this._regions=[],this._setObserverType("regions")}).prototype=i.create(d.prototype,i.extend({constructor:v,getRegion:function(t){return i.isNumber(t)?this._regions[t]:this.region},completion:function(){this._async(function(){this.isActive()?(this._exit(),i.isNull(this._container)?a.error(this._cname+'インスタンス"'+this._name+'"のコンテナが存在しません。'):this._notify("container","completion")):a.error(this._cname+'インスタンス"'+this._name+'"はすでに非アクティブ化されています。')})},_cname:"ProtoState",_getSuperState:function(){var t=null;return i.isNull(this._container)||i.isNull(this._container._parent)||(t=this._container._parent),t},_update:function(t){var e=i.toArray(arguments).slice(1);switch(t){case"entry":this._entry.apply(this,e);break;case"exit":this._exit.apply(this,e);break;case"update-relation":this._updateRelation.apply(this,e);break;case"completion":this.completion.apply(this,e)}},_updateRelation:function(t,e){this._level=t,this._root=e,this._notify("regions","update-relation")},_entry:function(){this.isActive()||(this._activate(),this._notify("regions","entry"))},_exit:function(){this.isActive()&&(this._notify("regions","exit"),this._inactivate())}},l.manipulator.state)),(y=function(t,e){v.call(this,t),e=i.defaults(e||{},i.clone(y.options)),i.isObject(e.data)&&this.extend(e.data),this.save(),i.isObject(e.props)&&i.extend(this.props,e.props),i.isObject(e.methods)&&(this.methods=this.addMethod(e.methods)),this._entryAction=e.entryAction,this._exitAction=e.exitAction,this._doActivity=e.doActivity,this._autoTransition=e.autoTransition,this._loop=e.loop,this._fps=e.fps,this._interval=1e3/this._fps,this._timerId=0,this._lastCallTime=0}).options={entryAction:i.noop,exitAction:i.noop,doActivity:i.noop,autoTransition:!1,loop:!1,fps:60},y.prototype=i.create(v.prototype,{constructor:y,completion:function(){this._async(function(){var t;this.isActive()?i.isNull(this._container)?a.error(this._cname+'インスタンス"'+this._name+'"のコンテナが存在しません。'):(t=_findNextTransition(this._container,this),i.isUndefined(t)?(this._exit(),this._notify("container","completion")):t.trigger()):a.error(this._cname+'インスタンス"'+this._name+'"はすでに非アクティブ化されています。')})},_cname:"State",_update:function(t){var e=i.toArray(arguments).slice(1);switch(t){case"entry":this._entry.apply(this,e);break;case"exit":this._exit.apply(this,e);break;case"update-relation":this._updateRelation.apply(this,e);break;case"completion":this.completion.apply(this,e)}},_setTimer:function(t){this._timerId=0,this._lastCallTime=0,this._repeat(t)},_clearTimer:function(){clearTimeout(this._timerId)},_repeat:function(t){var e,n,r;return e=i.now(),n=0!==this._lastCallTime?e-this._lastCallTime:0,r=Math.max(this._interval-n,0),this._lastCallTime=e+r,this._timerId=setTimeout(i.bind(this._timeout,this,t,e,n),r),this._timerId},_timeout:function(t,e,n){t(i.now()-e+n),this._repeat(t)},_activate:function(){var t,e,n,r;t=this._root,i.isNull(t)?a.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,r=t.methods),this._status="active",a.info(this._cname+'インスタンス"'+this._name+'"がアクティブ化されました。'),this._entryAction(e,n,r),this._loop?this._setTimer(i.bind(function(t){this._doActivity(t,e,n,r),this._autoTransition&&this.completion()},this)):(this._doActivity(e,n,r),this._autoTransition&&this.completion())},_inactivate:function(){var t,e,n,r;t=this._root,i.isNull(t)?a.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,r=t.methods),this._clearTimer(),i.isNull(this._container)||this._notify("container","set-previous-state",this),this._exitAction(e,n,r),this._status="inactive",a.info(this._cname+'インスタンス"'+this._name+'"が非アクティブ化されました。')},_entry:function(t,e){this.isActive()||(this._activate(),this._notify("regions","entry",t,e))}}),(m=function(t,e){v.call(this,t,e),e=e||{},i.isObject(e.data)&&this.extend(e.data),this.save(),i.isObject(e.props)&&i.extend(this.props,e.props),i.isObject(e.methods)&&(this.methods=this.addMethod(e.methods)),this._deployed=!1,this._promise=null,this.appendRegion(),this._setObserverType("inbound")}).prototype=i.create(v.prototype,{constructor:m,deploy:function(){return this._deployed=!0,this._promise=s.resolve(),this._updateRelation(this._level,this),_eachEntity(this,i.bind(function(t){t instanceof m||t._addObserver("root",this)},this)),this},undeploy:function(){return this._deployed=!1,this._promise=null,_eachEntity(this,i.bind(function(t){t instanceof m||t._removeObserver("root",this)},this)),this._updateRelation(this._level,null),this},start:function(t){return this._deployed||a.error("start()の前にdeploy()メソッドを実行してください。"),this.isActive()?a.warn('Machineインスタンス"'+this._name+'"はすでに起動しています。'):(a.info('Machineインスタンス"'+this._name+'"が動作を開始しました。'),this._stackPromise(i.bind(function(){return this._entry(void 0,t),s.resolve()},this))),this},finish:function(){return this._deployed||a.error("start()の前にdeploy()メソッドを実行してください。"),this.isActive()?this.completion():a.warn('Machineインスタンス"'+this._name+'"はすでに動作を終了しています。'),this},completion:function(){this._stackPromise(i.bind(function(){return this._exit(),a.info('Machineインスタンス"'+this._name+'"が動作を終了しました。'),s.resolve()},this))},_cname:"Machine",_stackPromise:function(t){this._promise=this._promise.then(t,this._onRejected).catch(this._onError)},_aborted:function(t){a.error('Machineインスタンス"'+this._name+'"は処理を停止しました。')},_outerExecution:function(t){var e,n,r,o;if(i.isUndefined(t))this.start();else{for(e=0,n=this._regions.length;e<n;e+=1)if(r=this._regions[e],o=r._states[t],!i.isUndefined(o))return void this.start(o);a.error("エンドポイントのEntryPointPseudoStateインスタンスが指定されていません。")}},_linkBack:function(t){this.completion(),this._stackPromise(i.bind(function(){return this._notify("inbound","link-back",t._id),s.resolve()},this))},_update:function(t,e){var n=i.toArray(arguments).slice(1);switch(t){case"async":this._stackPromise(e);break;case"entry":this._entry.apply(this,n);break;case"exit":this._exit.apply(this,n);break;case"completion":this.completion.apply(this,n);break;case"termination":this._aborted.apply(this,n);break;case"link-forward":this._outerExecution.apply(this,n);break;case"exit-point":this._linkBack.apply(this,n)}},_onRejected:function(t){return s.reject(t)},_onError:function(t){return a.info(t),s.reject(t)},_entry:function(t,e){this.isActive()||(this._activate(),this._notify("regions","entry",t,e))}}),(g=function(t){v.call(this,t)}).prototype=i.create(v.prototype,i.extend({constructor:g,_cname:"FinalState",_activate:function(){this._status="active",a.info('FinalStateインスタンス"'+this._name+'"がアクティブ化されました。'),this.completion()},_inactivate:function(){this._status="inactive",i.isNull(this._container)||this._notify("container","set-previous-state",null),a.info('FinalStateインスタンス"'+this._name+'"が非アクティブ化されました。')}},l.disable)),(b=function(t){v.call(this,t),this._link=null,this._deployed=!1,this.appendRegion(),this._setObserverType("outbound")}).prototype=i.create(v.prototype,i.extend({constructor:b,deploy:function(){return this._deployed=!0,_eachEntity(this,i.bind(function(t){t instanceof v&&(t instanceof P?t instanceof E?(t._addObserver("sub-root",this),t._getSuperState()===this?t._isMediator=!0:a.error("ConnectionPointPseudoStateインスタンスはサブマシン直下のサブ状態でなければなりません。")):t instanceof w||a.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を追加できません。"):t instanceof b||t instanceof g||a.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を保持できません。"))},this)),this},undeploy:function(){return this._deployed=!1,_eachEntity(this,i.bind(function(t){t instanceof v&&(t instanceof P?t instanceof E?(t._removeObserver("sub-root",this),t._isMediator=!1):t instanceof w||a.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を追加できません。"):t instanceof b||t instanceof g||a.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を保持できません。"))},this)),this},_cname:"SubMachine",_linkForward:function(t){this._async(i.bind(function(){t._exit(),i.isEmpty(t._key)?a.error("リンク先のマシンに渡すキーが指定されていません。"):this._notify("outbound","link-forward",t._key)},this))},_innerExecution:function(t){var e,n,r,o;for(n=0,r=this._regions.length;n<r;n+=1)o=this._regions[n],e=i.findWhere(o._states,{_key:t}),i.isUndefined(e)?a.error("エンドポイントのExitPointPseudoStateインスタンスが指定されていません。"):e._entry()},_update:function(t){var e=i.toArray(arguments).slice(1);switch(t){case"entry-point":this._linkForward.apply(this,e);break;case"link-back":this._innerExecution.apply(this,e)}},_entry:function(t,e){this._deployed||a.error("SubMachineインスタンスのdeploy()メソッドを実行してください。"),this.isActive()||(this._activate(),this._notify("regions","entry",t,e))},_exit:function(){this._deployed||a.error("SubMachineインスタンスのdeploy()メソッドを実行してください。"),this.isActive()&&(this._notify("regions","exit"),this._inactivate())}},l.manipulator.subMachine)),(P=function(t){v.call(this,t),this._type="pseudo-state"}).prototype=i.create(v.prototype,i.extend({constructor:P,_cname:"PseudoState",_inactivate:function(){this._status="inactive",i.isNull(this._container)||this._notify("container","set-previous-state",null),a.info(this._cname+'インスタンス"'+this._name+'"が非アクティブ化されました。')}},l.disable)),(w=function(t){P.call(this,t)}).prototype=i.create(P.prototype,{constructor:w,_cname:"InitialPseudoState",_activate:function(){var t;this._status="active",a.info('InitialPseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),i.isNull(this._container)?a.error('InitialPseudoStateインスタンス"'+this._name+'"のコンテナが存在しません。'):(t=_findFirstTransition(this._container),i.isUndefined(t)?a.error('Regionインスタンス"'+this._container._name+'"の初期遷移が見つかりません。'):t.trigger())}}),(C=function(t,e){P.call(this,t),this._isDeep=!i.isUndefined(e)&&e}).prototype=i.create(P.prototype,{constructor:C,_cname:"HistoryPseudoState"}),(S=function(t){P.call(this,t)}).prototype=i.create(P.prototype,{constructor:S,_cname:"TerminatePseudoState",_activate:function(){throw this._status="active",a.info('TerminatePseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),this._notify("root","termination",this),new Error("ERROR: 停止状態に遷移しました。処理を中断します。")}}),(k=function(t,e){P.call(this,t),this._condition=i.isFunction(e)?e:i.noop}).prototype=i.create(P.prototype,{constructor:k,_cname:"ChoicePseudoState",_activate:function(){var t,e,n,r,o,s;t=this._root,i.isNull(t)?a.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,r=t.methods),this._status="active",a.info('ChoicePseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),(o=this._condition(e,n,r))instanceof v||a.error("遷移先のStateインスタンスが存在しません。"),i.isNull(this._container)?a.error('ChoicePseudoStateインスタンス"'+this._name+'"のコンテナが存在しません。'):(s=_findNextTransition(this._container,this,o),i.isUndefined(s)?a.error('ChoicePseudoStateインスタンス"'+this._name+'"起点のTransitionインスタンスが見つかりません。'):s.trigger())}}),(E=function(t){P.call(this,t),this._key="",this._isMediator=!1,this._setObserverType("sub-root")}).prototype=i.create(P.prototype,{constructor:E,setKey:function(t){return this._key=t,t},_cname:"ConnectionPointPseudoState"}),(x=function(t){E.call(this,t)}).prototype=i.create(E.prototype,{constructor:x,_cname:"EntryPointPseudoState",_activate:function(){var t;this._status="active",a.info('EntryPointPseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),this._isMediator?this._notify("sub-root","entry-point",this):i.isNull(this._container)?a.error('EntryPointPseudoStateインスタンス"'+this._name+'"のコンテナが存在しません。'):(t=_findFirstTransition(this._container,this),i.isUndefined(t)?a.error('Regionインスタンス"'+this._container._name+'"の初期遷移が見つかりません。'):t.trigger())}}),(A=function(t){E.call(this,t)}).prototype=i.create(E.prototype,{constructor:A,_cname:"ExitPointPseudoState",_activate:function(){var t,e;this._status="active",a.info('ExitPointPseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),this._isMediator?(t=this._container._getUpperContainer(),i.isNull(t)?a.error('ExitPointPseudoStateインスタンス"'+this._name+'"の上位コンテナが存在しません。'):(e=_findNextTransition(t,this),i.isUndefined(e)?a.error('ExitPointPseudoStateインスタンス"'+this._name+'"起点のTransitionインスタンスが見つかりません。'):e.trigger())):this._notify("root","exit-point",this)}}),(j=function(t,e,n,r){d.call(this,t),this._type="transition",e instanceof v||u(e)||w?this._rawSource=e:a.error("第2引数に遷移元のStateインスタンス、またはfalseを指定してください。"),n instanceof v||u(n)||g?this._rawTarget=n:a.error("第3引数に遷移元のStateインスタンス、またはfalseを指定してください。"),r=i.defaults(r||{},i.clone(j.options)),i.isObject(r.data)&&this.extend(r.data),this.save(),i.isObject(r.props)&&i.extend(this.props,r.props),i.isObject(r.methods)&&(this.methods=this.addMethod(r.methods)),this._source=null,this._target=null,this._guard=r.guard,this._effect=r.effect,this._internal=r.internal,this._locked=r.locked,this._isExplicitEntry=!1,this._exitViaExitPoint=!1}).options={guard:null,effect:null,internal:!1,locked:!0},j.prototype=i.create(d.prototype,{constructor:j,trigger:function(){var t,e,n,r;if(t=this._root,i.isNull(t)?a.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,r=t.methods),i.isNull(this._container)&&a.error('Transitionインスタンス"'+this._name+'"のコンテナが存在しません。'),this._container.isActive()||a.error('Transitionインスタンス"'+this._name+'"のコンテナが非アクティブです。'),this._source instanceof g?a.error("終了状態を遷移元にすることはできません。"):this._source instanceof S?a.error("停止状態を遷移元にすることはできません。"):this._target instanceof w&&a.error("開始擬似状態を遷移先にすることはできません。"),i.isNull(this._guard)||this._guard(e,n,r)){if(this._internal){if(this._source===this._target)return void this._async(function(){a.info("内部遷移を実行します。"),i.isNull(this._effect)||this._effect(e,n,r)});a.error("遷移元と遷移先は同じStateインスタンスを指定してください。")}this._async(function(){var t;this.isActive()?a.error('Transitionインスタンス"'+this._name+'"はすでにアクティブ化されています。'):this._activate(),this._source.isActive()?this._exitViaExitPoint?(t=this._source._getSuperState(),i.isNull(t)?a.error(this._target._cname+'インスタンス"'+this._target._name+'"の「親」状態が存在しません。'):t._exit()):this._source._exit():a.error("遷移元"+this._target._cname+'インスタンス"'+this._target._name+'"が非アクティブです。'),i.isNull(this._effect)||this._effect(e,n,r),this._target.isActive()?a.error("遷移先"+this._target._cname+'インスタンス"'+this._target._name+'"がアクティブです。'):this._isExplicitEntry?(t=this._target._getSuperState(),i.isNull(t)?a.error(this._target._cname+'インスタンス"'+this._target._name+'"の「親」状態が存在しません。'):t._entry(void 0,this._target)):this._target._entry(),this.isActive()?this._inactivate():a.error('Transitionインスタンス"'+this._name+'"はすでに非アクティブ化されています。')})}else a.info("ガードが成立しませんでした。遷移は発生しません。")},_cname:"Transition",_update:function(t){var e=i.toArray(arguments).slice(1);switch(t){case"update-relation":this._updateRelation.apply(this,e)}},_updateRelation:function(t,e){this._level=t,this._root=e}}),(T=function(t,e){_.call(this,t),this._type="region",e=e||{},i.isObject(e.data)&&this.extend(e.data),this.save(),i.isObject(e.props)&&i.extend(this.props,e.props),i.isObject(e.methods)&&(this.methods=this.addMethod(e.methods)),this._parent=null,this._initialPseudo=null,this._final=null,this._historyPseudo=null,this._previousState=null,this._states=[],this._transits=[],this._setObserverType("parent","states","transits"),this._setDefaultStates()}).prototype=i.create(_.prototype,i.extend({constructor:T,hasHistory:function(t){return u(t)?!i.isNull(this._historyPseudo):!i.isNull(this._historyPseudo)&&this._historyPseudo._isDeep},getIndex:function(){return i.isNull(this._parent)&&i.indexOf(this._parent._regions,this),-1},_cname:"Region",_update:function(t){var e=i.toArray(arguments).slice(1);switch(t){case"entry":this._entry.apply(this,e);break;case"exit":this._exit.apply(this,e);break;case"update-relation":this._updateRelation.apply(this,e);break;case"completion":this._completion.apply(this,e);break;case"set-previous-state":this._setPreviousState.apply(this,e)}},_getParentLevel:function(){var t=-1;return i.isNull(this._parent)||(t=this._parent._level),t},_getRoot:function(){return i.isNull(this._parent)?null:this._parent._root},_getUpperContainer:function(){var t=null;return i.isNull(this._parent)||i.isNull(this._parent._container)||(t=this._parent._container),t},_setDefaultStates:function(){var t,e;t=new w(!1),e=new g(!1),this.addState(t,e)},_setDefaultStateName:function(){this._initialPseudo._name="initial-pseudo-state-in-"+this._name,this._final._name="final-state-in-"+this._name},_updateRelation:function(){var t,e;this._setDefaultStateName(),t=this._getParentLevel()+1,e=this._getRoot(),this._notify("states","update-relation",t,e),this._notify("transits","update-relation",t,e)},_setPreviousState:function(t){return this._previousState=t,t},_entry:function(t,e){var n;this.isActive()||(this._activate(),i.isUndefined(t)&&(t=_findDeepHistoryPseudoState(this),t=!i.isUndefined(t)),i.indexOf(this._states,e)>-1?e._update("entry",t):(t?n=this._previousState||this._initialPseudo:i.isNull(this._historyPseudo)?n=this._initialPseudo:(n=this._previousState||this._initialPseudo,this._historyPseudo._isDeep&&(t=!0)),n._update("entry",t,e)))},_exit:function(){this.isActive()&&(this._notify("states","exit"),this._inactivate())},_completion:function(){this._inactivate(),i.isNull(this._parent)?a.error('Regionインスタンス"'+this._name+'"の「親」状態が存在しません。'):i.every(this._parent._regions,function(t){return!t.isActive()})&&this._notify("parent","completion")}},l.manipulator.region)),h=i.extend(h,{Machine:m,State:y,Transition:j,Region:T,InitialPseudoState:w,FinalState:g,SubMachine:b,HistoryPseudoState:C,TerminatePseudoState:S,ChoicePseudoState:k,EntryPointPseudoState:x,ExitPointPseudoState:A}),c?void 0!==n&&(void 0!==e&&e.exports&&(n=e.exports=h),n.FSM=h):"undefined"!=typeof window?window.FSM=h:"function"==typeof define&&define.amd&&define(function(){return h})}()}).call(this,t("_process"))},{_process:2,bluebird:1,underscore:3,"uuid/v4":6}]},{},[7]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
