!function e(t,n,r){function s(o,a){if(!n[o]){if(!t[o]){var c="function"==typeof require&&require;if(!a&&c)return c(o,!0);if(i)return i(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof require&&require,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(t,e,n){(function(t,r){!function(t){if("object"==typeof n&&void 0!==e)e.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var i;"undefined"!=typeof window?i=window:void 0!==r?i=r:"undefined"!=typeof self&&(i=self),i.Promise=t()}}(function(){var e,n,i;return function e(t,n,r){function s(o,a){if(!n[o]){if(!t[o]){var c="function"==typeof _dereq_&&_dereq_;if(!a&&c)return c(o,!0);if(i)return i(o,!0);var u=new Error("Cannot find module '"+o+"'");throw u.code="MODULE_NOT_FOUND",u}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n||e)},l,l.exports,e,t,n,r)}return n[o].exports}for(var i="function"==typeof _dereq_&&_dereq_,o=0;o<r.length;o++)s(r[o]);return s}({1:[function(t,e,n){"use strict";e.exports=function(t){function any(t){var n=new e(t),r=n.promise();return n.setHowMany(1),n.setUnwrap(),n.init(),r}var e=t._SomePromiseArray;t.any=function(t){return any(t)},t.prototype.any=function(){return any(this)}}},{}],2:[function(e,n,r){"use strict";function Async(){this._customScheduler=!1,this._isTickUsed=!1,this._lateQueue=new s(16),this._normalQueue=new s(16),this._haveDrainedQueues=!1,this._trampolineEnabled=!0;var t=this;this.drainQueues=function(){t._drainQueues()},this._schedule=o}function AsyncInvokeLater(t,e,n){this._lateQueue.push(t,e,n),this._queueTick()}function AsyncInvoke(t,e,n){this._normalQueue.push(t,e,n),this._queueTick()}function AsyncSettlePromises(t){this._normalQueue._pushOne(t),this._queueTick()}var i;try{throw new Error}catch(t){i=t}var o=e("./schedule"),s=e("./queue"),a=e("./util");Async.prototype.setScheduler=function(t){var e=this._schedule;return this._schedule=t,this._customScheduler=!0,e},Async.prototype.hasCustomScheduler=function(){return this._customScheduler},Async.prototype.enableTrampoline=function(){this._trampolineEnabled=!0},Async.prototype.disableTrampolineIfNecessary=function(){a.hasDevTools&&(this._trampolineEnabled=!1)},Async.prototype.haveItemsQueued=function(){return this._isTickUsed||this._haveDrainedQueues},Async.prototype.fatalError=function(e,n){n?(t.stderr.write("Fatal "+(e instanceof Error?e.stack:e)+"\n"),t.exit(2)):this.throwLater(e)},Async.prototype.throwLater=function(t,e){if(1===arguments.length&&(e=t,t=function(){throw e}),"undefined"!=typeof setTimeout)setTimeout(function(){t(e)},0);else try{this._schedule(function(){t(e)})}catch(t){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}},a.hasDevTools?(Async.prototype.invokeLater=function(t,e,n){this._trampolineEnabled?AsyncInvokeLater.call(this,t,e,n):this._schedule(function(){setTimeout(function(){t.call(e,n)},100)})},Async.prototype.invoke=function(t,e,n){this._trampolineEnabled?AsyncInvoke.call(this,t,e,n):this._schedule(function(){t.call(e,n)})},Async.prototype.settlePromises=function(t){this._trampolineEnabled?AsyncSettlePromises.call(this,t):this._schedule(function(){t._settlePromises()})}):(Async.prototype.invokeLater=AsyncInvokeLater,Async.prototype.invoke=AsyncInvoke,Async.prototype.settlePromises=AsyncSettlePromises),Async.prototype._drainQueue=function(t){for(;t.length()>0;){var e=t.shift();if("function"==typeof e){var n=t.shift(),r=t.shift();e.call(n,r)}else e._settlePromises()}},Async.prototype._drainQueues=function(){this._drainQueue(this._normalQueue),this._reset(),this._haveDrainedQueues=!0,this._drainQueue(this._lateQueue)},Async.prototype._queueTick=function(){this._isTickUsed||(this._isTickUsed=!0,this._schedule(this.drainQueues))},Async.prototype._reset=function(){this._isTickUsed=!1},n.exports=Async,n.exports.firstLineError=i},{"./queue":26,"./schedule":29,"./util":36}],3:[function(t,e,n){"use strict";e.exports=function(t,e,n,r){var i=!1,o=function(t,e){this._reject(e)},s=function(t,e){e.promiseRejectionQueued=!0,e.bindingPromise._then(o,o,null,this,t)},a=function(t,e){0==(50397184&this._bitField)&&this._resolveCallback(e.target)},c=function(t,e){e.promiseRejectionQueued||this._reject(t)};t.prototype.bind=function(o){i||(i=!0,t.prototype._propagateFrom=r.propagateFromFunction(),t.prototype._boundValue=r.boundValueFunction());var u=n(o),l=new t(e);l._propagateFrom(this,1);var h=this._target();if(l._setBoundTo(u),u instanceof t){var f={promiseRejectionQueued:!1,promise:l,target:h,bindingPromise:u};h._then(e,s,void 0,l,f),u._then(a,c,void 0,l,f),l._setOnCancel(u)}else l._resolveCallback(h);return l},t.prototype._setBoundTo=function(t){void 0!==t?(this._bitField=2097152|this._bitField,this._boundTo=t):this._bitField=-2097153&this._bitField},t.prototype._isBound=function(){return 2097152==(2097152&this._bitField)},t.bind=function(e,n){return t.resolve(n).bind(e)}}},{}],4:[function(t,e,n){"use strict";var r;"undefined"!=typeof Promise&&(r=Promise);var i=t("./promise")();i.noConflict=function(){try{Promise===i&&(Promise=r)}catch(t){}return i},e.exports=i},{"./promise":22}],5:[function(t,e,n){"use strict";var r=Object.create;if(r){var i=r(null),o=r(null);i[" size"]=o[" size"]=0}e.exports=function(e){function ensureMethod(t,n){var i;if(null!=t&&(i=t[n]),"function"!=typeof i){var o="Object "+r.classString(t)+" has no method '"+r.toString(n)+"'";throw new e.TypeError(o)}return i}function caller(t){return ensureMethod(t,this.pop()).apply(t,this)}function namedGetter(t){return t[this]}function indexedGetter(t){var e=+this;return e<0&&(e=Math.max(0,e+t.length)),t[e]}var n,r=t("./util"),i=r.canEvaluate;r.isIdentifier;e.prototype.call=function(t){var e=[].slice.call(arguments,1);return e.push(t),this._then(caller,void 0,void 0,e,void 0)},e.prototype.get=function(t){var e;if("number"==typeof t)e=indexedGetter;else if(i){var r=n(t);e=null!==r?r:namedGetter}else e=namedGetter;return this._then(e,void 0,void 0,t,void 0)}}},{"./util":36}],6:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){var o=t("./util"),s=o.tryCatch,a=o.errorObj,c=e._async;e.prototype.break=e.prototype.cancel=function(){if(!i.cancellation())return this._warn("cancellation is disabled");for(var t=this,e=t;t._isCancellable();){if(!t._cancelBy(e)){e._isFollowing()?e._followee().cancel():e._cancelBranched();break}var n=t._cancellationParent;if(null==n||!n._isCancellable()){t._isFollowing()?t._followee().cancel():t._cancelBranched();break}t._isFollowing()&&t._followee().cancel(),t._setWillBeCancelled(),e=t,t=n}},e.prototype._branchHasCancelled=function(){this._branchesRemainingToCancel--},e.prototype._enoughBranchesHaveCancelled=function(){return void 0===this._branchesRemainingToCancel||this._branchesRemainingToCancel<=0},e.prototype._cancelBy=function(t){return t===this?(this._branchesRemainingToCancel=0,this._invokeOnCancel(),!0):(this._branchHasCancelled(),!!this._enoughBranchesHaveCancelled()&&(this._invokeOnCancel(),!0))},e.prototype._cancelBranched=function(){this._enoughBranchesHaveCancelled()&&this._cancel()},e.prototype._cancel=function(){this._isCancellable()&&(this._setCancelled(),c.invoke(this._cancelPromises,this,void 0))},e.prototype._cancelPromises=function(){this._length()>0&&this._settlePromises()},e.prototype._unsetOnCancel=function(){this._onCancelField=void 0},e.prototype._isCancellable=function(){return this.isPending()&&!this._isCancelled()},e.prototype.isCancellable=function(){return this.isPending()&&!this.isCancelled()},e.prototype._doInvokeOnCancel=function(t,e){if(o.isArray(t))for(var n=0;n<t.length;++n)this._doInvokeOnCancel(t[n],e);else if(void 0!==t)if("function"==typeof t){if(!e){var r=s(t).call(this._boundValue());r===a&&(this._attachExtraTrace(r.e),c.throwLater(r.e))}}else t._resultCancelled(this)},e.prototype._invokeOnCancel=function(){var t=this._onCancel();this._unsetOnCancel(),c.invoke(this._doInvokeOnCancel,this,t)},e.prototype._invokeInternalOnCancel=function(){this._isCancellable()&&(this._doInvokeOnCancel(this._onCancel(),!0),this._unsetOnCancel())},e.prototype._resultCancelled=function(){this.cancel()}}},{"./util":36}],7:[function(t,e,n){"use strict";e.exports=function(e){var n=t("./util"),r=t("./es5").keys,i=n.tryCatch,o=n.errorObj;return function(t,s,a){return function(c){var u=a._boundValue();t:for(var l=0;l<t.length;++l){var h=t[l];if(h===Error||null!=h&&h.prototype instanceof Error){if(c instanceof h)return i(s).call(u,c)}else if("function"==typeof h){var f=i(h).call(u,c);if(f===o)return f;if(f)return i(s).call(u,c)}else if(n.isObject(c)){for(var p=r(h),d=0;d<p.length;++d){var _=p[d];if(h[_]!=c[_])continue t}return i(s).call(u,c)}}return e}}}},{"./es5":13,"./util":36}],8:[function(t,e,n){"use strict";e.exports=function(t){function Context(){this._trace=new Context.CapturedTrace(peekContext())}function peekContext(){var t=n.length-1;if(t>=0)return n[t]}var e=!1,n=[];return t.prototype._promiseCreated=function(){},t.prototype._pushContext=function(){},t.prototype._popContext=function(){return null},t._peekContext=t.prototype._peekContext=function(){},Context.prototype._pushContext=function(){void 0!==this._trace&&(this._trace._promiseCreated=null,n.push(this._trace))},Context.prototype._popContext=function(){if(void 0!==this._trace){var t=n.pop(),e=t._promiseCreated;return t._promiseCreated=null,e}return null},Context.CapturedTrace=null,Context.create=function(){if(e)return new Context},Context.deactivateLongStackTraces=function(){},Context.activateLongStackTraces=function(){var n=t.prototype._pushContext,r=t.prototype._popContext,i=t._peekContext,o=t.prototype._peekContext,s=t.prototype._promiseCreated;Context.deactivateLongStackTraces=function(){t.prototype._pushContext=n,t.prototype._popContext=r,t._peekContext=i,t.prototype._peekContext=o,t.prototype._promiseCreated=s,e=!1},e=!0,t.prototype._pushContext=Context.prototype._pushContext,t.prototype._popContext=Context.prototype._popContext,t._peekContext=t.prototype._peekContext=peekContext,t.prototype._promiseCreated=function(){var t=this._peekContext();t&&null==t._promiseCreated&&(t._promiseCreated=this)}},Context}},{}],9:[function(e,n,r){"use strict";n.exports=function(n,r){function generatePromiseLifecycleEventObject(t,e){return{promise:e}}function defaultFireEvent(){return!1}function cancellationExecute(t,e,n){var r=this;try{t(e,n,function(t){if("function"!=typeof t)throw new TypeError("onCancel must be a function, got: "+l.toString(t));r._attachCancellationCallback(t)})}catch(t){return t}}function cancellationAttachCancellationCallback(t){if(!this._isCancellable())return this;var e=this._onCancel();void 0!==e?l.isArray(e)?e.push(t):this._setOnCancel([e,t]):this._setOnCancel(t)}function cancellationOnCancel(){return this._onCancelField}function cancellationSetOnCancel(t){this._onCancelField=t}function cancellationClearCancellationData(){this._cancellationParent=void 0,this._onCancelField=void 0}function cancellationPropagateFrom(t,e){if(0!=(1&e)){this._cancellationParent=t;var n=t._branchesRemainingToCancel;void 0===n&&(n=0),t._branchesRemainingToCancel=n+1}0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)}function boundValueFunction(){var t=this._boundTo;return void 0!==t&&t instanceof n?t.isFulfilled()?t.value():void 0:t}function longStackTracesCaptureStackTrace(){this._trace=new CapturedTrace(this._peekContext())}function longStackTracesAttachExtraTrace(t,e){if(h(t)){var n=this._trace;if(void 0!==n&&e&&(n=n._parent),void 0!==n)n.attachExtraTrace(t);else if(!t.__stackCleaned__){var r=parseStackAndMessage(t);l.notEnumerableProp(t,"stack",r.message+"\n"+r.stack.join("\n")),l.notEnumerableProp(t,"__stackCleaned__",!0)}}}function warn(t,e,r){if(F.warnings){var i,o=new u(t);if(e)r._attachExtraTrace(o);else if(F.longStackTraces&&(i=n._peekContext()))i.attachExtraTrace(o);else{var s=parseStackAndMessage(o);o.stack=s.message+"\n"+s.stack.join("\n")}k("warning",o)||formatAndLogError(o,"",!0)}}function reconstructStack(t,e){for(var n=0;n<e.length-1;++n)e[n].push("From previous event:"),e[n]=e[n].join("\n");return n<e.length&&(e[n]=e[n].join("\n")),t+"\n"+e.join("\n")}function removeDuplicateOrEmptyJumps(t){for(var e=0;e<t.length;++e)(0===t[e].length||e+1<t.length&&t[e][0]===t[e+1][0])&&(t.splice(e,1),e--)}function removeCommonRoots(t){for(var e=t[0],n=1;n<t.length;++n){for(var r=t[n],i=e.length-1,o=e[i],s=-1,a=r.length-1;a>=0;--a)if(r[a]===o){s=a;break}for(a=s;a>=0;--a){var c=r[a];if(e[i]!==c)break;e.pop(),i--}e=r}}function cleanStack(t){for(var e=[],n=0;n<t.length;++n){var r=t[n],i="    (No stack trace)"===r||_.test(r),o=i&&A(r);i&&!o&&(y&&" "!==r.charAt(0)&&(r="    "+r),e.push(r))}return e}function stackFramesAsArray(t){for(var e=t.stack.replace(/\s+$/g,"").split("\n"),n=0;n<e.length;++n){var r=e[n];if("    (No stack trace)"===r||_.test(r))break}return n>0&&"SyntaxError"!=t.name&&(e=e.slice(n)),e}function parseStackAndMessage(t){var e=t.stack,n=t.toString();return e="string"==typeof e&&e.length>0?stackFramesAsArray(t):["    (No stack trace)"],{message:n,stack:"SyntaxError"==t.name?e:cleanStack(e)}}function formatAndLogError(t,e,n){if("undefined"!=typeof console){var r;if(l.isObject(t)){var i=t.stack;r=e+v(i,t)}else r=e+String(t);"function"==typeof s?s(r,n):"function"!=typeof console.log&&"object"!=typeof console.log||console.log(r)}}function fireRejectionEvent(t,e,n,r){var i=!1;try{"function"==typeof e&&(i=!0,"rejectionHandled"===t?e(r):e(n,r))}catch(t){c.throwLater(t)}"unhandledRejection"===t?k(t,n,r)||i||formatAndLogError(n,"Unhandled rejection "):k(t,r)}function formatNonError(t){var e;if("function"==typeof t)e="[function "+(t.name||"anonymous")+"]";else{if(e=t&&"function"==typeof t.toString?t.toString():l.toString(t),/\[object [a-zA-Z0-9$_]+\]/.test(e))try{e=JSON.stringify(t)}catch(t){}0===e.length&&(e="(empty array)")}return"(<"+snip(e)+">, no stack trace)"}function snip(t){return t.length<41?t:t.substr(0,38)+"..."}function longStackTracesIsSupported(){return"function"==typeof j}function parseLineInfo(t){var e=t.match(T);if(e)return{fileName:e[1],line:parseInt(e[2],10)}}function CapturedTrace(t){this._parent=t,this._promisesCreated=0;var e=this._length=1+(void 0===t?0:t._length);j(this,CapturedTrace),e>32&&this.uncycle()}var i,o,s,a=n._getDomain,c=n._async,u=e("./errors").Warning,l=e("./util"),h=l.canAttachTrace,f=/[\\\/]bluebird[\\\/]js[\\\/](release|debug|instrumented)/,p=/\((?:timers\.js):\d+:\d+\)/,d=/[\/<\(](.+?):(\d+):(\d+)\)?\s*$/,_=null,v=null,y=!1,m=!(0==l.env("BLUEBIRD_DEBUG")),g=!(0==l.env("BLUEBIRD_WARNINGS")||!m&&!l.env("BLUEBIRD_WARNINGS")),b=!(0==l.env("BLUEBIRD_LONG_STACK_TRACES")||!m&&!l.env("BLUEBIRD_LONG_STACK_TRACES")),P=0!=l.env("BLUEBIRD_W_FORGOTTEN_RETURN")&&(g||!!l.env("BLUEBIRD_W_FORGOTTEN_RETURN"));n.prototype.suppressUnhandledRejections=function(){var t=this._target();t._bitField=-1048577&t._bitField|524288},n.prototype._ensurePossibleRejectionHandled=function(){0==(524288&this._bitField)&&(this._setRejectionIsUnhandled(),c.invokeLater(this._notifyUnhandledRejection,this,void 0))},n.prototype._notifyUnhandledRejectionIsHandled=function(){fireRejectionEvent("rejectionHandled",i,void 0,this)},n.prototype._setReturnedNonUndefined=function(){this._bitField=268435456|this._bitField},n.prototype._returnedNonUndefined=function(){return 0!=(268435456&this._bitField)},n.prototype._notifyUnhandledRejection=function(){if(this._isRejectionUnhandled()){var t=this._settledValue();this._setUnhandledRejectionIsNotified(),fireRejectionEvent("unhandledRejection",o,t,this)}},n.prototype._setUnhandledRejectionIsNotified=function(){this._bitField=262144|this._bitField},n.prototype._unsetUnhandledRejectionIsNotified=function(){this._bitField=-262145&this._bitField},n.prototype._isUnhandledRejectionNotified=function(){return(262144&this._bitField)>0},n.prototype._setRejectionIsUnhandled=function(){this._bitField=1048576|this._bitField},n.prototype._unsetRejectionIsUnhandled=function(){this._bitField=-1048577&this._bitField,this._isUnhandledRejectionNotified()&&(this._unsetUnhandledRejectionIsNotified(),this._notifyUnhandledRejectionIsHandled())},n.prototype._isRejectionUnhandled=function(){return(1048576&this._bitField)>0},n.prototype._warn=function(t,e,n){return warn(t,e,n||this)},n.onPossiblyUnhandledRejection=function(t){var e=a();o="function"==typeof t?null===e?t:l.domainBind(e,t):void 0},n.onUnhandledRejectionHandled=function(t){var e=a();i="function"==typeof t?null===e?t:l.domainBind(e,t):void 0};var S=function(){};n.longStackTraces=function(){if(c.haveItemsQueued()&&!F.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");if(!F.longStackTraces&&longStackTracesIsSupported()){var t=n.prototype._captureStackTrace,e=n.prototype._attachExtraTrace;F.longStackTraces=!0,S=function(){if(c.haveItemsQueued()&&!F.longStackTraces)throw new Error("cannot enable long stack traces after promises have been created\n\n    See http://goo.gl/MqrFmX\n");n.prototype._captureStackTrace=t,n.prototype._attachExtraTrace=e,r.deactivateLongStackTraces(),c.enableTrampoline(),F.longStackTraces=!1},n.prototype._captureStackTrace=longStackTracesCaptureStackTrace,n.prototype._attachExtraTrace=longStackTracesAttachExtraTrace,r.activateLongStackTraces(),c.disableTrampolineIfNecessary()}},n.hasLongStackTraces=function(){return F.longStackTraces&&longStackTracesIsSupported()};var w=function(){try{if("function"==typeof CustomEvent){t=new CustomEvent("CustomEvent");return l.global.dispatchEvent(t),function(t,e){var n=new CustomEvent(t.toLowerCase(),{detail:e,cancelable:!0});return!l.global.dispatchEvent(n)}}if("function"==typeof Event){var t=new Event("CustomEvent");return l.global.dispatchEvent(t),function(t,e){var n=new Event(t.toLowerCase(),{cancelable:!0});return n.detail=e,!l.global.dispatchEvent(n)}}return(t=document.createEvent("CustomEvent")).initCustomEvent("testingtheevent",!1,!0,{}),l.global.dispatchEvent(t),function(t,e){var n=document.createEvent("CustomEvent");return n.initCustomEvent(t.toLowerCase(),!1,!0,e),!l.global.dispatchEvent(n)}}catch(t){}return function(){return!1}}(),C=l.isNode?function(){return t.emit.apply(t,arguments)}:l.global?function(t){var e="on"+t.toLowerCase(),n=l.global[e];return!!n&&(n.apply(l.global,[].slice.call(arguments,1)),!0)}:function(){return!1},E={promiseCreated:generatePromiseLifecycleEventObject,promiseFulfilled:generatePromiseLifecycleEventObject,promiseRejected:generatePromiseLifecycleEventObject,promiseResolved:generatePromiseLifecycleEventObject,promiseCancelled:generatePromiseLifecycleEventObject,promiseChained:function(t,e,n){return{promise:e,child:n}},warning:function(t,e){return{warning:e}},unhandledRejection:function(t,e,n){return{reason:e,promise:n}},rejectionHandled:generatePromiseLifecycleEventObject},k=function(t){var e=!1;try{e=C.apply(null,arguments)}catch(t){c.throwLater(t),e=!0}var n=!1;try{n=w(t,E[t].apply(null,arguments))}catch(t){c.throwLater(t),n=!0}return n||e};n.config=function(t){if("longStackTraces"in(t=Object(t))&&(t.longStackTraces?n.longStackTraces():!t.longStackTraces&&n.hasLongStackTraces()&&S()),"warnings"in t){var e=t.warnings;F.warnings=!!e,P=F.warnings,l.isObject(e)&&"wForgottenReturn"in e&&(P=!!e.wForgottenReturn)}if("cancellation"in t&&t.cancellation&&!F.cancellation){if(c.haveItemsQueued())throw new Error("cannot enable cancellation after promises are in use");n.prototype._clearCancellationData=cancellationClearCancellationData,n.prototype._propagateFrom=cancellationPropagateFrom,n.prototype._onCancel=cancellationOnCancel,n.prototype._setOnCancel=cancellationSetOnCancel,n.prototype._attachCancellationCallback=cancellationAttachCancellationCallback,n.prototype._execute=cancellationExecute,x=cancellationPropagateFrom,F.cancellation=!0}return"monitoring"in t&&(t.monitoring&&!F.monitoring?(F.monitoring=!0,n.prototype._fireEvent=k):!t.monitoring&&F.monitoring&&(F.monitoring=!1,n.prototype._fireEvent=defaultFireEvent)),n},n.prototype._fireEvent=defaultFireEvent,n.prototype._execute=function(t,e,n){try{t(e,n)}catch(t){return t}},n.prototype._onCancel=function(){},n.prototype._setOnCancel=function(t){},n.prototype._attachCancellationCallback=function(t){},n.prototype._captureStackTrace=function(){},n.prototype._attachExtraTrace=function(){},n.prototype._clearCancellationData=function(){},n.prototype._propagateFrom=function(t,e){};var x=function(t,e){0!=(2&e)&&t._isBound()&&this._setBoundTo(t._boundTo)},A=function(){return!1},T=/[\/<\(]([^:\/]+):(\d+):(?:\d+)\)?\s*$/;l.inherits(CapturedTrace,Error),r.CapturedTrace=CapturedTrace,CapturedTrace.prototype.uncycle=function(){var t=this._length;if(!(t<2)){for(var e=[],n={},r=0,i=this;void 0!==i;++r)e.push(i),i=i._parent;for(r=(t=this._length=r)-1;r>=0;--r){var o=e[r].stack;void 0===n[o]&&(n[o]=r)}for(r=0;r<t;++r){var s=n[e[r].stack];if(void 0!==s&&s!==r){s>0&&(e[s-1]._parent=void 0,e[s-1]._length=1),e[r]._parent=void 0,e[r]._length=1;var a=r>0?e[r-1]:this;s<t-1?(a._parent=e[s+1],a._parent.uncycle(),a._length=a._parent._length+1):(a._parent=void 0,a._length=1);for(var c=a._length+1,u=r-2;u>=0;--u)e[u]._length=c,c++;return}}}},CapturedTrace.prototype.attachExtraTrace=function(t){if(!t.__stackCleaned__){this.uncycle();for(var e=parseStackAndMessage(t),n=e.message,r=[e.stack],i=this;void 0!==i;)r.push(cleanStack(i.stack.split("\n"))),i=i._parent;removeCommonRoots(r),removeDuplicateOrEmptyJumps(r),l.notEnumerableProp(t,"stack",reconstructStack(n,r)),l.notEnumerableProp(t,"__stackCleaned__",!0)}};var j=function(){var t=/^\s*at\s*/,e=function(t,e){return"string"==typeof t?t:void 0!==e.name&&void 0!==e.message?e.toString():formatNonError(e)};if("number"==typeof Error.stackTraceLimit&&"function"==typeof Error.captureStackTrace){Error.stackTraceLimit+=6,_=t,v=e;var n=Error.captureStackTrace;return A=function(t){return f.test(t)},function(t,e){Error.stackTraceLimit+=6,n(t,e),Error.stackTraceLimit-=6}}var r=new Error;if("string"==typeof r.stack&&r.stack.split("\n")[0].indexOf("stackDetection@")>=0)return _=/@/,v=e,y=!0,function(t){t.stack=(new Error).stack};var i;try{throw new Error}catch(t){i="stack"in t}return"stack"in r||!i||"number"!=typeof Error.stackTraceLimit?(v=function(t,e){return"string"==typeof t?t:"object"!=typeof e&&"function"!=typeof e||void 0===e.name||void 0===e.message?formatNonError(e):e.toString()},null):(_=t,v=e,function(t){Error.stackTraceLimit+=6;try{throw new Error}catch(e){t.stack=e.stack}Error.stackTraceLimit-=6})}();"undefined"!=typeof console&&void 0!==console.warn&&(s=function(t){console.warn(t)},l.isNode&&t.stderr.isTTY?s=function(t,e){var n=e?"[33m":"[31m";console.warn(n+t+"[0m\n")}:l.isNode||"string"!=typeof(new Error).stack||(s=function(t,e){console.warn("%c"+t,e?"color: darkorange":"color: red")}));var F={warnings:g,longStackTraces:!1,cancellation:!1,monitoring:!1};return b&&n.longStackTraces(),{longStackTraces:function(){return F.longStackTraces},warnings:function(){return F.warnings},cancellation:function(){return F.cancellation},monitoring:function(){return F.monitoring},propagateFromFunction:function(){return x},boundValueFunction:function(){return boundValueFunction},checkForgottenReturns:function(t,e,n,r,i){if(void 0===t&&null!==e&&P){if(void 0!==i&&i._returnedNonUndefined())return;if(0==(65535&r._bitField))return;n&&(n+=" ");var o="",s="";if(e._trace){for(var a=e._trace.stack.split("\n"),c=cleanStack(a),u=c.length-1;u>=0;--u){var l=c[u];if(!p.test(l)){var h=l.match(d);h&&(o="at "+h[1]+":"+h[2]+":"+h[3]+" ");break}}if(c.length>0)for(var f=c[0],u=0;u<a.length;++u)if(a[u]===f){u>0&&(s="\n"+a[u-1]);break}}var _="a promise was created in a "+n+"handler "+o+"but was not returned from it, see http://goo.gl/rRqMUw"+s;r._warn(_,!0,e)}},setBounds:function(t,e){if(longStackTracesIsSupported()){for(var n,r,i=t.stack.split("\n"),o=e.stack.split("\n"),s=-1,a=-1,c=0;c<i.length;++c)if(u=parseLineInfo(i[c])){n=u.fileName,s=u.line;break}for(c=0;c<o.length;++c){var u=parseLineInfo(o[c]);if(u){r=u.fileName,a=u.line;break}}s<0||a<0||!n||!r||n!==r||s>=a||(A=function(t){if(f.test(t))return!0;var e=parseLineInfo(t);return!!(e&&e.fileName===n&&s<=e.line&&e.line<=a)})}},warn:warn,deprecated:function(t,e){var n=t+" is deprecated and will be removed in a future version.";return e&&(n+=" Use "+e+" instead."),warn(n)},CapturedTrace:CapturedTrace,fireDomEvent:w,fireGlobalEvent:C}}},{"./errors":12,"./util":36}],10:[function(t,e,n){"use strict";e.exports=function(t){function returner(){return this.value}function thrower(){throw this.reason}t.prototype.return=t.prototype.thenReturn=function(e){return e instanceof t&&e.suppressUnhandledRejections(),this._then(returner,void 0,void 0,{value:e},void 0)},t.prototype.throw=t.prototype.thenThrow=function(t){return this._then(thrower,void 0,void 0,{reason:t},void 0)},t.prototype.catchThrow=function(t){if(arguments.length<=1)return this._then(void 0,thrower,void 0,{reason:t},void 0);var e=arguments[1];return this.caught(t,function(){throw e})},t.prototype.catchReturn=function(e){if(arguments.length<=1)return e instanceof t&&e.suppressUnhandledRejections(),this._then(void 0,returner,void 0,{value:e},void 0);var n=arguments[1];n instanceof t&&n.suppressUnhandledRejections();return this.caught(e,function(){return n})}}},{}],11:[function(t,e,n){"use strict";e.exports=function(t,e){function promiseAllThis(){return r(this)}var n=t.reduce,r=t.all;t.prototype.each=function(t){return n(this,t,e,0)._then(promiseAllThis,void 0,void 0,this,void 0)},t.prototype.mapSeries=function(t){return n(this,t,e,e)},t.each=function(t,r){return n(t,r,e,0)._then(promiseAllThis,void 0,void 0,t,void 0)},t.mapSeries=function(t,r){return n(t,r,e,e)}}},{}],12:[function(t,e,n){"use strict";function subError(t,e){function SubError(n){if(!(this instanceof SubError))return new SubError(n);u(this,"message","string"==typeof n?n:e),u(this,"name",t),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):Error.call(this)}return c(SubError,Error),SubError}function OperationalError(t){if(!(this instanceof OperationalError))return new OperationalError(t);u(this,"name","OperationalError"),u(this,"message",t),this.cause=t,this.isOperational=!0,t instanceof Error?(u(this,"message",t.message),u(this,"stack",t.stack)):Error.captureStackTrace&&Error.captureStackTrace(this,this.constructor)}var r,i,o=t("./es5"),s=o.freeze,a=t("./util"),c=a.inherits,u=a.notEnumerableProp,l=subError("Warning","warning"),h=subError("CancellationError","cancellation error"),f=subError("TimeoutError","timeout error"),p=subError("AggregateError","aggregate error");try{r=TypeError,i=RangeError}catch(t){r=subError("TypeError","type error"),i=subError("RangeError","range error")}for(var d="join pop push shift unshift slice filter forEach some every map indexOf lastIndexOf reduce reduceRight sort reverse".split(" "),_=0;_<d.length;++_)"function"==typeof Array.prototype[d[_]]&&(p.prototype[d[_]]=Array.prototype[d[_]]);o.defineProperty(p.prototype,"length",{value:0,configurable:!1,writable:!0,enumerable:!0}),p.prototype.isOperational=!0;var v=0;p.prototype.toString=function(){var t=Array(4*v+1).join(" "),e="\n"+t+"AggregateError of:\n";v++,t=Array(4*v+1).join(" ");for(var n=0;n<this.length;++n){for(var r=this[n]===this?"[Circular AggregateError]":this[n]+"",i=r.split("\n"),o=0;o<i.length;++o)i[o]=t+i[o];e+=(r=i.join("\n"))+"\n"}return v--,e},c(OperationalError,Error);var y=Error.__BluebirdErrorTypes__;y||(y=s({CancellationError:h,TimeoutError:f,OperationalError:OperationalError,RejectionError:OperationalError,AggregateError:p}),o.defineProperty(Error,"__BluebirdErrorTypes__",{value:y,writable:!1,enumerable:!1,configurable:!1})),e.exports={Error:Error,TypeError:r,RangeError:i,CancellationError:y.CancellationError,OperationalError:y.OperationalError,TimeoutError:y.TimeoutError,AggregateError:y.AggregateError,Warning:l}},{"./es5":13,"./util":36}],13:[function(t,e,n){var r=function(){"use strict";return void 0===this}();if(r)e.exports={freeze:Object.freeze,defineProperty:Object.defineProperty,getDescriptor:Object.getOwnPropertyDescriptor,keys:Object.keys,names:Object.getOwnPropertyNames,getPrototypeOf:Object.getPrototypeOf,isArray:Array.isArray,isES5:r,propertyIsWritable:function(t,e){var n=Object.getOwnPropertyDescriptor(t,e);return!(n&&!n.writable&&!n.set)}};else{var i={}.hasOwnProperty,o={}.toString,s={}.constructor.prototype,a=function(t){var e=[];for(var n in t)i.call(t,n)&&e.push(n);return e};e.exports={isArray:function(t){try{return"[object Array]"===o.call(t)}catch(t){return!1}},keys:a,names:a,defineProperty:function(t,e,n){return t[e]=n.value,t},getDescriptor:function(t,e){return{value:t[e]}},freeze:function(t){return t},getPrototypeOf:function(t){try{return Object(t).constructor.prototype}catch(t){return s}},isES5:r,propertyIsWritable:function(){return!0}}}},{}],14:[function(t,e,n){"use strict";e.exports=function(t,e){var n=t.map;t.prototype.filter=function(t,r){return n(this,t,r,e)},t.filter=function(t,r,i){return n(t,r,i,e)}}},{}],15:[function(t,e,n){"use strict";e.exports=function(e,n,r){function PassThroughHandlerContext(t,e,n){this.promise=t,this.type=e,this.handler=n,this.called=!1,this.cancelPromise=null}function FinallyHandlerCancelReaction(t){this.finallyHandler=t}function checkCancel(t,e){return null!=t.cancelPromise&&(arguments.length>1?t.cancelPromise._reject(e):t.cancelPromise._cancel(),t.cancelPromise=null,!0)}function succeed(){return finallyHandler.call(this,this.promise._target()._settledValue())}function fail(t){if(!checkCancel(this,t))return s.e=t,s}function finallyHandler(t){var i=this.promise,a=this.handler;if(!this.called){this.called=!0;var c=this.isFinallyHandler()?a.call(i._boundValue()):a.call(i._boundValue(),t);if(c===r)return c;if(void 0!==c){i._setReturnedNonUndefined();var u=n(c,i);if(u instanceof e){if(null!=this.cancelPromise){if(u._isCancelled()){var l=new o("late cancellation observer");return i._attachExtraTrace(l),s.e=l,s}u.isPending()&&u._attachCancellationCallback(new FinallyHandlerCancelReaction(this))}return u._then(succeed,fail,void 0,this,void 0)}}}return i.isRejected()?(checkCancel(this),s.e=t,s):(checkCancel(this),t)}var i=t("./util"),o=e.CancellationError,s=i.errorObj,a=t("./catch_filter")(r);return PassThroughHandlerContext.prototype.isFinallyHandler=function(){return 0===this.type},FinallyHandlerCancelReaction.prototype._resultCancelled=function(){checkCancel(this.finallyHandler)},e.prototype._passThrough=function(t,e,n,r){return"function"!=typeof t?this.then():this._then(n,r,void 0,new PassThroughHandlerContext(this,e,t),void 0)},e.prototype.lastly=e.prototype.finally=function(t){return this._passThrough(t,0,finallyHandler,finallyHandler)},e.prototype.tap=function(t){return this._passThrough(t,1,finallyHandler)},e.prototype.tapCatch=function(t){var n=arguments.length;if(1===n)return this._passThrough(t,1,void 0,finallyHandler);var r,o=new Array(n-1),s=0;for(r=0;r<n-1;++r){var c=arguments[r];if(!i.isObject(c))return e.reject(new TypeError("tapCatch statement predicate: expecting an object but got "+i.classString(c)));o[s++]=c}o.length=s;var u=arguments[r];return this._passThrough(a(o,u,this),1,void 0,finallyHandler)},PassThroughHandlerContext}},{"./catch_filter":7,"./util":36}],16:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function promiseFromYieldHandler(t,n,r){for(var o=0;o<n.length;++o){r._pushContext();var s=l(n[o])(t);if(r._popContext(),s===u){r._pushContext();var a=e.reject(u.e);return r._popContext(),a}var c=i(s,r);if(c instanceof e)return c}return null}function PromiseSpawn(t,n,i,o){if(s.cancellation()){var a=new e(r),c=this._finallyPromise=new e(r);this._promise=a.lastly(function(){return c}),a._captureStackTrace(),a._setOnCancel(this)}else(this._promise=new e(r))._captureStackTrace();this._stack=o,this._generatorFunction=t,this._receiver=n,this._generator=void 0,this._yieldHandlers="function"==typeof i?[i].concat(h):h,this._yieldedPromise=null,this._cancellationPhase=!1}var a=t("./errors").TypeError,c=t("./util"),u=c.errorObj,l=c.tryCatch,h=[];c.inherits(PromiseSpawn,o),PromiseSpawn.prototype._isResolved=function(){return null===this._promise},PromiseSpawn.prototype._cleanup=function(){this._promise=this._generator=null,s.cancellation()&&null!==this._finallyPromise&&(this._finallyPromise._fulfill(),this._finallyPromise=null)},PromiseSpawn.prototype._promiseCancelled=function(){if(!this._isResolved()){var t;if(void 0!==this._generator.return)this._promise._pushContext(),t=l(this._generator.return).call(this._generator,void 0),this._promise._popContext();else{var n=new e.CancellationError("generator .return() sentinel");e.coroutine.returnSentinel=n,this._promise._attachExtraTrace(n),this._promise._pushContext(),t=l(this._generator.throw).call(this._generator,n),this._promise._popContext()}this._cancellationPhase=!0,this._yieldedPromise=null,this._continue(t)}},PromiseSpawn.prototype._promiseFulfilled=function(t){this._yieldedPromise=null,this._promise._pushContext();var e=l(this._generator.next).call(this._generator,t);this._promise._popContext(),this._continue(e)},PromiseSpawn.prototype._promiseRejected=function(t){this._yieldedPromise=null,this._promise._attachExtraTrace(t),this._promise._pushContext();var e=l(this._generator.throw).call(this._generator,t);this._promise._popContext(),this._continue(e)},PromiseSpawn.prototype._resultCancelled=function(){if(this._yieldedPromise instanceof e){var t=this._yieldedPromise;this._yieldedPromise=null,t.cancel()}},PromiseSpawn.prototype.promise=function(){return this._promise},PromiseSpawn.prototype._run=function(){this._generator=this._generatorFunction.call(this._receiver),this._receiver=this._generatorFunction=void 0,this._promiseFulfilled(void 0)},PromiseSpawn.prototype._continue=function(t){var n=this._promise;if(t===u)return this._cleanup(),this._cancellationPhase?n.cancel():n._rejectCallback(t.e,!1);var r=t.value;if(!0===t.done)return this._cleanup(),this._cancellationPhase?n.cancel():n._resolveCallback(r);var o=i(r,this._promise);if(o instanceof e||null!==(o=promiseFromYieldHandler(o,this._yieldHandlers,this._promise))){var s=(o=o._target())._bitField;0==(50397184&s)?(this._yieldedPromise=o,o._proxy(this,null)):0!=(33554432&s)?e._async.invoke(this._promiseFulfilled,this,o._value()):0!=(16777216&s)?e._async.invoke(this._promiseRejected,this,o._reason()):this._promiseCancelled()}else this._promiseRejected(new a("A value %s was yielded that could not be treated as a promise\n\n    See http://goo.gl/MqrFmX\n\n".replace("%s",String(r))+"From coroutine:\n"+this._stack.split("\n").slice(1,-7).join("\n")))},e.coroutine=function(t,e){if("function"!=typeof t)throw new a("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var n=Object(e).yieldHandler,r=PromiseSpawn,i=(new Error).stack;return function(){var e=t.apply(this,arguments),o=new r(void 0,void 0,n,i),s=o.promise();return o._generator=e,o._promiseFulfilled(void 0),s}},e.coroutine.addYieldHandler=function(t){if("function"!=typeof t)throw new a("expecting a function but got "+c.classString(t));h.push(t)},e.spawn=function(t){if(s.deprecated("Promise.spawn()","Promise.coroutine()"),"function"!=typeof t)return n("generatorFunction must be a function\n\n    See http://goo.gl/MqrFmX\n");var r=new PromiseSpawn(t,this),i=r.promise();return r._run(e.spawn),i}}},{"./errors":12,"./util":36}],17:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){var a=t("./util");a.canEvaluate,a.tryCatch,a.errorObj;e.join=function(){var t,e=arguments.length-1;if(e>0&&"function"==typeof arguments[e]){t=arguments[e]}var r=[].slice.call(arguments);t&&r.pop();var i=new n(r).promise();return void 0!==t?i.spread(t):i}}},{"./util":36}],18:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function MappingPromiseArray(t,e,n,r){this.constructor$(t),this._promise._captureStackTrace();var i=a();this._callback=null===i?e:c.domainBind(i,e),this._preservedValues=r===o?new Array(this.length()):null,this._limit=n,this._inFlight=0,this._queue=[],h.invoke(this._asyncInit,this,void 0)}function map(t,n,i,o){if("function"!=typeof n)return r("expecting a function but got "+c.classString(n));var s=0;if(void 0!==i){if("object"!=typeof i||null===i)return e.reject(new TypeError("options argument must be an object but it is "+c.classString(i)));if("number"!=typeof i.concurrency)return e.reject(new TypeError("'concurrency' must be a number but it is "+c.classString(i.concurrency)));s=i.concurrency}return s="number"==typeof s&&isFinite(s)&&s>=1?s:0,new MappingPromiseArray(t,n,s,o).promise()}var a=e._getDomain,c=t("./util"),u=c.tryCatch,l=c.errorObj,h=e._async;c.inherits(MappingPromiseArray,n),MappingPromiseArray.prototype._asyncInit=function(){this._init$(void 0,-2)},MappingPromiseArray.prototype._init=function(){},MappingPromiseArray.prototype._promiseFulfilled=function(t,n){var r=this._values,o=this.length(),a=this._preservedValues,c=this._limit;if(n<0){if(n=-1*n-1,r[n]=t,c>=1&&(this._inFlight--,this._drainQueue(),this._isResolved()))return!0}else{if(c>=1&&this._inFlight>=c)return r[n]=t,this._queue.push(n),!1;null!==a&&(a[n]=t);var h=this._promise,f=this._callback,p=h._boundValue();h._pushContext();var d=u(f).call(p,t,n,o),_=h._popContext();if(s.checkForgottenReturns(d,_,null!==a?"Promise.filter":"Promise.map",h),d===l)return this._reject(d.e),!0;var v=i(d,this._promise);if(v instanceof e){var y=(v=v._target())._bitField;if(0==(50397184&y))return c>=1&&this._inFlight++,r[n]=v,v._proxy(this,-1*(n+1)),!1;if(0==(33554432&y))return 0!=(16777216&y)?(this._reject(v._reason()),!0):(this._cancel(),!0);d=v._value()}r[n]=d}return++this._totalResolved>=o&&(null!==a?this._filter(r,a):this._resolve(r),!0)},MappingPromiseArray.prototype._drainQueue=function(){for(var t=this._queue,e=this._limit,n=this._values;t.length>0&&this._inFlight<e;){if(this._isResolved())return;var r=t.pop();this._promiseFulfilled(n[r],r)}},MappingPromiseArray.prototype._filter=function(t,e){for(var n=e.length,r=new Array(n),i=0,o=0;o<n;++o)t[o]&&(r[i++]=e[o]);r.length=i,this._resolve(r)},MappingPromiseArray.prototype.preservedValues=function(){return this._preservedValues},e.prototype.map=function(t,e){return map(this,t,e,null)},e.map=function(t,e,n,r){return map(t,e,n,r)}}},{"./util":36}],19:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){var s=t("./util"),a=s.tryCatch;e.method=function(t){if("function"!=typeof t)throw new e.TypeError("expecting a function but got "+s.classString(t));return function(){var r=new e(n);r._captureStackTrace(),r._pushContext();var i=a(t).apply(this,arguments),s=r._popContext();return o.checkForgottenReturns(i,s,"Promise.method",r),r._resolveFromSyncValue(i),r}},e.attempt=e.try=function(t){if("function"!=typeof t)return i("expecting a function but got "+s.classString(t));var r=new e(n);r._captureStackTrace(),r._pushContext();var c;if(arguments.length>1){o.deprecated("calling Promise.try with more than 1 argument");var u=arguments[1],l=arguments[2];c=s.isArray(u)?a(t).apply(l,u):a(t).call(l,u)}else c=a(t)();var h=r._popContext();return o.checkForgottenReturns(c,h,"Promise.try",r),r._resolveFromSyncValue(c),r},e.prototype._resolveFromSyncValue=function(t){t===s.errorObj?this._rejectCallback(t.e,!1):this._resolveCallback(t,!0)}}},{"./util":36}],20:[function(t,e,n){"use strict";function isUntypedError(t){return t instanceof Error&&s.getPrototypeOf(t)===Error.prototype}function wrapAsOperationalError(t){var e;if(isUntypedError(t)){(e=new o(t)).name=t.name,e.message=t.message,e.stack=t.stack;for(var n=s.keys(t),i=0;i<n.length;++i){var c=n[i];a.test(c)||(e[c]=t[c])}return e}return r.markAsOriginatingFromRejection(t),t}var r=t("./util"),i=r.maybeWrapAsError,o=t("./errors").OperationalError,s=t("./es5"),a=/^(?:name|message|stack|cause)$/;e.exports=function(t,e){return function(n,r){if(null!==t){if(n){var o=wrapAsOperationalError(i(n));t._attachExtraTrace(o),t._reject(o)}else if(e){var s=[].slice.call(arguments,1);t._fulfill(s)}else t._fulfill(r);t=null}}}},{"./errors":12,"./es5":13,"./util":36}],21:[function(t,e,n){"use strict";e.exports=function(e){function spreadAdapter(t,e){var s=this;if(!n.isArray(t))return successAdapter.call(s,t,e);var a=i(e).apply(s._boundValue(),[null].concat(t));a===o&&r.throwLater(a.e)}function successAdapter(t,e){var n=this._boundValue(),s=void 0===t?i(e).call(n,null):i(e).call(n,null,t);s===o&&r.throwLater(s.e)}function errorAdapter(t,e){var n=this;if(!t){var s=new Error(t+"");s.cause=t,t=s}var a=i(e).call(n._boundValue(),t);a===o&&r.throwLater(a.e)}var n=t("./util"),r=e._async,i=n.tryCatch,o=n.errorObj;e.prototype.asCallback=e.prototype.nodeify=function(t,e){if("function"==typeof t){var n=successAdapter;void 0!==e&&Object(e).spread&&(n=spreadAdapter),this._then(n,errorAdapter,void 0,this,t)}return this}}},{"./util":36}],22:[function(e,n,r){"use strict";n.exports=function(){function Proxyable(){}function check(t,e){if(null==t||t.constructor!==Promise)throw new p("the promise constructor cannot be invoked directly\n\n    See http://goo.gl/MqrFmX\n");if("function"!=typeof e)throw new p("expecting a function but got "+c.classString(e))}function Promise(t){t!==_&&check(this,t),this._bitField=0,this._fulfillmentHandler0=void 0,this._rejectionHandler0=void 0,this._promise0=void 0,this._receiver0=void 0,this._resolveFromExecutor(t),this._promiseCreated(),this._fireEvent("promiseCreated",this)}function deferResolve(t){this.promise._resolveCallback(t)}function deferReject(t){this.promise._rejectCallback(t,!1)}function fillTypes(t){var e=new Promise(_);e._fulfillmentHandler0=t,e._rejectionHandler0=t,e._promise0=t,e._receiver0=t}var r,i=function(){return new p("circular promise resolution chain\n\n    See http://goo.gl/MqrFmX\n")},o=function(){return new Promise.PromiseInspection(this._target())},s=function(t){return Promise.reject(new p(t))},a={},c=e("./util");r=c.isNode?function(){var e=t.domain;return void 0===e&&(e=null),e}:function(){return null},c.notEnumerableProp(Promise,"_getDomain",r);var u=e("./es5"),l=e("./async"),h=new l;u.defineProperty(Promise,"_async",{value:h});var f=e("./errors"),p=Promise.TypeError=f.TypeError;Promise.RangeError=f.RangeError;var d=Promise.CancellationError=f.CancellationError;Promise.TimeoutError=f.TimeoutError,Promise.OperationalError=f.OperationalError,Promise.RejectionError=f.OperationalError,Promise.AggregateError=f.AggregateError;var _=function(){},v={},y={},m=e("./thenables")(Promise,_),g=e("./promise_array")(Promise,_,m,s,Proxyable),b=e("./context")(Promise),P=b.create,S=e("./debuggability")(Promise,b),w=(S.CapturedTrace,e("./finally")(Promise,m,y)),C=e("./catch_filter")(y),E=e("./nodeback"),k=c.errorObj,x=c.tryCatch;return Promise.prototype.toString=function(){return"[object Promise]"},Promise.prototype.caught=Promise.prototype.catch=function(t){var e=arguments.length;if(e>1){var n,r=new Array(e-1),i=0;for(n=0;n<e-1;++n){var o=arguments[n];if(!c.isObject(o))return s("Catch statement predicate: expecting an object but got "+c.classString(o));r[i++]=o}return r.length=i,t=arguments[n],this.then(void 0,C(r,t,this))}return this.then(void 0,t)},Promise.prototype.reflect=function(){return this._then(o,o,void 0,this,void 0)},Promise.prototype.then=function(t,e){if(S.warnings()&&arguments.length>0&&"function"!=typeof t&&"function"!=typeof e){var n=".then() only accepts functions but was passed: "+c.classString(t);arguments.length>1&&(n+=", "+c.classString(e)),this._warn(n)}return this._then(t,e,void 0,void 0,void 0)},Promise.prototype.done=function(t,e){this._then(t,e,void 0,void 0,void 0)._setIsFinal()},Promise.prototype.spread=function(t){return"function"!=typeof t?s("expecting a function but got "+c.classString(t)):this.all()._then(t,void 0,void 0,v,void 0)},Promise.prototype.toJSON=function(){var t={isFulfilled:!1,isRejected:!1,fulfillmentValue:void 0,rejectionReason:void 0};return this.isFulfilled()?(t.fulfillmentValue=this.value(),t.isFulfilled=!0):this.isRejected()&&(t.rejectionReason=this.reason(),t.isRejected=!0),t},Promise.prototype.all=function(){return arguments.length>0&&this._warn(".all() was passed arguments but it does not take any"),new g(this).promise()},Promise.prototype.error=function(t){return this.caught(c.originatesFromRejection,t)},Promise.getNewLibraryCopy=n.exports,Promise.is=function(t){return t instanceof Promise},Promise.fromNode=Promise.fromCallback=function(t){var e=new Promise(_);e._captureStackTrace();var n=arguments.length>1&&!!Object(arguments[1]).multiArgs,r=x(t)(E(e,n));return r===k&&e._rejectCallback(r.e,!0),e._isFateSealed()||e._setAsyncGuaranteed(),e},Promise.all=function(t){return new g(t).promise()},Promise.cast=function(t){var e=m(t);return e instanceof Promise||((e=new Promise(_))._captureStackTrace(),e._setFulfilled(),e._rejectionHandler0=t),e},Promise.resolve=Promise.fulfilled=Promise.cast,Promise.reject=Promise.rejected=function(t){var e=new Promise(_);return e._captureStackTrace(),e._rejectCallback(t,!0),e},Promise.setScheduler=function(t){if("function"!=typeof t)throw new p("expecting a function but got "+c.classString(t));return h.setScheduler(t)},Promise.prototype._then=function(t,e,n,i,o){var s=void 0!==o,a=s?o:new Promise(_),u=this._target(),l=u._bitField;s||(a._propagateFrom(this,3),a._captureStackTrace(),void 0===i&&0!=(2097152&this._bitField)&&(i=0!=(50397184&l)?this._boundValue():u===this?void 0:this._boundTo),this._fireEvent("promiseChained",this,a));var f=r();if(0!=(50397184&l)){var p,v,y=u._settlePromiseCtx;0!=(33554432&l)?(v=u._rejectionHandler0,p=t):0!=(16777216&l)?(v=u._fulfillmentHandler0,p=e,u._unsetRejectionIsUnhandled()):(y=u._settlePromiseLateCancellationObserver,v=new d("late cancellation observer"),u._attachExtraTrace(v),p=e),h.invoke(y,u,{handler:null===f?p:"function"==typeof p&&c.domainBind(f,p),promise:a,receiver:i,value:v})}else u._addCallbacks(t,e,a,i,f);return a},Promise.prototype._length=function(){return 65535&this._bitField},Promise.prototype._isFateSealed=function(){return 0!=(117506048&this._bitField)},Promise.prototype._isFollowing=function(){return 67108864==(67108864&this._bitField)},Promise.prototype._setLength=function(t){this._bitField=-65536&this._bitField|65535&t},Promise.prototype._setFulfilled=function(){this._bitField=33554432|this._bitField,this._fireEvent("promiseFulfilled",this)},Promise.prototype._setRejected=function(){this._bitField=16777216|this._bitField,this._fireEvent("promiseRejected",this)},Promise.prototype._setFollowing=function(){this._bitField=67108864|this._bitField,this._fireEvent("promiseResolved",this)},Promise.prototype._setIsFinal=function(){this._bitField=4194304|this._bitField},Promise.prototype._isFinal=function(){return(4194304&this._bitField)>0},Promise.prototype._unsetCancelled=function(){this._bitField=-65537&this._bitField},Promise.prototype._setCancelled=function(){this._bitField=65536|this._bitField,this._fireEvent("promiseCancelled",this)},Promise.prototype._setWillBeCancelled=function(){this._bitField=8388608|this._bitField},Promise.prototype._setAsyncGuaranteed=function(){h.hasCustomScheduler()||(this._bitField=134217728|this._bitField)},Promise.prototype._receiverAt=function(t){var e=0===t?this._receiver0:this[4*t-4+3];if(e!==a)return void 0===e&&this._isBound()?this._boundValue():e},Promise.prototype._promiseAt=function(t){return this[4*t-4+2]},Promise.prototype._fulfillmentHandlerAt=function(t){return this[4*t-4+0]},Promise.prototype._rejectionHandlerAt=function(t){return this[4*t-4+1]},Promise.prototype._boundValue=function(){},Promise.prototype._migrateCallback0=function(t){t._bitField;var e=t._fulfillmentHandler0,n=t._rejectionHandler0,r=t._promise0,i=t._receiverAt(0);void 0===i&&(i=a),this._addCallbacks(e,n,r,i,null)},Promise.prototype._migrateCallbackAt=function(t,e){var n=t._fulfillmentHandlerAt(e),r=t._rejectionHandlerAt(e),i=t._promiseAt(e),o=t._receiverAt(e);void 0===o&&(o=a),this._addCallbacks(n,r,i,o,null)},Promise.prototype._addCallbacks=function(t,e,n,r,i){var o=this._length();if(o>=65531&&(o=0,this._setLength(0)),0===o)this._promise0=n,this._receiver0=r,"function"==typeof t&&(this._fulfillmentHandler0=null===i?t:c.domainBind(i,t)),"function"==typeof e&&(this._rejectionHandler0=null===i?e:c.domainBind(i,e));else{var s=4*o-4;this[s+2]=n,this[s+3]=r,"function"==typeof t&&(this[s+0]=null===i?t:c.domainBind(i,t)),"function"==typeof e&&(this[s+1]=null===i?e:c.domainBind(i,e))}return this._setLength(o+1),o},Promise.prototype._proxy=function(t,e){this._addCallbacks(void 0,void 0,e,t,null)},Promise.prototype._resolveCallback=function(t,e){if(0==(117506048&this._bitField)){if(t===this)return this._rejectCallback(i(),!1);var n=m(t,this);if(!(n instanceof Promise))return this._fulfill(t);e&&this._propagateFrom(n,2);var r=n._target();if(r!==this){var o=r._bitField;if(0==(50397184&o)){var s=this._length();s>0&&r._migrateCallback0(this);for(var a=1;a<s;++a)r._migrateCallbackAt(this,a);this._setFollowing(),this._setLength(0),this._setFollowee(r)}else if(0!=(33554432&o))this._fulfill(r._value());else if(0!=(16777216&o))this._reject(r._reason());else{var c=new d("late cancellation observer");r._attachExtraTrace(c),this._reject(c)}}else this._reject(i())}},Promise.prototype._rejectCallback=function(t,e,n){var r=c.ensureErrorObject(t),i=r===t;if(!i&&!n&&S.warnings()){var o="a promise was rejected with a non-error: "+c.classString(t);this._warn(o,!0)}this._attachExtraTrace(r,!!e&&i),this._reject(t)},Promise.prototype._resolveFromExecutor=function(t){if(t!==_){var e=this;this._captureStackTrace(),this._pushContext();var n=!0,r=this._execute(t,function(t){e._resolveCallback(t)},function(t){e._rejectCallback(t,n)});n=!1,this._popContext(),void 0!==r&&e._rejectCallback(r,!0)}},Promise.prototype._settlePromiseFromHandler=function(t,e,n,r){var i=r._bitField;if(0==(65536&i)){r._pushContext();var o;e===v?n&&"number"==typeof n.length?o=x(t).apply(this._boundValue(),n):(o=k).e=new p("cannot .spread() a non-array: "+c.classString(n)):o=x(t).call(e,n);var s=r._popContext();0==(65536&(i=r._bitField))&&(o===y?r._reject(n):o===k?r._rejectCallback(o.e,!1):(S.checkForgottenReturns(o,s,"",r,this),r._resolveCallback(o)))}},Promise.prototype._target=function(){for(var t=this;t._isFollowing();)t=t._followee();return t},Promise.prototype._followee=function(){return this._rejectionHandler0},Promise.prototype._setFollowee=function(t){this._rejectionHandler0=t},Promise.prototype._settlePromise=function(t,e,n,r){var i=t instanceof Promise,s=this._bitField,a=0!=(134217728&s);0!=(65536&s)?(i&&t._invokeInternalOnCancel(),n instanceof w&&n.isFinallyHandler()?(n.cancelPromise=t,x(e).call(n,r)===k&&t._reject(k.e)):e===o?t._fulfill(o.call(n)):n instanceof Proxyable?n._promiseCancelled(t):i||t instanceof g?t._cancel():n.cancel()):"function"==typeof e?i?(a&&t._setAsyncGuaranteed(),this._settlePromiseFromHandler(e,n,r,t)):e.call(n,r,t):n instanceof Proxyable?n._isResolved()||(0!=(33554432&s)?n._promiseFulfilled(r,t):n._promiseRejected(r,t)):i&&(a&&t._setAsyncGuaranteed(),0!=(33554432&s)?t._fulfill(r):t._reject(r))},Promise.prototype._settlePromiseLateCancellationObserver=function(t){var e=t.handler,n=t.promise,r=t.receiver,i=t.value;"function"==typeof e?n instanceof Promise?this._settlePromiseFromHandler(e,r,i,n):e.call(r,i,n):n instanceof Promise&&n._reject(i)},Promise.prototype._settlePromiseCtx=function(t){this._settlePromise(t.promise,t.handler,t.receiver,t.value)},Promise.prototype._settlePromise0=function(t,e,n){var r=this._promise0,i=this._receiverAt(0);this._promise0=void 0,this._receiver0=void 0,this._settlePromise(r,t,i,e)},Promise.prototype._clearCallbackDataAtIndex=function(t){var e=4*t-4;this[e+2]=this[e+3]=this[e+0]=this[e+1]=void 0},Promise.prototype._fulfill=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(t===this){var n=i();return this._attachExtraTrace(n),this._reject(n)}this._setFulfilled(),this._rejectionHandler0=t,(65535&e)>0&&(0!=(134217728&e)?this._settlePromises():h.settlePromises(this))}},Promise.prototype._reject=function(t){var e=this._bitField;if(!((117506048&e)>>>16)){if(this._setRejected(),this._fulfillmentHandler0=t,this._isFinal())return h.fatalError(t,c.isNode);(65535&e)>0?h.settlePromises(this):this._ensurePossibleRejectionHandled()}},Promise.prototype._fulfillPromises=function(t,e){for(var n=1;n<t;n++){var r=this._fulfillmentHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},Promise.prototype._rejectPromises=function(t,e){for(var n=1;n<t;n++){var r=this._rejectionHandlerAt(n),i=this._promiseAt(n),o=this._receiverAt(n);this._clearCallbackDataAtIndex(n),this._settlePromise(i,r,o,e)}},Promise.prototype._settlePromises=function(){var t=this._bitField,e=65535&t;if(e>0){if(0!=(16842752&t)){var n=this._fulfillmentHandler0;this._settlePromise0(this._rejectionHandler0,n,t),this._rejectPromises(e,n)}else{var r=this._rejectionHandler0;this._settlePromise0(this._fulfillmentHandler0,r,t),this._fulfillPromises(e,r)}this._setLength(0)}this._clearCancellationData()},Promise.prototype._settledValue=function(){var t=this._bitField;return 0!=(33554432&t)?this._rejectionHandler0:0!=(16777216&t)?this._fulfillmentHandler0:void 0},Promise.defer=Promise.pending=function(){return S.deprecated("Promise.defer","new Promise"),{promise:new Promise(_),resolve:deferResolve,reject:deferReject}},c.notEnumerableProp(Promise,"_makeSelfResolutionError",i),e("./method")(Promise,_,m,s,S),e("./bind")(Promise,_,m,S),e("./cancel")(Promise,g,s,S),e("./direct_resolve")(Promise),e("./synchronous_inspection")(Promise),e("./join")(Promise,g,m,_,h,r),Promise.Promise=Promise,Promise.version="3.5.0",e("./map.js")(Promise,g,s,m,_,S),e("./call_get.js")(Promise),e("./using.js")(Promise,s,m,P,_,S),e("./timers.js")(Promise,_,S),e("./generators.js")(Promise,s,_,m,Proxyable,S),e("./nodeify.js")(Promise),e("./promisify.js")(Promise,_),e("./props.js")(Promise,g,m,s),e("./race.js")(Promise,_,m,s),e("./reduce.js")(Promise,g,s,m,_,S),e("./settle.js")(Promise,g,S),e("./some.js")(Promise,g,s),e("./filter.js")(Promise,_),e("./each.js")(Promise,_),e("./any.js")(Promise),c.toFastProperties(Promise),c.toFastProperties(Promise.prototype),fillTypes({a:1}),fillTypes({b:2}),fillTypes({c:3}),fillTypes(1),fillTypes(function(){}),fillTypes(void 0),fillTypes(!1),fillTypes(new Promise(_)),S.setBounds(l.firstLineError,c.lastLineError),Promise}},{"./any.js":1,"./async":2,"./bind":3,"./call_get.js":5,"./cancel":6,"./catch_filter":7,"./context":8,"./debuggability":9,"./direct_resolve":10,"./each.js":11,"./errors":12,"./es5":13,"./filter.js":14,"./finally":15,"./generators.js":16,"./join":17,"./map.js":18,"./method":19,"./nodeback":20,"./nodeify.js":21,"./promise_array":23,"./promisify.js":24,"./props.js":25,"./race.js":27,"./reduce.js":28,"./settle.js":30,"./some.js":31,"./synchronous_inspection":32,"./thenables":33,"./timers.js":34,"./using.js":35,"./util":36}],23:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o){function toResolutionValue(t){switch(t){case-2:return[];case-3:return{};case-6:return new Map}}function PromiseArray(t){var r=this._promise=new e(n);t instanceof e&&r._propagateFrom(t,3),r._setOnCancel(this),this._values=t,this._length=0,this._totalResolved=0,this._init(void 0,-2)}var s=t("./util");s.isArray;return s.inherits(PromiseArray,o),PromiseArray.prototype.length=function(){return this._length},PromiseArray.prototype.promise=function(){return this._promise},PromiseArray.prototype._init=function init(t,n){var o=r(this._values,this._promise);if(o instanceof e){var a=(o=o._target())._bitField;if(this._values=o,0==(50397184&a))return this._promise._setAsyncGuaranteed(),o._then(init,this._reject,void 0,this,n);if(0==(33554432&a))return 0!=(16777216&a)?this._reject(o._reason()):this._cancel();o=o._value()}if(null!==(o=s.asArray(o)))0!==o.length?this._iterate(o):-5===n?this._resolveEmptyArray():this._resolve(toResolutionValue(n));else{var c=i("expecting an array or an iterable object but got "+s.classString(o)).reason();this._promise._rejectCallback(c,!1)}},PromiseArray.prototype._iterate=function(t){var n=this.getActualLength(t.length);this._length=n,this._values=this.shouldCopyValues()?new Array(n):this._values;for(var i=this._promise,o=!1,s=null,a=0;a<n;++a){var c=r(t[a],i);s=c instanceof e?(c=c._target())._bitField:null,o?null!==s&&c.suppressUnhandledRejections():null!==s?0==(50397184&s)?(c._proxy(this,a),this._values[a]=c):o=0!=(33554432&s)?this._promiseFulfilled(c._value(),a):0!=(16777216&s)?this._promiseRejected(c._reason(),a):this._promiseCancelled(a):o=this._promiseFulfilled(c,a)}o||i._setAsyncGuaranteed()},PromiseArray.prototype._isResolved=function(){return null===this._values},PromiseArray.prototype._resolve=function(t){this._values=null,this._promise._fulfill(t)},PromiseArray.prototype._cancel=function(){!this._isResolved()&&this._promise._isCancellable()&&(this._values=null,this._promise._cancel())},PromiseArray.prototype._reject=function(t){this._values=null,this._promise._rejectCallback(t,!1)},PromiseArray.prototype._promiseFulfilled=function(t,e){return this._values[e]=t,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},PromiseArray.prototype._promiseCancelled=function(){return this._cancel(),!0},PromiseArray.prototype._promiseRejected=function(t){return this._totalResolved++,this._reject(t),!0},PromiseArray.prototype._resultCancelled=function(){if(!this._isResolved()){var t=this._values;if(this._cancel(),t instanceof e)t.cancel();else for(var n=0;n<t.length;++n)t[n]instanceof e&&t[n].cancel()}},PromiseArray.prototype.shouldCopyValues=function(){return!0},PromiseArray.prototype.getActualLength=function(t){return t},PromiseArray}},{"./util":36}],24:[function(t,e,n){"use strict";e.exports=function(e,n){function propsFilter(t){return!p.test(t)}function isPromisified(t){try{return!0===t.__isPromisified__}catch(t){return!1}}function hasPromisified(t,e,n){var r=o.getDataPropertyOrDefault(t,e+n,h);return!!r&&isPromisified(r)}function checkValid(t,e,n){for(var r=0;r<t.length;r+=2){var i=t[r];if(n.test(i))for(var o=i.replace(n,""),s=0;s<t.length;s+=2)if(t[s]===o)throw new l("Cannot promisify an API that has normal methods with '%s'-suffix\n\n    See http://goo.gl/MqrFmX\n".replace("%s",e))}}function promisifiableMethods(t,e,n,r){for(var i=o.inheritedDataKeys(t),s=[],a=0;a<i.length;++a){var c=i[a],u=t[c],l=r===d||d(c,u,t);"function"!=typeof u||isPromisified(u)||hasPromisified(t,c,e)||!r(c,u,t,l)||s.push(c,u)}return checkValid(s,e,n),s}function promisifyAll(t,e,n,r,s){for(var a=new RegExp(_(e)+"$"),c=promisifiableMethods(t,e,a,n),u=0,l=c.length;u<l;u+=2){var h=c[u],f=c[u+1],p=h+e;if(r===v)t[p]=v(h,i,h,f,e,s);else{var d=r(f,function(){return v(h,i,h,f,e,s)});o.notEnumerableProp(d,"__isPromisified__",!0),t[p]=d}}return o.toFastProperties(t),t}function promisify(t,e,n){return v(t,e,void 0,t,null,n)}var r,i={},o=t("./util"),s=t("./nodeback"),a=o.withAppended,c=o.maybeWrapAsError,u=o.canEvaluate,l=t("./errors").TypeError,h={__isPromisified__:!0},f=["arity","length","name","arguments","caller","callee","prototype","__isPromisified__"],p=new RegExp("^(?:"+f.join("|")+")$"),d=function(t){return o.isIdentifier(t)&&"_"!==t.charAt(0)&&"constructor"!==t},_=function(t){return t.replace(/([$])/,"\\$")},v=u?r:function(t,r,u,l,h,f){function promisified(){var o=r;r===i&&(o=this);var u=new e(n);u._captureStackTrace();var l="string"==typeof d&&this!==p?this[d]:t,h=s(u,f);try{l.apply(o,a(arguments,h))}catch(t){u._rejectCallback(c(t),!0,!0)}return u._isFateSealed()||u._setAsyncGuaranteed(),u}var p=function(){return this}(),d=t;return"string"==typeof d&&(t=l),o.notEnumerableProp(promisified,"__isPromisified__",!0),promisified};e.promisify=function(t,e){if("function"!=typeof t)throw new l("expecting a function but got "+o.classString(t));if(isPromisified(t))return t;var n=promisify(t,void 0===(e=Object(e)).context?i:e.context,!!e.multiArgs);return o.copyDescriptors(t,n,propsFilter),n},e.promisifyAll=function(t,e){if("function"!=typeof t&&"object"!=typeof t)throw new l("the target of promisifyAll must be an object or a function\n\n    See http://goo.gl/MqrFmX\n");var n=!!(e=Object(e)).multiArgs,r=e.suffix;"string"!=typeof r&&(r="Async");var i=e.filter;"function"!=typeof i&&(i=d);var s=e.promisifier;if("function"!=typeof s&&(s=v),!o.isIdentifier(r))throw new RangeError("suffix must be a valid identifier\n\n    See http://goo.gl/MqrFmX\n");for(var a=o.inheritedDataKeys(t),c=0;c<a.length;++c){var u=t[a[c]];"constructor"!==a[c]&&o.isClass(u)&&(promisifyAll(u.prototype,r,i,s,n),promisifyAll(u,r,i,s,n))}return promisifyAll(t,r,i,s,n)}}},{"./errors":12,"./nodeback":20,"./util":36}],25:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function PropertiesPromiseArray(t){var e,n=!1;if(void 0!==o&&t instanceof o)e=u(t),n=!0;else{var r=c.keys(t),i=r.length;e=new Array(2*i);for(var s=0;s<i;++s){var a=r[s];e[s]=t[a],e[s+i]=a}}this.constructor$(e),this._isMap=n,this._init$(void 0,n?-6:-3)}function props(t){var n,o=r(t);return a(o)?(n=o instanceof e?o._then(e.props,void 0,void 0,void 0,void 0):new PropertiesPromiseArray(o).promise(),o instanceof e&&n._propagateFrom(o,2),n):i("cannot await properties of a non-object\n\n    See http://goo.gl/MqrFmX\n")}var o,s=t("./util"),a=s.isObject,c=t("./es5");"function"==typeof Map&&(o=Map);var u=function(){function extractEntry(n,r){this[t]=n,this[t+e]=r,t++}var t=0,e=0;return function(n){e=n.size,t=0;var r=new Array(2*n.size);return n.forEach(extractEntry,r),r}}(),l=function(t){for(var e=new o,n=t.length/2|0,r=0;r<n;++r){var i=t[n+r],s=t[r];e.set(i,s)}return e};s.inherits(PropertiesPromiseArray,n),PropertiesPromiseArray.prototype._init=function(){},PropertiesPromiseArray.prototype._promiseFulfilled=function(t,e){if(this._values[e]=t,++this._totalResolved>=this._length){var n;if(this._isMap)n=l(this._values);else{n={};for(var r=this.length(),i=0,o=this.length();i<o;++i)n[this._values[i+r]]=this._values[i]}return this._resolve(n),!0}return!1},PropertiesPromiseArray.prototype.shouldCopyValues=function(){return!1},PropertiesPromiseArray.prototype.getActualLength=function(t){return t>>1},e.prototype.props=function(){return props(this)},e.props=function(t){return props(t)}}},{"./es5":13,"./util":36}],26:[function(t,e,n){"use strict";function arrayMove(t,e,n,r,i){for(var o=0;o<i;++o)n[o+r]=t[o+e],t[o+e]=void 0}function Queue(t){this._capacity=t,this._length=0,this._front=0}Queue.prototype._willBeOverCapacity=function(t){return this._capacity<t},Queue.prototype._pushOne=function(t){var e=this.length();this._checkCapacity(e+1),this[this._front+e&this._capacity-1]=t,this._length=e+1},Queue.prototype.push=function(t,e,n){var r=this.length()+3;if(this._willBeOverCapacity(r))return this._pushOne(t),this._pushOne(e),void this._pushOne(n);var i=this._front+r-3;this._checkCapacity(r);var o=this._capacity-1;this[i+0&o]=t,this[i+1&o]=e,this[i+2&o]=n,this._length=r},Queue.prototype.shift=function(){var t=this._front,e=this[t];return this[t]=void 0,this._front=t+1&this._capacity-1,this._length--,e},Queue.prototype.length=function(){return this._length},Queue.prototype._checkCapacity=function(t){this._capacity<t&&this._resizeTo(this._capacity<<1)},Queue.prototype._resizeTo=function(t){var e=this._capacity;this._capacity=t,arrayMove(this,0,this,e,this._front+this._length&e-1)},e.exports=Queue},{}],27:[function(t,e,n){"use strict";e.exports=function(e,n,r,i){function race(t,a){var c=r(t);if(c instanceof e)return s(c);if(null===(t=o.asArray(t)))return i("expecting an array or an iterable object but got "+o.classString(t));var u=new e(n);void 0!==a&&u._propagateFrom(a,3);for(var l=u._fulfill,h=u._reject,f=0,p=t.length;f<p;++f){var d=t[f];(void 0!==d||f in t)&&e.cast(d)._then(l,h,void 0,u,null)}return u}var o=t("./util"),s=function(t){return t.then(function(e){return race(e,t)})};e.race=function(t){return race(t,void 0)},e.prototype.race=function(){return race(this,void 0)}}},{"./util":36}],28:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function ReductionPromiseArray(t,n,r,i){this.constructor$(t);var s=a();this._fn=null===s?n:c.domainBind(s,n),void 0!==r&&(r=e.resolve(r))._attachCancellationCallback(this),this._initialValue=r,this._currentCancellable=null,this._eachValues=i===o?Array(this._length):0===i?null:void 0,this._promise._captureStackTrace(),this._init$(void 0,-5)}function completed(t,e){this.isFulfilled()?e._resolve(t):e._reject(t)}function reduce(t,e,n,i){return"function"!=typeof e?r("expecting a function but got "+c.classString(e)):new ReductionPromiseArray(t,e,n,i).promise()}function gotAccum(t){this.accum=t,this.array._gotAccum(t);var n=i(this.value,this.array._promise);return n instanceof e?(this.array._currentCancellable=n,n._then(gotValue,void 0,void 0,this,void 0)):gotValue.call(this,n)}function gotValue(t){var n=this.array,r=n._promise,i=u(n._fn);r._pushContext();var o;(o=void 0!==n._eachValues?i.call(r._boundValue(),t,this.index,this.length):i.call(r._boundValue(),this.accum,t,this.index,this.length))instanceof e&&(n._currentCancellable=o);var a=r._popContext();return s.checkForgottenReturns(o,a,void 0!==n._eachValues?"Promise.each":"Promise.reduce",r),o}var a=e._getDomain,c=t("./util"),u=c.tryCatch;c.inherits(ReductionPromiseArray,n),ReductionPromiseArray.prototype._gotAccum=function(t){void 0!==this._eachValues&&null!==this._eachValues&&t!==o&&this._eachValues.push(t)},ReductionPromiseArray.prototype._eachComplete=function(t){return null!==this._eachValues&&this._eachValues.push(t),this._eachValues},ReductionPromiseArray.prototype._init=function(){},ReductionPromiseArray.prototype._resolveEmptyArray=function(){this._resolve(void 0!==this._eachValues?this._eachValues:this._initialValue)},ReductionPromiseArray.prototype.shouldCopyValues=function(){return!1},ReductionPromiseArray.prototype._resolve=function(t){this._promise._resolveCallback(t),this._values=null},ReductionPromiseArray.prototype._resultCancelled=function(t){if(t===this._initialValue)return this._cancel();this._isResolved()||(this._resultCancelled$(),this._currentCancellable instanceof e&&this._currentCancellable.cancel(),this._initialValue instanceof e&&this._initialValue.cancel())},ReductionPromiseArray.prototype._iterate=function(t){this._values=t;var n,r,i=t.length;if(void 0!==this._initialValue?(n=this._initialValue,r=0):(n=e.resolve(t[0]),r=1),this._currentCancellable=n,!n.isRejected())for(;r<i;++r){var o={accum:null,value:t[r],index:r,length:i,array:this};n=n._then(gotAccum,void 0,void 0,o,void 0)}void 0!==this._eachValues&&(n=n._then(this._eachComplete,void 0,void 0,this,void 0)),n._then(completed,completed,void 0,n,this)},e.prototype.reduce=function(t,e){return reduce(this,t,e,null)},e.reduce=function(t,e,n,r){return reduce(t,e,n,r)}}},{"./util":36}],29:[function(e,n,i){"use strict";var o,s=e("./util"),a=s.getNativePromise();if(s.isNode&&"undefined"==typeof MutationObserver){var c=r.setImmediate,u=t.nextTick;o=s.isRecentNode?function(t){c.call(r,t)}:function(e){u.call(t,e)}}else if("function"==typeof a&&"function"==typeof a.resolve){var l=a.resolve();o=function(t){l.then(t)}}else o="undefined"==typeof MutationObserver||"undefined"!=typeof window&&window.navigator&&(window.navigator.standalone||window.cordova)?"undefined"!=typeof setImmediate?function(t){setImmediate(t)}:"undefined"!=typeof setTimeout?function(t){setTimeout(t,0)}:function(){throw new Error("No async scheduler available\n\n    See http://goo.gl/MqrFmX\n")}:function(){var t=document.createElement("div"),e={attributes:!0},n=!1,r=document.createElement("div");new MutationObserver(function(){t.classList.toggle("foo"),n=!1}).observe(r,e);var i=function(){n||(n=!0,r.classList.toggle("foo"))};return function(n){var r=new MutationObserver(function(){r.disconnect(),n()});r.observe(t,e),i()}}();n.exports=o},{"./util":36}],30:[function(t,e,n){"use strict";e.exports=function(e,n,r){function SettledPromiseArray(t){this.constructor$(t)}var i=e.PromiseInspection;t("./util").inherits(SettledPromiseArray,n),SettledPromiseArray.prototype._promiseResolved=function(t,e){return this._values[t]=e,++this._totalResolved>=this._length&&(this._resolve(this._values),!0)},SettledPromiseArray.prototype._promiseFulfilled=function(t,e){var n=new i;return n._bitField=33554432,n._settledValueField=t,this._promiseResolved(e,n)},SettledPromiseArray.prototype._promiseRejected=function(t,e){var n=new i;return n._bitField=16777216,n._settledValueField=t,this._promiseResolved(e,n)},e.settle=function(t){return r.deprecated(".settle()",".reflect()"),new SettledPromiseArray(t).promise()},e.prototype.settle=function(){return e.settle(this)}}},{"./util":36}],31:[function(t,e,n){"use strict";e.exports=function(e,n,r){function SomePromiseArray(t){this.constructor$(t),this._howMany=0,this._unwrap=!1,this._initialized=!1}function some(t,e){if((0|e)!==e||e<0)return r("expecting a positive integer\n\n    See http://goo.gl/MqrFmX\n");var n=new SomePromiseArray(t),i=n.promise();return n.setHowMany(e),n.init(),i}var i=t("./util"),o=t("./errors").RangeError,s=t("./errors").AggregateError,a=i.isArray,c={};i.inherits(SomePromiseArray,n),SomePromiseArray.prototype._init=function(){if(this._initialized)if(0!==this._howMany){this._init$(void 0,-5);var t=a(this._values);!this._isResolved()&&t&&this._howMany>this._canPossiblyFulfill()&&this._reject(this._getRangeError(this.length()))}else this._resolve([])},SomePromiseArray.prototype.init=function(){this._initialized=!0,this._init()},SomePromiseArray.prototype.setUnwrap=function(){this._unwrap=!0},SomePromiseArray.prototype.howMany=function(){return this._howMany},SomePromiseArray.prototype.setHowMany=function(t){this._howMany=t},SomePromiseArray.prototype._promiseFulfilled=function(t){return this._addFulfilled(t),this._fulfilled()===this.howMany()&&(this._values.length=this.howMany(),1===this.howMany()&&this._unwrap?this._resolve(this._values[0]):this._resolve(this._values),!0)},SomePromiseArray.prototype._promiseRejected=function(t){return this._addRejected(t),this._checkOutcome()},SomePromiseArray.prototype._promiseCancelled=function(){return this._values instanceof e||null==this._values?this._cancel():(this._addRejected(c),this._checkOutcome())},SomePromiseArray.prototype._checkOutcome=function(){if(this.howMany()>this._canPossiblyFulfill()){for(var t=new s,e=this.length();e<this._values.length;++e)this._values[e]!==c&&t.push(this._values[e]);return t.length>0?this._reject(t):this._cancel(),!0}return!1},SomePromiseArray.prototype._fulfilled=function(){return this._totalResolved},SomePromiseArray.prototype._rejected=function(){return this._values.length-this.length()},SomePromiseArray.prototype._addRejected=function(t){this._values.push(t)},SomePromiseArray.prototype._addFulfilled=function(t){this._values[this._totalResolved++]=t},SomePromiseArray.prototype._canPossiblyFulfill=function(){return this.length()-this._rejected()},SomePromiseArray.prototype._getRangeError=function(t){var e="Input array must contain at least "+this._howMany+" items but contains only "+t+" items";return new o(e)},SomePromiseArray.prototype._resolveEmptyArray=function(){this._reject(this._getRangeError(0))},e.some=function(t,e){return some(t,e)},e.prototype.some=function(t){return some(this,t)},e._SomePromiseArray=SomePromiseArray}},{"./errors":12,"./util":36}],32:[function(t,e,n){"use strict";e.exports=function(t){function PromiseInspection(t){void 0!==t?(t=t._target(),this._bitField=t._bitField,this._settledValueField=t._isFateSealed()?t._settledValue():void 0):(this._bitField=0,this._settledValueField=void 0)}PromiseInspection.prototype._settledValue=function(){return this._settledValueField};var e=PromiseInspection.prototype.value=function(){if(!this.isFulfilled())throw new TypeError("cannot get fulfillment value of a non-fulfilled promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},n=PromiseInspection.prototype.error=PromiseInspection.prototype.reason=function(){if(!this.isRejected())throw new TypeError("cannot get rejection reason of a non-rejected promise\n\n    See http://goo.gl/MqrFmX\n");return this._settledValue()},r=PromiseInspection.prototype.isFulfilled=function(){return 0!=(33554432&this._bitField)},i=PromiseInspection.prototype.isRejected=function(){return 0!=(16777216&this._bitField)},o=PromiseInspection.prototype.isPending=function(){return 0==(50397184&this._bitField)},s=PromiseInspection.prototype.isResolved=function(){return 0!=(50331648&this._bitField)};PromiseInspection.prototype.isCancelled=function(){return 0!=(8454144&this._bitField)},t.prototype.__isCancelled=function(){return 65536==(65536&this._bitField)},t.prototype._isCancelled=function(){return this._target().__isCancelled()},t.prototype.isCancelled=function(){return 0!=(8454144&this._target()._bitField)},t.prototype.isPending=function(){return o.call(this._target())},t.prototype.isRejected=function(){return i.call(this._target())},t.prototype.isFulfilled=function(){return r.call(this._target())},t.prototype.isResolved=function(){return s.call(this._target())},t.prototype.value=function(){return e.call(this._target())},t.prototype.reason=function(){var t=this._target();return t._unsetRejectionIsUnhandled(),n.call(t)},t.prototype._value=function(){return this._settledValue()},t.prototype._reason=function(){return this._unsetRejectionIsUnhandled(),this._settledValue()},t.PromiseInspection=PromiseInspection}},{}],33:[function(t,e,n){"use strict";e.exports=function(e,n){function doGetThen(t){return t.then}function getThen(t){try{return doGetThen(t)}catch(t){return i.e=t,i}}function isAnyBluebirdPromise(t){try{return s.call(t,"_promise0")}catch(t){return!1}}function doThenable(t,o,s){var a=new e(n),c=a;s&&s._pushContext(),a._captureStackTrace(),s&&s._popContext();var u=!0,l=r.tryCatch(o).call(t,function(t){a&&(a._resolveCallback(t),a=null)},function(t){a&&(a._rejectCallback(t,u,!0),a=null)});return u=!1,a&&l===i&&(a._rejectCallback(l.e,!0,!0),a=null),c}var r=t("./util"),i=r.errorObj,o=r.isObject,s={}.hasOwnProperty;return function(t,r){if(o(t)){if(t instanceof e)return t;var s=getThen(t);if(s===i)return r&&r._pushContext(),a=e.reject(s.e),r&&r._popContext(),a;if("function"==typeof s){if(isAnyBluebirdPromise(t)){var a=new e(n);return t._then(a._fulfill,a._reject,void 0,a,null),a}return doThenable(t,s,r)}}return t}}},{"./util":36}],34:[function(t,e,n){"use strict";e.exports=function(e,n,r){function HandleWrapper(t){this.handle=t}function successClear(t){return clearTimeout(this.handle),t}function failureClear(t){throw clearTimeout(this.handle),t}var i=t("./util"),o=e.TimeoutError;HandleWrapper.prototype._resultCancelled=function(){clearTimeout(this.handle)};var s=function(t){return a(+this).thenReturn(t)},a=e.delay=function(t,i){var o,a;return void 0!==i?(o=e.resolve(i)._then(s,null,null,t,void 0),r.cancellation()&&i instanceof e&&o._setOnCancel(i)):(o=new e(n),a=setTimeout(function(){o._fulfill()},+t),r.cancellation()&&o._setOnCancel(new HandleWrapper(a)),o._captureStackTrace()),o._setAsyncGuaranteed(),o};e.prototype.delay=function(t){return a(t,this)};var c=function(t,e,n){var r;r="string"!=typeof e?e instanceof Error?e:new o("operation timed out"):new o(e),i.markAsOriginatingFromRejection(r),t._attachExtraTrace(r),t._reject(r),null!=n&&n.cancel()};e.prototype.timeout=function(t,e){t=+t;var n,i,o=new HandleWrapper(setTimeout(function(){n.isPending()&&c(n,e,i)},t));return r.cancellation()?(i=this.then(),(n=i._then(successClear,failureClear,void 0,o,void 0))._setOnCancel(o)):n=this._then(successClear,failureClear,void 0,o,void 0),n}}},{"./util":36}],35:[function(t,e,n){"use strict";e.exports=function(e,n,r,i,o,s){function thrower(t){setTimeout(function(){throw t},0)}function castPreservingDisposable(t){var e=r(t);return e!==t&&"function"==typeof t._isDisposable&&"function"==typeof t._getDisposer&&t._isDisposable()&&e._setDisposable(t._getDisposer()),e}function dispose(t,n){function iterator(){if(i>=s)return a._fulfill();var o=castPreservingDisposable(t[i++]);if(o instanceof e&&o._isDisposable()){try{o=r(o._getDisposer().tryDispose(n),t.promise)}catch(t){return thrower(t)}if(o instanceof e)return o._then(iterator,thrower,null,null,null)}iterator()}var i=0,s=t.length,a=new e(o);return iterator(),a}function Disposer(t,e,n){this._data=t,this._promise=e,this._context=n}function FunctionDisposer(t,e,n){this.constructor$(t,e,n)}function maybeUnwrapDisposer(t){return Disposer.isDisposer(t)?(this.resources[this.index]._setDisposable(t),t.promise()):t}function ResourceList(t){this.length=t,this.promise=null,this[t-1]=null}var a=t("./util"),c=t("./errors").TypeError,u=t("./util").inherits,l=a.errorObj,h=a.tryCatch,f={};Disposer.prototype.data=function(){return this._data},Disposer.prototype.promise=function(){return this._promise},Disposer.prototype.resource=function(){return this.promise().isFulfilled()?this.promise().value():f},Disposer.prototype.tryDispose=function(t){var e=this.resource(),n=this._context;void 0!==n&&n._pushContext();var r=e!==f?this.doDispose(e,t):null;return void 0!==n&&n._popContext(),this._promise._unsetDisposable(),this._data=null,r},Disposer.isDisposer=function(t){return null!=t&&"function"==typeof t.resource&&"function"==typeof t.tryDispose},u(FunctionDisposer,Disposer),FunctionDisposer.prototype.doDispose=function(t,e){return this.data().call(t,t,e)},ResourceList.prototype._resultCancelled=function(){for(var t=this.length,n=0;n<t;++n){var r=this[n];r instanceof e&&r.cancel()}},e.using=function(){var t=arguments.length;if(t<2)return n("you must pass at least 2 arguments to Promise.using");var i=arguments[t-1];if("function"!=typeof i)return n("expecting a function but got "+a.classString(i));var o,c=!0;2===t&&Array.isArray(arguments[0])?(t=(o=arguments[0]).length,c=!1):(o=arguments,t--);for(var u=new ResourceList(t),f=0;f<t;++f){var p=o[f];if(Disposer.isDisposer(p)){var d=p;(p=p.promise())._setDisposable(d)}else{var _=r(p);_ instanceof e&&(p=_._then(maybeUnwrapDisposer,null,null,{resources:u,index:f},void 0))}u[f]=p}for(var v=new Array(u.length),f=0;f<v.length;++f)v[f]=e.resolve(u[f]).reflect();var y=e.all(v).then(function(t){for(var e=0;e<t.length;++e){var n=t[e];if(n.isRejected())return l.e=n.error(),l;if(!n.isFulfilled())return void y.cancel();t[e]=n.value()}m._pushContext(),i=h(i);var r=c?i.apply(void 0,t):i(t),o=m._popContext();return s.checkForgottenReturns(r,o,"Promise.using",m),r}),m=y.lastly(function(){var t=new e.PromiseInspection(y);return dispose(u,t)});return u.promise=m,m._setOnCancel(u),m},e.prototype._setDisposable=function(t){this._bitField=131072|this._bitField,this._disposer=t},e.prototype._isDisposable=function(){return(131072&this._bitField)>0},e.prototype._getDisposer=function(){return this._disposer},e.prototype._unsetDisposable=function(){this._bitField=-131073&this._bitField,this._disposer=void 0},e.prototype.disposer=function(t){if("function"==typeof t)return new FunctionDisposer(t,this,i());throw new c}}},{"./errors":12,"./util":36}],36:[function(e,n,i){"use strict";function tryCatcher(){try{var t=c;return c=null,t.apply(this,arguments)}catch(t){return a.e=t,a}}function tryCatch(t){return c=t,tryCatcher}function isPrimitive(t){return null==t||!0===t||!1===t||"string"==typeof t||"number"==typeof t}function isObject(t){return"function"==typeof t||"object"==typeof t&&null!==t}function maybeWrapAsError(t){return isPrimitive(t)?new Error(safeToString(t)):t}function withAppended(t,e){var n,r=t.length,i=new Array(r+1);for(n=0;n<r;++n)i[n]=t[n];return i[n]=e,i}function getDataPropertyOrDefault(t,e,n){if(!o.isES5)return{}.hasOwnProperty.call(t,e)?t[e]:void 0;var r=Object.getOwnPropertyDescriptor(t,e);return null!=r?null==r.get&&null==r.set?r.value:n:void 0}function notEnumerableProp(t,e,n){if(isPrimitive(t))return t;var r={value:n,configurable:!0,enumerable:!1,writable:!0};return o.defineProperty(t,e,r),t}function thrower(t){throw t}function isClass(t){try{if("function"==typeof t){var e=o.names(t.prototype),n=o.isES5&&e.length>1,r=e.length>0&&!(1===e.length&&"constructor"===e[0]),i=f.test(t+"")&&o.names(t).length>0;if(n||r||i)return!0}return!1}catch(t){return!1}}function toFastProperties(t){function FakeConstructor(){}FakeConstructor.prototype=t;for(var e=8;e--;)new FakeConstructor;return t}function isIdentifier(t){return p.test(t)}function filledRange(t,e,n){for(var r=new Array(t),i=0;i<t;++i)r[i]=e+i+n;return r}function safeToString(t){try{return t+""}catch(t){return"[no string representation]"}}function isError(t){return null!==t&&"object"==typeof t&&"string"==typeof t.message&&"string"==typeof t.name}function markAsOriginatingFromRejection(t){try{notEnumerableProp(t,"isOperational",!0)}catch(t){}}function originatesFromRejection(t){return null!=t&&(t instanceof Error.__BluebirdErrorTypes__.OperationalError||!0===t.isOperational)}function canAttachTrace(t){return isError(t)&&o.propertyIsWritable(t,"stack")}function classString(t){return{}.toString.call(t)}function copyDescriptors(t,e,n){for(var r=o.names(t),i=0;i<r.length;++i){var s=r[i];if(n(s))try{o.defineProperty(e,s,o.getDescriptor(t,s))}catch(t){}}}function env(e){return m?t.env[e]:void 0}function getNativePromise(){if("function"==typeof Promise)try{var t=new Promise(function(){});if("[object Promise]"==={}.toString.call(t))return Promise}catch(t){}}function domainBind(t,e){return t.bind(e)}var o=e("./es5"),s="undefined"==typeof navigator,a={e:{}},c,u="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==r?r:void 0!==this?this:null,l=function(t,e){function T(){this.constructor=t,this.constructor$=e;for(var r in e.prototype)n.call(e.prototype,r)&&"$"!==r.charAt(r.length-1)&&(this[r+"$"]=e.prototype[r])}var n={}.hasOwnProperty;return T.prototype=e.prototype,t.prototype=new T,t.prototype},h=function(){var t=[Array.prototype,Object.prototype,Function.prototype],e=function(e){for(var n=0;n<t.length;++n)if(t[n]===e)return!0;return!1};if(o.isES5){var n=Object.getOwnPropertyNames;return function(t){for(var r=[],i=Object.create(null);null!=t&&!e(t);){var s;try{s=n(t)}catch(t){return r}for(var a=0;a<s.length;++a){var c=s[a];if(!i[c]){i[c]=!0;var u=Object.getOwnPropertyDescriptor(t,c);null!=u&&null==u.get&&null==u.set&&r.push(c)}}t=o.getPrototypeOf(t)}return r}}var r={}.hasOwnProperty;return function(n){if(e(n))return[];var i=[];t:for(var o in n)if(r.call(n,o))i.push(o);else{for(var s=0;s<t.length;++s)if(r.call(t[s],o))continue t;i.push(o)}return i}}(),f=/this\s*\.\s*\S+\s*=/,p=/^[a-z$_][a-z$_0-9]*$/i,d="stack"in new Error?function(t){return canAttachTrace(t)?t:new Error(safeToString(t))}:function(t){if(canAttachTrace(t))return t;try{throw new Error(safeToString(t))}catch(t){return t}},_=function(t){return o.isArray(t)?t:null};if("undefined"!=typeof Symbol&&Symbol.iterator){var v="function"==typeof Array.from?function(t){return Array.from(t)}:function(t){for(var e,n=[],r=t[Symbol.iterator]();!(e=r.next()).done;)n.push(e.value);return n};_=function(t){return o.isArray(t)?t:null!=t&&"function"==typeof t[Symbol.iterator]?v(t):null}}var y=void 0!==t&&"[object process]"===classString(t).toLowerCase(),m=void 0!==t&&void 0!==t.env,g={isClass:isClass,isIdentifier:isIdentifier,inheritedDataKeys:h,getDataPropertyOrDefault:getDataPropertyOrDefault,thrower:thrower,isArray:o.isArray,asArray:_,notEnumerableProp:notEnumerableProp,isPrimitive:isPrimitive,isObject:isObject,isError:isError,canEvaluate:s,errorObj:a,tryCatch:tryCatch,inherits:l,withAppended:withAppended,maybeWrapAsError:maybeWrapAsError,toFastProperties:toFastProperties,filledRange:filledRange,toString:safeToString,canAttachTrace:canAttachTrace,ensureErrorObject:d,originatesFromRejection:originatesFromRejection,markAsOriginatingFromRejection:markAsOriginatingFromRejection,classString:classString,copyDescriptors:copyDescriptors,hasDevTools:"undefined"!=typeof chrome&&chrome&&"function"==typeof chrome.loadTimes,isNode:y,hasEnvVariables:m,env:env,global:u,getNativePromise:getNativePromise,domainBind:domainBind};g.isRecentNode=g.isNode&&function(){var e=t.versions.node.split(".").map(Number);return 0===e[0]&&e[1]>10||e[0]>0}(),g.isNode&&g.toFastProperties(t);try{throw new Error}catch(t){g.lastLineError=t}n.exports=g},{"./es5":13}]},{},[4])(4)}),"undefined"!=typeof window&&null!==window?window.P=window.Promise:"undefined"!=typeof self&&null!==self&&(self.P=self.Promise)}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{_process:2}],2:[function(t,e,n){function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}function runTimeout(t){if(r===setTimeout)return setTimeout(t,0);if((r===defaultSetTimout||!r)&&setTimeout)return r=setTimeout,setTimeout(t,0);try{return r(t,0)}catch(e){try{return r.call(null,t,0)}catch(e){return r.call(this,t,0)}}}function runClearTimeout(t){if(i===clearTimeout)return clearTimeout(t);if((i===defaultClearTimeout||!i)&&clearTimeout)return i=clearTimeout,clearTimeout(t);try{return i(t)}catch(e){try{return i.call(null,t)}catch(e){return i.call(this,t)}}}function cleanUpNextTick(){c&&s&&(c=!1,s.length?a=s.concat(a):u=-1,a.length&&drainQueue())}function drainQueue(){if(!c){var t=runTimeout(cleanUpNextTick);c=!0;for(var e=a.length;e;){for(s=a,a=[];++u<e;)s&&s[u].run();u=-1,e=a.length}s=null,c=!1,runClearTimeout(t)}}function Item(t,e){this.fun=t,this.array=e}function noop(){}var r,i,o=e.exports={};!function(){try{r="function"==typeof setTimeout?setTimeout:defaultSetTimout}catch(t){r=defaultSetTimout}try{i="function"==typeof clearTimeout?clearTimeout:defaultClearTimeout}catch(t){i=defaultClearTimeout}}();var s,a=[],c=!1,u=-1;o.nextTick=function(t){var e=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)e[n-1]=arguments[n];a.push(new Item(t,e)),1!==a.length||c||runTimeout(drainQueue)},Item.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=noop,o.addListener=noop,o.once=noop,o.off=noop,o.removeListener=noop,o.removeAllListeners=noop,o.emit=noop,o.prependListener=noop,o.prependOnceListener=noop,o.listeners=function(t){return[]},o.binding=function(t){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(t){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},{}],3:[function(t,e,n){(function(){function createReduce(t){function iterator(e,n,r,i,o,s){for(;o>=0&&o<s;o+=t){var a=i?i[o]:o;r=n(r,e[a],a,e)}return r}return function(e,n,r,i){n=y(n,i,4);var o=!C(e)&&v.keys(e),s=(o||e).length,a=t>0?0:s-1;return arguments.length<3&&(r=e[o?o[a]:a],a+=t),iterator(e,n,r,o,a,s)}}function createPredicateIndexFinder(t){return function(e,n,r){n=m(n,r);for(var i=w(e),o=t>0?0:i-1;o>=0&&o<i;o+=t)if(n(e[o],o,e))return o;return-1}}function createIndexFinder(t,e,n){return function(r,i,o){var s=0,a=w(r);if("number"==typeof o)t>0?s=o>=0?o:Math.max(o+a,s):a=o>=0?Math.min(o+1,a):o+a+1;else if(n&&o&&a)return o=n(r,i),r[o]===i?o:-1;if(i!==i)return(o=e(c.call(r,s,a),v.isNaN))>=0?o+s:-1;for(o=t>0?s:a-1;o>=0&&o<a;o+=t)if(r[o]===i)return o;return-1}}function collectNonEnumProps(t,e){var n=T.length,r=t.constructor,i=v.isFunction(r)&&r.prototype||o,s="constructor";for(v.has(t,s)&&!v.contains(e,s)&&e.push(s);n--;)(s=T[n])in t&&t[s]!==i[s]&&!v.contains(e,s)&&e.push(s)}var t=this,r=t._,i=Array.prototype,o=Object.prototype,s=Function.prototype,a=i.push,c=i.slice,u=o.toString,l=o.hasOwnProperty,h=Array.isArray,f=Object.keys,p=s.bind,d=Object.create,_=function(){},v=function(t){return t instanceof v?t:this instanceof v?void(this._wrapped=t):new v(t)};void 0!==n?(void 0!==e&&e.exports&&(n=e.exports=v),n._=v):t._=v,v.VERSION="1.8.3";var y=function(t,e,n){if(void 0===e)return t;switch(null==n?3:n){case 1:return function(n){return t.call(e,n)};case 2:return function(n,r){return t.call(e,n,r)};case 3:return function(n,r,i){return t.call(e,n,r,i)};case 4:return function(n,r,i,o){return t.call(e,n,r,i,o)}}return function(){return t.apply(e,arguments)}},m=function(t,e,n){return null==t?v.identity:v.isFunction(t)?y(t,e,n):v.isObject(t)?v.matcher(t):v.property(t)};v.iteratee=function(t,e){return m(t,e,1/0)};var g=function(t,e){return function(n){var r=arguments.length;if(r<2||null==n)return n;for(var i=1;i<r;i++)for(var o=arguments[i],s=t(o),a=s.length,c=0;c<a;c++){var u=s[c];e&&void 0!==n[u]||(n[u]=o[u])}return n}},b=function(t){if(!v.isObject(t))return{};if(d)return d(t);_.prototype=t;var e=new _;return _.prototype=null,e},P=function(t){return function(e){return null==e?void 0:e[t]}},S=Math.pow(2,53)-1,w=P("length"),C=function(t){var e=w(t);return"number"==typeof e&&e>=0&&e<=S};v.each=v.forEach=function(t,e,n){e=y(e,n);var r,i;if(C(t))for(r=0,i=t.length;r<i;r++)e(t[r],r,t);else{var o=v.keys(t);for(r=0,i=o.length;r<i;r++)e(t[o[r]],o[r],t)}return t},v.map=v.collect=function(t,e,n){e=m(e,n);for(var r=!C(t)&&v.keys(t),i=(r||t).length,o=Array(i),s=0;s<i;s++){var a=r?r[s]:s;o[s]=e(t[a],a,t)}return o},v.reduce=v.foldl=v.inject=createReduce(1),v.reduceRight=v.foldr=createReduce(-1),v.find=v.detect=function(t,e,n){var r;if(void 0!==(r=C(t)?v.findIndex(t,e,n):v.findKey(t,e,n))&&-1!==r)return t[r]},v.filter=v.select=function(t,e,n){var r=[];return e=m(e,n),v.each(t,function(t,n,i){e(t,n,i)&&r.push(t)}),r},v.reject=function(t,e,n){return v.filter(t,v.negate(m(e)),n)},v.every=v.all=function(t,e,n){e=m(e,n);for(var r=!C(t)&&v.keys(t),i=(r||t).length,o=0;o<i;o++){var s=r?r[o]:o;if(!e(t[s],s,t))return!1}return!0},v.some=v.any=function(t,e,n){e=m(e,n);for(var r=!C(t)&&v.keys(t),i=(r||t).length,o=0;o<i;o++){var s=r?r[o]:o;if(e(t[s],s,t))return!0}return!1},v.contains=v.includes=v.include=function(t,e,n,r){return C(t)||(t=v.values(t)),("number"!=typeof n||r)&&(n=0),v.indexOf(t,e,n)>=0},v.invoke=function(t,e){var n=c.call(arguments,2),r=v.isFunction(e);return v.map(t,function(t){var i=r?e:t[e];return null==i?i:i.apply(t,n)})},v.pluck=function(t,e){return v.map(t,v.property(e))},v.where=function(t,e){return v.filter(t,v.matcher(e))},v.findWhere=function(t,e){return v.find(t,v.matcher(e))},v.max=function(t,e,n){var r,i,o=-1/0,s=-1/0;if(null==e&&null!=t)for(var a=0,c=(t=C(t)?t:v.values(t)).length;a<c;a++)(r=t[a])>o&&(o=r);else e=m(e,n),v.each(t,function(t,n,r){((i=e(t,n,r))>s||i===-1/0&&o===-1/0)&&(o=t,s=i)});return o},v.min=function(t,e,n){var r,i,o=1/0,s=1/0;if(null==e&&null!=t)for(var a=0,c=(t=C(t)?t:v.values(t)).length;a<c;a++)(r=t[a])<o&&(o=r);else e=m(e,n),v.each(t,function(t,n,r){((i=e(t,n,r))<s||i===1/0&&o===1/0)&&(o=t,s=i)});return o},v.shuffle=function(t){for(var e,n=C(t)?t:v.values(t),r=n.length,i=Array(r),o=0;o<r;o++)(e=v.random(0,o))!==o&&(i[o]=i[e]),i[e]=n[o];return i},v.sample=function(t,e,n){return null==e||n?(C(t)||(t=v.values(t)),t[v.random(t.length-1)]):v.shuffle(t).slice(0,Math.max(0,e))},v.sortBy=function(t,e,n){return e=m(e,n),v.pluck(v.map(t,function(t,n,r){return{value:t,index:n,criteria:e(t,n,r)}}).sort(function(t,e){var n=t.criteria,r=e.criteria;if(n!==r){if(n>r||void 0===n)return 1;if(n<r||void 0===r)return-1}return t.index-e.index}),"value")};var E=function(t){return function(e,n,r){var i={};return n=m(n,r),v.each(e,function(r,o){var s=n(r,o,e);t(i,r,s)}),i}};v.groupBy=E(function(t,e,n){v.has(t,n)?t[n].push(e):t[n]=[e]}),v.indexBy=E(function(t,e,n){t[n]=e}),v.countBy=E(function(t,e,n){v.has(t,n)?t[n]++:t[n]=1}),v.toArray=function(t){return t?v.isArray(t)?c.call(t):C(t)?v.map(t,v.identity):v.values(t):[]},v.size=function(t){return null==t?0:C(t)?t.length:v.keys(t).length},v.partition=function(t,e,n){e=m(e,n);var r=[],i=[];return v.each(t,function(t,n,o){(e(t,n,o)?r:i).push(t)}),[r,i]},v.first=v.head=v.take=function(t,e,n){if(null!=t)return null==e||n?t[0]:v.initial(t,t.length-e)},v.initial=function(t,e,n){return c.call(t,0,Math.max(0,t.length-(null==e||n?1:e)))},v.last=function(t,e,n){if(null!=t)return null==e||n?t[t.length-1]:v.rest(t,Math.max(0,t.length-e))},v.rest=v.tail=v.drop=function(t,e,n){return c.call(t,null==e||n?1:e)},v.compact=function(t){return v.filter(t,v.identity)};var k=function(t,e,n,r){for(var i=[],o=0,s=r||0,a=w(t);s<a;s++){var c=t[s];if(C(c)&&(v.isArray(c)||v.isArguments(c))){e||(c=k(c,e,n));var u=0,l=c.length;for(i.length+=l;u<l;)i[o++]=c[u++]}else n||(i[o++]=c)}return i};v.flatten=function(t,e){return k(t,e,!1)},v.without=function(t){return v.difference(t,c.call(arguments,1))},v.uniq=v.unique=function(t,e,n,r){v.isBoolean(e)||(r=n,n=e,e=!1),null!=n&&(n=m(n,r));for(var i=[],o=[],s=0,a=w(t);s<a;s++){var c=t[s],u=n?n(c,s,t):c;e?(s&&o===u||i.push(c),o=u):n?v.contains(o,u)||(o.push(u),i.push(c)):v.contains(i,c)||i.push(c)}return i},v.union=function(){return v.uniq(k(arguments,!0,!0))},v.intersection=function(t){for(var e=[],n=arguments.length,r=0,i=w(t);r<i;r++){var o=t[r];if(!v.contains(e,o)){for(var s=1;s<n&&v.contains(arguments[s],o);s++);s===n&&e.push(o)}}return e},v.difference=function(t){var e=k(arguments,!0,!0,1);return v.filter(t,function(t){return!v.contains(e,t)})},v.zip=function(){return v.unzip(arguments)},v.unzip=function(t){for(var e=t&&v.max(t,w).length||0,n=Array(e),r=0;r<e;r++)n[r]=v.pluck(t,r);return n},v.object=function(t,e){for(var n={},r=0,i=w(t);r<i;r++)e?n[t[r]]=e[r]:n[t[r][0]]=t[r][1];return n},v.findIndex=createPredicateIndexFinder(1),v.findLastIndex=createPredicateIndexFinder(-1),v.sortedIndex=function(t,e,n,r){for(var i=(n=m(n,r,1))(e),o=0,s=w(t);o<s;){var a=Math.floor((o+s)/2);n(t[a])<i?o=a+1:s=a}return o},v.indexOf=createIndexFinder(1,v.findIndex,v.sortedIndex),v.lastIndexOf=createIndexFinder(-1,v.findLastIndex),v.range=function(t,e,n){null==e&&(e=t||0,t=0),n=n||1;for(var r=Math.max(Math.ceil((e-t)/n),0),i=Array(r),o=0;o<r;o++,t+=n)i[o]=t;return i};var x=function(t,e,n,r,i){if(!(r instanceof e))return t.apply(n,i);var o=b(t.prototype),s=t.apply(o,i);return v.isObject(s)?s:o};v.bind=function(t,e){if(p&&t.bind===p)return p.apply(t,c.call(arguments,1));if(!v.isFunction(t))throw new TypeError("Bind must be called on a function");var n=c.call(arguments,2),r=function(){return x(t,r,e,this,n.concat(c.call(arguments)))};return r},v.partial=function(t){var e=c.call(arguments,1),n=function(){for(var r=0,i=e.length,o=Array(i),s=0;s<i;s++)o[s]=e[s]===v?arguments[r++]:e[s];for(;r<arguments.length;)o.push(arguments[r++]);return x(t,n,this,this,o)};return n},v.bindAll=function(t){var e,n,r=arguments.length;if(r<=1)throw new Error("bindAll must be passed function names");for(e=1;e<r;e++)t[n=arguments[e]]=v.bind(t[n],t);return t},v.memoize=function(t,e){var n=function(r){var i=n.cache,o=""+(e?e.apply(this,arguments):r);return v.has(i,o)||(i[o]=t.apply(this,arguments)),i[o]};return n.cache={},n},v.delay=function(t,e){var n=c.call(arguments,2);return setTimeout(function(){return t.apply(null,n)},e)},v.defer=v.partial(v.delay,v,1),v.throttle=function(t,e,n){var r,i,o,s=null,a=0;n||(n={});var c=function(){a=!1===n.leading?0:v.now(),s=null,o=t.apply(r,i),s||(r=i=null)};return function(){var u=v.now();a||!1!==n.leading||(a=u);var l=e-(u-a);return r=this,i=arguments,l<=0||l>e?(s&&(clearTimeout(s),s=null),a=u,o=t.apply(r,i),s||(r=i=null)):s||!1===n.trailing||(s=setTimeout(c,l)),o}},v.debounce=function(t,e,n){var r,i,o,s,a,c=function(){var u=v.now()-s;u<e&&u>=0?r=setTimeout(c,e-u):(r=null,n||(a=t.apply(o,i),r||(o=i=null)))};return function(){o=this,i=arguments,s=v.now();var u=n&&!r;return r||(r=setTimeout(c,e)),u&&(a=t.apply(o,i),o=i=null),a}},v.wrap=function(t,e){return v.partial(e,t)},v.negate=function(t){return function(){return!t.apply(this,arguments)}},v.compose=function(){var t=arguments,e=t.length-1;return function(){for(var n=e,r=t[e].apply(this,arguments);n--;)r=t[n].call(this,r);return r}},v.after=function(t,e){return function(){if(--t<1)return e.apply(this,arguments)}},v.before=function(t,e){var n;return function(){return--t>0&&(n=e.apply(this,arguments)),t<=1&&(e=null),n}},v.once=v.partial(v.before,2);var A=!{toString:null}.propertyIsEnumerable("toString"),T=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];v.keys=function(t){if(!v.isObject(t))return[];if(f)return f(t);var e=[];for(var n in t)v.has(t,n)&&e.push(n);return A&&collectNonEnumProps(t,e),e},v.allKeys=function(t){if(!v.isObject(t))return[];var e=[];for(var n in t)e.push(n);return A&&collectNonEnumProps(t,e),e},v.values=function(t){for(var e=v.keys(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=t[e[i]];return r},v.mapObject=function(t,e,n){e=m(e,n);for(var r,i=v.keys(t),o=i.length,s={},a=0;a<o;a++)s[r=i[a]]=e(t[r],r,t);return s},v.pairs=function(t){for(var e=v.keys(t),n=e.length,r=Array(n),i=0;i<n;i++)r[i]=[e[i],t[e[i]]];return r},v.invert=function(t){for(var e={},n=v.keys(t),r=0,i=n.length;r<i;r++)e[t[n[r]]]=n[r];return e},v.functions=v.methods=function(t){var e=[];for(var n in t)v.isFunction(t[n])&&e.push(n);return e.sort()},v.extend=g(v.allKeys),v.extendOwn=v.assign=g(v.keys),v.findKey=function(t,e,n){e=m(e,n);for(var r,i=v.keys(t),o=0,s=i.length;o<s;o++)if(r=i[o],e(t[r],r,t))return r},v.pick=function(t,e,n){var r,i,o={},s=t;if(null==s)return o;v.isFunction(e)?(i=v.allKeys(s),r=y(e,n)):(i=k(arguments,!1,!1,1),r=function(t,e,n){return e in n},s=Object(s));for(var a=0,c=i.length;a<c;a++){var u=i[a],l=s[u];r(l,u,s)&&(o[u]=l)}return o},v.omit=function(t,e,n){if(v.isFunction(e))e=v.negate(e);else{var r=v.map(k(arguments,!1,!1,1),String);e=function(t,e){return!v.contains(r,e)}}return v.pick(t,e,n)},v.defaults=g(v.allKeys,!0),v.create=function(t,e){var n=b(t);return e&&v.extendOwn(n,e),n},v.clone=function(t){return v.isObject(t)?v.isArray(t)?t.slice():v.extend({},t):t},v.tap=function(t,e){return e(t),t},v.isMatch=function(t,e){var n=v.keys(e),r=n.length;if(null==t)return!r;for(var i=Object(t),o=0;o<r;o++){var s=n[o];if(e[s]!==i[s]||!(s in i))return!1}return!0};var j=function(t,e,n,r){if(t===e)return 0!==t||1/t==1/e;if(null==t||null==e)return t===e;t instanceof v&&(t=t._wrapped),e instanceof v&&(e=e._wrapped);var i=u.call(t);if(i!==u.call(e))return!1;switch(i){case"[object RegExp]":case"[object String]":return""+t==""+e;case"[object Number]":return+t!=+t?+e!=+e:0==+t?1/+t==1/e:+t==+e;case"[object Date]":case"[object Boolean]":return+t==+e}var o="[object Array]"===i;if(!o){if("object"!=typeof t||"object"!=typeof e)return!1;var s=t.constructor,a=e.constructor;if(s!==a&&!(v.isFunction(s)&&s instanceof s&&v.isFunction(a)&&a instanceof a)&&"constructor"in t&&"constructor"in e)return!1}n=n||[],r=r||[];for(var c=n.length;c--;)if(n[c]===t)return r[c]===e;if(n.push(t),r.push(e),o){if((c=t.length)!==e.length)return!1;for(;c--;)if(!j(t[c],e[c],n,r))return!1}else{var l,h=v.keys(t);if(c=h.length,v.keys(e).length!==c)return!1;for(;c--;)if(l=h[c],!v.has(e,l)||!j(t[l],e[l],n,r))return!1}return n.pop(),r.pop(),!0};v.isEqual=function(t,e){return j(t,e)},v.isEmpty=function(t){return null==t||(C(t)&&(v.isArray(t)||v.isString(t)||v.isArguments(t))?0===t.length:0===v.keys(t).length)},v.isElement=function(t){return!(!t||1!==t.nodeType)},v.isArray=h||function(t){return"[object Array]"===u.call(t)},v.isObject=function(t){var e=typeof t;return"function"===e||"object"===e&&!!t},v.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){v["is"+t]=function(e){return u.call(e)==="[object "+t+"]"}}),v.isArguments(arguments)||(v.isArguments=function(t){return v.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(v.isFunction=function(t){return"function"==typeof t||!1}),v.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},v.isNaN=function(t){return v.isNumber(t)&&t!==+t},v.isBoolean=function(t){return!0===t||!1===t||"[object Boolean]"===u.call(t)},v.isNull=function(t){return null===t},v.isUndefined=function(t){return void 0===t},v.has=function(t,e){return null!=t&&l.call(t,e)},v.noConflict=function(){return t._=r,this},v.identity=function(t){return t},v.constant=function(t){return function(){return t}},v.noop=function(){},v.property=P,v.propertyOf=function(t){return null==t?function(){}:function(e){return t[e]}},v.matcher=v.matches=function(t){return t=v.extendOwn({},t),function(e){return v.isMatch(e,t)}},v.times=function(t,e,n){var r=Array(Math.max(0,t));e=y(e,n,1);for(var i=0;i<t;i++)r[i]=e(i);return r},v.random=function(t,e){return null==e&&(e=t,t=0),t+Math.floor(Math.random()*(e-t+1))},v.now=Date.now||function(){return(new Date).getTime()};var F={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},R=v.invert(F),O=function(t){var e=function(e){return t[e]},n="(?:"+v.keys(t).join("|")+")",r=RegExp(n),i=RegExp(n,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(i,e):t}};v.escape=O(F),v.unescape=O(R),v.result=function(t,e,n){var r=null==t?void 0:t[e];return void 0===r&&(r=n),v.isFunction(r)?r.call(t):r};var N=0;v.uniqueId=function(t){var e=++N+"";return t?t+e:e},v.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var I=/(.)^/,D={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},M=/\\|'|\r|\n|\u2028|\u2029/g,L=function(t){return"\\"+D[t]};v.template=function(t,e,n){!e&&n&&(e=n),e=v.defaults({},e,v.templateSettings);var r=RegExp([(e.escape||I).source,(e.interpolate||I).source,(e.evaluate||I).source].join("|")+"|$","g"),i=0,o="__p+='";t.replace(r,function(e,n,r,s,a){return o+=t.slice(i,a).replace(M,L),i=a+e.length,n?o+="'+\n((__t=("+n+"))==null?'':_.escape(__t))+\n'":r?o+="'+\n((__t=("+r+"))==null?'':__t)+\n'":s&&(o+="';\n"+s+"\n__p+='"),e}),o+="';\n",e.variable||(o="with(obj||{}){\n"+o+"}\n"),o="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+o+"return __p;\n";try{var s=new Function(e.variable||"obj","_",o)}catch(t){throw t.source=o,t}var a=function(t){return s.call(this,t,v)},c=e.variable||"obj";return a.source="function("+c+"){\n"+o+"}",a},v.chain=function(t){var e=v(t);return e._chain=!0,e};var U=function(t,e){return t._chain?v(e).chain():e};v.mixin=function(t){v.each(v.functions(t),function(e){var n=v[e]=t[e];v.prototype[e]=function(){var t=[this._wrapped];return a.apply(t,arguments),U(this,n.apply(v,t))}})},v.mixin(v),v.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var e=i[t];v.prototype[t]=function(){var n=this._wrapped;return e.apply(n,arguments),"shift"!==t&&"splice"!==t||0!==n.length||delete n[0],U(this,n)}}),v.each(["concat","join","slice"],function(t){var e=i[t];v.prototype[t]=function(){return U(this,e.apply(this._wrapped,arguments))}}),v.prototype.value=function(){return this._wrapped},v.prototype.valueOf=v.prototype.toJSON=v.prototype.value,v.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return v})}).call(this)},{}],4:[function(t,e,n){for(var r=[],i=0;i<256;++i)r[i]=(i+256).toString(16).substr(1);e.exports=function(t,e){var n=e||0,i=r;return i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+"-"+i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]+i[t[n++]]}},{}],5:[function(t,e,n){(function(t){var n,r=t.crypto||t.msCrypto;if(r&&r.getRandomValues){var i=new Uint8Array(16);n=function(){return r.getRandomValues(i),i}}if(!n){var o=new Array(16);n=function(){for(var t,e=0;e<16;e++)0==(3&e)&&(t=4294967296*Math.random()),o[e]=t>>>((3&e)<<3)&255;return o}}e.exports=n}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],6:[function(t,e,n){var r=t("./lib/rng"),i=t("./lib/bytesToUuid");e.exports=function(t,e,n){var o=e&&n||0;"string"==typeof t&&(e="binary"==t?new Array(16):null,t=null);var s=(t=t||{}).random||(t.rng||r)();if(s[6]=15&s[6]|64,s[8]=63&s[8]|128,e)for(var a=0;a<16;++a)e[o+a]=s[a];return e||i(s)}},{"./lib/bytesToUuid":4,"./lib/rng":5}],7:[function(t,e,n){(function(n){function Model(t){this._data={},this._cache=null,r.isObject(t)&&(this._data=this._extendDeep(this._data,t))}function Subject(){this._observers={}}function Entity(t){Subject.call(this),this._id=i(),this._name=c(t)?this._id:t,this._type="entity",this._status="inactive",this.model=new Model,this.props={},this.methods={},this._setObserverType("root")}function Elem(t){Entity.call(this,t),this._type="element",this._container=null,this._root=null,this._level=0,this._setObserverType("container"),Object.defineProperties(this,u.descriptor)}function ProtoState(t){Elem.call(this,t),this._type="state",this.region=null,this._regions=[],this._setObserverType("regions")}function State(t,e){ProtoState.call(this,t),e=r.defaults(e||{},r.clone(State.options)),r.isObject(e.data)&&this.extend(e.data),this.save(),r.isObject(e.props)&&r.extend(this.props,e.props),r.isObject(e.methods)&&(this.methods=this.addMethod(e.methods)),this._entryAction=e.entryAction,this._exitAction=e.exitAction,this._doActivity=e.doActivity,this._autoTransition=e.autoTransition,this._loop=e.loop,this._fps=e.fps,this._interval=1e3/this._fps,this._timerId=0,this._lastCallTime=0}function Machine(t,e){ProtoState.call(this,t,e),e=e||{},r.isObject(e.data)&&this.extend(e.data),this.save(),r.isObject(e.props)&&r.extend(this.props,e.props),r.isObject(e.methods)&&(this.methods=this.addMethod(e.methods)),this._deployed=!1,this._promise=null,this._links=[],this.appendRegion(),this._setObserverType("inbound")}function FinalState(t){ProtoState.call(this,t)}function SubMachine(t){ProtoState.call(this,t),this._link=null,this._deployed=!1,this.appendRegion(),this._setObserverType("outbound")}function PseudoState(t){ProtoState.call(this,t),this._type="pseudo-state"}function InitialPseudoState(t){PseudoState.call(this,t)}function HistoryPseudoState(t,e){PseudoState.call(this,t),this._isDeep=!r.isUndefined(e)&&e}function TerminatePseudoState(t,e){PseudoState.call(this,t)}function ChoicePseudoState(t,e){PseudoState.call(this,t),this._condition=r.isFunction(e)?e:r.noop}function ConnectionPointPseudoState(t){PseudoState.call(this,t),this._key="",this._hasSubRoot=!1,this._isEndpoint=!1,this._setObserverType("sub-root")}function EntryPointPseudoState(t){ConnectionPointPseudoState.call(this,t)}function ExitPointPseudoState(t){ConnectionPointPseudoState.call(this,t)}function Transition(t,e,n,i){Elem.call(this,t),this._type="transition",e instanceof ProtoState||c(e)||InitialPseudoState?this._rawSource=e:s.error("第2引数に遷移元のStateインスタンス、またはfalseを指定してください。"),n instanceof ProtoState||c(n)||FinalState?this._rawTarget=n:s.error("第3引数に遷移元のStateインスタンス、またはfalseを指定してください。"),i=r.defaults(i||{},r.clone(Transition.options)),r.isObject(i.data)&&this.extend(i.data),this.save(),r.isObject(i.props)&&r.extend(this.props,i.props),r.isObject(i.methods)&&(this.methods=this.addMethod(i.methods)),this._source=null,this._target=null,this._guard=i.guard,this._effect=i.effect,this._internal=i.internal,this._locked=i.locked,this._isExplicitEntry=!1,this._exitViaExitPoint=!1}function Region(t,e){Entity.call(this,t),this._type="region",e=e||{},r.isObject(e.data)&&this.extend(e.data),this.save(),r.isObject(e.props)&&r.extend(this.props,e.props),r.isObject(e.methods)&&(this.methods=this.addMethod(e.methods)),this._parent=null,this._initialPseudo=null,this._final=null,this._historyPseudo=null,this._previousState=null,this._states=[],this._transits=[],this._setObserverType("parent","states","transits"),this._setDefaultStates()}function _eachEntity(t,e){var n,r,i,o,s;for(e(t),n=0,i=t._regions.length;n<i;n+=1){for(e(s=t._regions[n]),r=0,o=s._transits.length;r<o;r+=1)e(s._transits[r]);for(r=0,o=s._states.length;r<o;r+=1)_eachEntity(s._states[r],e)}}function _findState(t,e,n){var i,o,s,a,c,u,l;if((n=r.isUndefined(n)?1/0:n)>=0)for(n-=1,i=0,s=t._states.length;i<s;i+=1){if((c=t._states[i])===e)return c;for(o=0,a=c._regions.length;o<a;o+=1)if(u=c._regions[o],l=_findState(u,e,n),!r.isUndefined(l))return l}}function _findDeepHistoryPseudoState(t){var e;return t.hasHistory(!0)?t._historyPseudo:(e=t._getUpperContainer(),r.isNull(e)?void 0:_findDeepHistoryPseudoState(e))}function _findFirstTransition(t,e){var n=t._transits;return r.isUndefined(e)&&(e=t._initialPseudo),r.find(n,function(t){return t._source===e})}function _findNextTransition(t,e,n){var i;return i=t._transits,r.find(i,function(t){return r.isUndefined(n)?t._source instanceof FinalState?t._source===e&&!t._locked:t._source===e:t._target===n&&t._source===e})}var r,i,o,s,a,c,u,l;r=t("underscore"),i=t("uuid/v4"),o=t("bluebird"),s={debuggable:!0,logLevel:"DEBUG",logLevelData:["DEBUG","INFO","WARN","ERROR"],debug:function(t){this.debuggable&&r.indexOf(this.logLevelData,this.logLevel)<=0&&console.log("DEBUG: ",t)},info:function(t){this.debuggable&&r.indexOf(this.logLevelData,this.logLevel)<=1&&console.log("INFO: ",t)},warn:function(t){this.debuggable&&r.indexOf(this.logLevelData,this.logLevel)<=2&&console.log("WARN: ",t)},error:function(t){if(this.debuggable&&r.indexOf(this.logLevelData,this.logLevel)<=3)throw console.error("ERROR: ",t),new Error("ERROR: "+t)}},a=!(r.isUndefined(n)||!n.versions||!n.versions.node),c=r.negate(Boolean),u={accessor:{get:function(t){return this.model.get(t)},set:function(t,e){return this.model.set(t,e)},unset:function(t){return this.model.unset(t)},extend:function(t){return this.model.extend(t)},save:function(){this.model.save()},restore:function(){this.model.restore()},clear:function(){this.model.clear()}},helper:{$get:function(t){var e=this._getSuperState();if(!r.isNull(e))return e.model.get(t)},$set:function(t,e){var n=this._getSuperState();if(!r.isNull(n))return n.model.set(t,e)},$unset:function(t){var e=this._getSuperState();if(!r.isNull(e))return e.model.unset(t)},$extend:function(t){var e=this._getSuperState();if(!r.isNull(e))return e.model.extend(t)},$save:function(){var t=this._getSuperState();if(r.isNull(t))return!1;t.model.save()},$restore:function(){var t=this._getSuperState();if(r.isNull(t))return!1;t.model.restore()},$clear:function(){var t=this._getSuperState();if(r.isNull(t))return!1;t.model.clear()}},disable:{get:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},set:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},unset:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},extend:function(t){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},save:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},restore:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},clear:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},$props:null,$methods:null,$get:function(t){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},$set:function(t,e){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},$unset:function(t){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},$extend:function(t){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},$save:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},$restore:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},$clear:function(){s.error(this.constructor.name+"インスタンスは内部データを保持できません。")},addState:function(){s.error(this.constructor.name+"インスタンスはサブ状態を持てません。")},removeState:function(){s.error(this.constructor.name+"インスタンスはサブ状態を持てません。")},addTransition:function(t){s.error(this.constructor.name+"インスタンスは遷移を持てません。")},removeTransition:function(t){s.error(this.constructor.name+"インスタンスは遷移を持てません。")},appendRegion:function(t){s.error(this.constructor.name+"インスタンスは領域を持てません。")},removeRegion:function(t){s.error(this.constructor.name+"インスタンスは領域を持てません。")}},descriptor:{$props:{enumerable:!0,get:function(){var t=this._getSuperState();if(!r.isNull(t))return t.props}},$methods:{enumerable:!0,get:function(){var t=this._getSuperState();if(!r.isNull(t))return t.methods}}},manipulator:{state:{addState:function(){var t=r.toArray(arguments);return r.isNull(this.region)&&(this.appendRegion(),s.info(this.constructor.name+'インスタンス"'+this._name+'"のRegionインスタンスが自動生成されました。')),this.region.addState.apply(this.region,t)},removeState:function(){var t=r.toArray(arguments);return r.isNull(this.region)&&s.error("コンテナのRegionインスタンスが存在しません。"),this.region.removeState.apply(this.region,t)},addTransition:function(){var t=r.toArray(arguments);return r.isNull(this.region)&&(this.appendRegion(),s.info(this.constructor.name+'インスタンス"'+this._name+'"のRegionインスタンスが自動作成されました。')),this.region.addTransition.apply(this.region,t)},removeTransition:function(){var t=r.toArray(arguments);return r.isNull(this.region)&&s.error("コンテナのRegionインスタンスが存在しません。"),this.region.removeTransition.apply(this.region,t)},appendRegion:function(t){return r.isNull(this.region)?(r.isUndefined(t)?t=new Region("default-region-of-"+this._name):t instanceof Region||s.error("Regionインスタンスを指定してください。"),this.region=t):r.isUndefined(t)?t=new Region(!1):t instanceof Region||s.error("Regionインスタンスを指定してください。"),t._parent=this,this._regions.push(t),this._addObserver("regions",t),t._addObserver("parent",this),t._update("update-relation"),t},removeRegion:function(t){var e;return t instanceof Region||s.error("Regionインスタンスを指定してください。"),t._parent=null,(e=r.indexOf(this._regions,t))>-1?this._regions.splice(e,1):s.error("削除対象のRegionインスタンスが見つかりません。"),this.region===t&&(this.region=null),t._update("update-relation"),this._removeObserver("regions",t),t._removeObserver("parent",this),t}},region:{addState:function(){var t,e,n,i,o,a;for(e=0,n=(t=r.toArray(arguments)).length;e<n;e+=1)(i=t[e])instanceof ProtoState||s.error("Stateインスタンスを指定してください。"),i instanceof InitialPseudoState?this._initialPseudo=i:i instanceof FinalState?this._final=i:i instanceof HistoryPseudoState&&(this._historyPseudo=i),this._states.push(i),this._states[i._id]=i,this._addObserver("states",i),i._container=this,i._addObserver("container",this),o=this._getParentLevel()+1,a=this._getRoot(),i._updateRelation(o,a);return t.length>1?t:r.first(t)},removeState:function(){var t,e,n;for(t=r.toArray(arguments),e=this._states.length;e--;)n=this._states[e],r.indexOf(t,n)>-1&&(n instanceof HistoryPseudoState&&(this._historyPseudo=null),this._states.splice(e,1),delete this._states[n._id],this._removeObserver("states",n),n._container=null,n._removeObserver("container",this),n._updateRelation(0,null));return t.length>1?t:r.first(t)},addTransition:function(){var t,e,n,i,o,a,u;for(e=0,n=(t=r.toArray(arguments)).length;e<n;e+=1)(i=t[e])instanceof Transition||s.error("Transitionインスタンスを指定してください。"),i._rawSource===InitialPseudoState||c(i._rawSource)?i._source=this._initialPseudo:(o=_findState(this,i._rawSource,0),r.isUndefined(o)&&(o=_findState(this,i._rawSource,1),r.isUndefined(o)?s.error("遷移元のStateインスタンスが見つかりません。"):i._exitViaExitPoint=!0),i._source=i._rawSource),i._rawTarget===FinalState||c(i._rawTarget)?i._target=this._final:(o=_findState(this,i._rawTarget,0),r.isUndefined(o)&&(o=_findState(this,i._rawTarget,1),r.isUndefined(o)?s.error("遷移先のStateインスタンスが見つかりません。"):i._isExplicitEntry=!0),i._target=i._rawTarget),i._name===i._id&&(i._name="transit-from-"+i._source._name+"-to-"+i._target._name),this._transits.push(i),this._transits[i._id]=i,this._addObserver("transits",i),i._container=this,i._addObserver("container",this),a=this._getParentLevel()+1,u=this._getRoot(),i._updateRelation(a,u);return t.length>1?t:r.first(t)},removeTransition:function(){var t,e,n;for(t=r.toArray(arguments),e=this._transits.length;e--;)n=this._transits[e],r.indexOf(t,n)>-1&&(this._transits.splice(e,1),delete this._transits[n._id],this._removeObserver("transits",n),n._source=null,n._target=null,n._container=null,n._removeObserver("container",this),n._updateRelation(0,null));return t.length>1?t:r.first(t)}}}},Model.prototype=r.create(Object.prototype,{constructor:Model,get:function(t){return this._data[t]},set:function(t,e){return this._data[t]=e,e},unset:function(t){var e=this._data[t];if(!r.isUndefined(e))return delete this._data[t],e},extend:function(t){return this._extendDeep(this._data,t)},save:function(){this._cache=this._extendDeep(this._cache,this._data)},restore:function(){r.isNull(this._cache)||(this._data={},this._data=this._extendDeep(this._data,this._cache))},clear:function(){this._data={},this._cache=null},_extendDeep:function(t,e){return t=t||{},r.each(e,r.bind(function(e,n){r.isObject(e)?(r.isFunction(e)&&s.error("Functionはdataプロパティに登録できません。methodsプロパティに登録してください。"),t[n]=r.isArray(e)?[]:{},this._extendDeep(t[n],e)):t[n]=e},this)),t}}),Subject.prototype=r.create(Object.prototype,{constructor:Subject,_countObservers:function(t){var e=0;return r.isUndefined(this._observers[t])||(e=this._observers[t].length),e},_setObserverType:function(){var t,e,n,i;for(n=0,i=(t=r.toArray(arguments)).length;n<i;n+=1)e=t[n],r.isUndefined(this._observers[e])&&(this._observers[e]=[])},_addObserver:function(t,e){r.isUndefined(this._observers[t])&&(this._observers[t]=[]),this._observers[t].push(e)},_removeObserver:function(t,e){var n,i;n=this._observers[t],r.isUndefined(n)?s.warn("オブザーバーが登録されていません。"):(i=r.indexOf(n,e))>-1&&n.splice(i,1)},_notify:function(t){var e,n,i,o,a;if(e=this._observers[t],a=r.toArray(arguments).slice(1),r.isUndefined(e))s.warn("オブザーバーが登録されていません。");else for(n=0,i=e.length;n<i;n+=1)o=e[n],r.isFunction(o._update)&&o._update.apply(o,a)}}),Entity.prototype=r.create(Subject.prototype,r.extend({constructor:Entity,getId:function(){return this._id},getName:function(){return this._name},setName:function(t){return this._name=t,t},isActive:function(){return"active"===this._status},addMethod:function(t){return r.mapObject(t,r.bind(function(t){return r.bind(t,this)},this))},_activate:function(){this._status="active",s.info(this.constructor.name+'インスタンス"'+this._name+'"がアクティブ化されました。')},_inactivate:function(){this._status="inactive",s.info(this.constructor.name+'インスタンス"'+this._name+'"が非アクティブ化されました。')},_update:r.noop},u.accessor)),Elem.prototype=r.create(Entity.prototype,r.extend({constructor:Elem,getContainer:function(){return this._container},getCurrentLevel:function(){return this._level},_async:function(t){this._notify("root","async",r.bind(function(){return r.bind(t,this)(),o.resolve()},this))}},u.helper)),ProtoState.prototype=r.create(Elem.prototype,r.extend({constructor:ProtoState,getRegion:function(t){return r.isNumber(t)?this._regions[t]:this.region},_getSuperState:function(){var t=null;return r.isNull(this._container)||r.isNull(this._container._parent)||(t=this._container._parent),t},completion:function(){this._async(function(){this.isActive()?(this._exit(),r.isNull(this._container)?s.error(this.constructor.name+'インスタンス"'+this._name+'"のコンテナが存在しません。'):this._notify("container","completion")):s.error(this.constructor.name+'インスタンス"'+this._name+'"はすでに非アクティブ化されています。')})},_update:function(t){var e=r.toArray(arguments).slice(1);switch(t){case"entry":this._entry.apply(this,e);break;case"exit":this._exit.apply(this,e);break;case"update-relation":this._updateRelation.apply(this,e);break;case"completion":this.completion.apply(this,e)}},_updateRelation:function(t,e){this._level=t,this._root=e,this._notify("regions","update-relation")},_entry:function(){this.isActive()||(this._activate(),this._notify("regions","entry"))},_exit:function(){this.isActive()&&(this._notify("regions","exit"),this._inactivate())}},u.manipulator.state)),State.options={entryAction:r.noop,exitAction:r.noop,doActivity:r.noop,autoTransition:!1,loop:!1,fps:60},State.prototype=r.create(ProtoState.prototype,{constructor:State,completion:function(){this._async(function(){var t;this.isActive()?r.isNull(this._container)?s.error(this.constructor.name+'インスタンス"'+this._name+'"のコンテナが存在しません。'):(t=_findNextTransition(this._container,this),r.isUndefined(t)?(this._exit(),this._notify("container","completion")):t.trigger()):s.error(this.constructor.name+'インスタンス"'+this._name+'"はすでに非アクティブ化されています。')})},_update:function(t){var e=r.toArray(arguments).slice(1);switch(t){case"entry":this._entry.apply(this,e);break;case"exit":this._exit.apply(this,e);break;case"update-relation":this._updateRelation.apply(this,e);break;case"completion":this.completion.apply(this,e)}},_setTimer:function(t){this._timerId=0,this._lastCallTime=0,this._repeat(t)},_clearTimer:function(){clearTimeout(this._timerId)},_repeat:function(t){var e,n,i;return e=r.now(),n=0!==this._lastCallTime?e-this._lastCallTime:0,i=Math.max(this._interval-n,0),this._lastCallTime=e+i,this._timerId=setTimeout(r.bind(this._timeout,this,t,e,n),i),this._timerId},_timeout:function(t,e,n){t(r.now()-e+n),this._repeat(t)},_activate:function(){var t,e,n,i;t=this._root,r.isNull(t)?s.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,i=t.methods),this._status="active",s.info(this.constructor.name+'インスタンス"'+this._name+'"がアクティブ化されました。'),this._entryAction(e,n,i),this._loop?this._setTimer(r.bind(function(t){this._doActivity(t,e,n,i),this._autoTransition&&this.completion()},this)):(this._doActivity(e,n,i),this._autoTransition&&this.completion())},_inactivate:function(){var t,e,n,i;t=this._root,r.isNull(t)?s.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,i=t.methods),this._clearTimer(),r.isNull(this._container)||this._notify("container","set-previous-state",this),this._exitAction(e,n,i),this._status="inactive",s.info(this.constructor.name+'インスタンス"'+this._name+'"が非アクティブ化されました。')},_entry:function(t,e){this.isActive()||(this._activate(),this._notify("regions","entry",t,e))}}),Machine.prototype=r.create(ProtoState.prototype,{constructor:Machine,deploy:function(){return this._deployed=!0,this._promise=o.resolve(),this._updateRelation(this._level,this),_eachEntity(this,r.bind(function(t){t instanceof Machine||t._addObserver("root",this),t instanceof ConnectionPointPseudoState&&t._getSuperState()===this&&(t._isEndpoint=!0)},this)),this},undeploy:function(){return this._deployed=!1,this._promise=null,_eachEntity(this,r.bind(function(t){t instanceof Machine||t._removeObserver("root",this),t instanceof ConnectionPointPseudoState&&(t._isEndpoint=!1)},this)),this._updateRelation(this._level,null),this},start:function(t){return this._deployed||s.error("start()の前にdeploy()メソッドを実行してください。"),this.isActive()?s.warn('Machineインスタンス"'+this._name+'"はすでに起動しています。'):(s.info('Machineインスタンス"'+this._name+'"が動作を開始しました。'),this._stackPromise(r.bind(function(){return this._entry(void 0,t),o.resolve()},this))),this},finish:function(){return this._deployed||s.error("start()の前にdeploy()メソッドを実行してください。"),this.isActive()?this.completion():s.warn('Machineインスタンス"'+this._name+'"はすでに動作を終了しています。'),this},completion:function(){this._stackPromise(r.bind(function(){return this._exit(),s.info('Machineインスタンス"'+this._name+'"が動作を終了しました。'),o.resolve()},this))},_stackPromise:function(t){this._promise=this._promise.then(t,this._onRejected).catch(this._onError)},_aborted:function(t){s.error('Machineインスタンス"'+this._name+'"は処理を停止しました。')},_outerExecution:function(t){var e,n,i,o;if(r.isUndefined(t))this.start();else{for(e=0,n=this._regions.length;e<n;e+=1)if(i=this._regions[e],o=i._states[t],!r.isUndefined(o))return void this.start(o);s.error("エンドポイントのEntryPointPseudoStateインスタンスが指定されていません。")}},_linkBack:function(t){this.completion(),this._stackPromise(r.bind(function(){return this._notify("inbound","link-back",t._id),o.resolve()},this))},_update:function(t,e){var n=r.toArray(arguments).slice(1);switch(t){case"async":this._stackPromise(e);break;case"entry":this._entry.apply(this,n);break;case"exit":this._exit.apply(this,n);break;case"completion":this.completion.apply(this,n);break;case"termination":this._aborted.apply(this,n);break;case"link-forward":this._outerExecution.apply(this,n);break;case"exit-point":this._linkBack.apply(this,n)}},_onRejected:function(t){return o.reject(t)},_onError:function(t){return s.info(t),o.reject(t)},_entry:function(t,e){this.isActive()||(this._activate(),this._notify("regions","entry",t,e))}}),FinalState.prototype=r.create(ProtoState.prototype,r.extend({constructor:FinalState,_activate:function(){this._status="active",s.info('FinalStateインスタンス"'+this._name+'"がアクティブ化されました。'),this.completion()},_inactivate:function(){this._status="inactive",r.isNull(this._container)||this._notify("container","set-previous-state",null),s.info('FinalStateインスタンス"'+this._name+'"が非アクティブ化されました。')}},u.disable)),SubMachine.prototype=r.create(ProtoState.prototype,{constructor:SubMachine,addLink:function(t){t instanceof Machine||s.error("Machineインスタンスを指定してください。"),this._link=t,this._addObserver("outbound",t),t._addObserver("inbound",this)},removeLink:function(){this._removeObserver("outbound",this._link),this._link._addObserver("inbound",this),this._link=null},deploy:function(){return this._deployed=!0,_eachEntity(this,r.bind(function(t){t instanceof ProtoState&&(t instanceof PseudoState?t instanceof ConnectionPointPseudoState?(t._addObserver("sub-root",this),t._getSuperState()===this?t._hasSubRoot=!0:s.error("ConnectionPointPseudoStateインスタンスはサブマシン直下のサブ状態でなければなりません。")):t instanceof InitialPseudoState||s.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を追加できません。"):t instanceof SubMachine||t instanceof FinalState||s.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を保持できません。"))},this)),this},undeploy:function(){return this._deployed=!1,_eachEntity(this,r.bind(function(t){t instanceof ProtoState&&(t instanceof PseudoState?t instanceof ConnectionPointPseudoState?(t._removeObserver("sub-root",this),t._hasSubRoot=!1):t instanceof InitialPseudoState||s.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を追加できません。"):t instanceof SubMachine||t instanceof FinalState||s.error("SubMachineインスタンスはConnectionPointPseudoStateクラス以外の状態を保持できません。"))},this)),this},_linkForward:function(t){this._async(r.bind(function(){t._exit(),r.isEmpty(t._key)?s.error("リンク先のマシンに渡すキーが指定されていません。"):this._notify("outbound","link-forward",t._key)},this))},_innerExecution:function(t){var e,n,i,o;for(n=0,i=this._regions.length;n<i;n+=1)o=this._regions[n],e=r.findWhere(o._states,{_key:t}),r.isUndefined(e)?s.error("エンドポイントのExitPointPseudoStateインスタンスが指定されていません。"):e._entry()},_update:function(t){var e=r.toArray(arguments).slice(1);switch(t){case"entry-point":this._linkForward.apply(this,e);break;case"link-back":this._innerExecution.apply(this,e)}},_entry:function(t,e){this._deployed||s.error("SubMachineインスタンスのdeploy()メソッドを実行してください。"),this.isActive()||(this._activate(),this._notify("regions","entry",t,e))},_exit:function(){this._deployed||s.error("SubMachineインスタンスのdeploy()メソッドを実行してください。"),this.isActive()&&(this._notify("regions","exit"),this._inactivate())}}),PseudoState.prototype=r.create(ProtoState.prototype,r.extend({constructor:PseudoState,_inactivate:function(){this._status="inactive",r.isNull(this._container)||this._notify("container","set-previous-state",null),s.info(this.constructor.name+'インスタンス"'+this._name+'"が非アクティブ化されました。')}},u.disable)),InitialPseudoState.prototype=r.create(PseudoState.prototype,{constructor:InitialPseudoState,_activate:function(){var t;this._status="active",s.info('InitialPseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),r.isNull(this._container)?s.error('InitialPseudoStateインスタンス"'+this._name+'"のコンテナが存在しません。'):(t=_findFirstTransition(this._container),r.isUndefined(t)?s.error('Regionインスタンス"'+this._container._name+'"の初期遷移が見つかりません。'):t.trigger())}}),HistoryPseudoState.prototype=r.create(PseudoState.prototype,{constructor:HistoryPseudoState}),TerminatePseudoState.prototype=r.create(PseudoState.prototype,{constructor:TerminatePseudoState,_activate:function(){throw this._status="active",s.info('TerminatePseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),this._notify("root","termination",this),new Error("ERROR: 停止状態に遷移しました。処理を中断します。")}}),ChoicePseudoState.prototype=r.create(PseudoState.prototype,{constructor:ChoicePseudoState,_activate:function(){var t,e,n,i,o,a;t=this._root,r.isNull(t)?s.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,i=t.methods),this._status="active",s.info('ChoicePseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),(o=this._condition(e,n,i))instanceof ProtoState||s.error("遷移先のStateインスタンスが存在しません。"),r.isNull(this._container)?s.error('ChoicePseudoStateインスタンス"'+this._name+'"のコンテナが存在しません。'):(a=_findNextTransition(this._container,this,o),r.isUndefined(a)?s.error('ChoicePseudoStateインスタンス"'+this._name+'"起点のTransitionインスタンスが見つかりません。'):a.trigger())}}),ConnectionPointPseudoState.prototype=r.create(PseudoState.prototype,{constructor:ConnectionPointPseudoState,setKey:function(t){return this._key=t,t}}),EntryPointPseudoState.prototype=r.create(ConnectionPointPseudoState.prototype,{constructor:EntryPointPseudoState,_activate:function(){var t;this._status="active",s.info('EntryPointPseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),this._hasSubRoot?this._notify("sub-root","entry-point",this):r.isNull(this._container)?s.error('EntryPointPseudoStateインスタンス"'+this._name+'"のコンテナが存在しません。'):(t=_findFirstTransition(this._container,this),r.isUndefined(t)?s.error('Regionインスタンス"'+this._container._name+'"の初期遷移が見つかりません。'):t.trigger())}}),ExitPointPseudoState.prototype=r.create(ConnectionPointPseudoState.prototype,{constructor:ExitPointPseudoState,_activate:function(){var t,e;this._status="active",s.info('ExitPointPseudoStateインスタンス"'+this._name+'"がアクティブ化されました。'),this._isEndpoint?this._notify("root","exit-point",this):(t=this._container._getUpperContainer(),r.isNull(t)?s.error('ExitPointPseudoStateインスタンス"'+this._name+'"の上位コンテナが存在しません。'):(e=_findNextTransition(t,this),r.isUndefined(e)?s.error('ExitPointPseudoStateインスタンス"'+this._name+'"起点のTransitionインスタンスが見つかりません。'):e.trigger()))}}),Transition.options={guard:null,effect:null,internal:!1,locked:!0},Transition.prototype=r.create(Elem.prototype,{constructor:Transition,trigger:function(){var t,e,n,i;if(t=this._root,r.isNull(t)?s.error("Machineインスタンスの参照が存在しません。"):(e=t.model,n=t.props,i=t.methods),r.isNull(this._container)&&s.error('Transitionインスタンス"'+this._name+'"のコンテナが存在しません。'),this._container.isActive()||s.error('Transitionインスタンス"'+this._name+'"のコンテナが非アクティブです。'),this._source instanceof FinalState?s.error("終了状態を遷移元にすることはできません。"):this._source instanceof TerminatePseudoState?s.error("停止状態を遷移元にすることはできません。"):this._target instanceof InitialPseudoState&&s.error("開始擬似状態を遷移先にすることはできません。"),r.isNull(this._guard)||this._guard(e,n,i)){if(this._internal){if(this._source===this._target)return void this._async(function(){s.info("内部遷移を実行します。"),r.isNull(this._effect)||this._effect(e,n,i)});s.error("遷移元と遷移先は同じStateインスタンスを指定してください。")}this._async(function(){var t;this.isActive()?s.error('Transitionインスタンス"'+this._name+'"はすでにアクティブ化されています。'):this._activate(),this._source.isActive()?this._exitViaExitPoint?(t=this._source._getSuperState(),r.isNull(t)?s.error(this._target.constructor.name+'インスタンス"'+this._target._name+'"の「親」状態が存在しません。'):t._exit()):this._source._exit():s.error("遷移元"+this._target.constructor.name+'インスタンス"'+this._target._name+'"が非アクティブです。'),r.isNull(this._effect)||this._effect(e,n,i),this._target.isActive()?s.error("遷移先"+this._target.constructor.name+'インスタンス"'+this._target._name+'"がアクティブです。'):this._isExplicitEntry?(t=this._target._getSuperState(),r.isNull(t)?s.error(this._target.constructor.name+'インスタンス"'+this._target._name+'"の「親」状態が存在しません。'):t._entry(void 0,this._target)):this._target._entry(),this.isActive()?this._inactivate():s.error('Transitionインスタンス"'+this._name+'"はすでに非アクティブ化されています。')})}else s.info("ガードが成立しませんでした。遷移は発生しません。")},_update:function(t){var e=r.toArray(arguments).slice(1);switch(t){case"update-relation":this._updateRelation.apply(this,e)}},_updateRelation:function(t,e){this._level=t,this._root=e}}),Region.prototype=r.create(Entity.prototype,r.extend({constructor:Region,hasHistory:function(t){return c(t)?!r.isNull(this._historyPseudo):!r.isNull(this._historyPseudo)&&this._historyPseudo._isDeep},getIndex:function(){return r.isNull(this._parent)&&r.indexOf(this._parent._regions,this),-1},_update:function(t){var e=r.toArray(arguments).slice(1);switch(t){case"entry":this._entry.apply(this,e);break;case"exit":this._exit.apply(this,e);break;case"update-relation":this._updateRelation.apply(this,e);break;case"completion":this._completion.apply(this,e);break;case"set-previous-state":this._setPreviousState.apply(this,e)}},_getParentLevel:function(){var t=-1;return r.isNull(this._parent)||(t=this._parent._level),t},_getRoot:function(){return r.isNull(this._parent)?null:this._parent._root},_getUpperContainer:function(){var t=null;return r.isNull(this._parent)||r.isNull(this._parent._container)||(t=this._parent._container),t},_setDefaultStates:function(){var t,e;t=new InitialPseudoState(!1),e=new FinalState(!1),this.addState(t,e)},_setDefaultStateName:function(){this._initialPseudo._name="initial-pseudo-state-in-"+this._name,this._final._name="final-state-in-"+this._name},_updateRelation:function(){var t,e;this._setDefaultStateName(),t=this._getParentLevel()+1,e=this._getRoot(),this._notify("states","update-relation",t,e),this._notify("transits","update-relation",t,e)},_setPreviousState:function(t){return this._previousState=t,t},_entry:function(t,e){var n;this.isActive()||(this._activate(),r.isUndefined(t)&&(t=_findDeepHistoryPseudoState(this),t=!r.isUndefined(t)),r.indexOf(this._states,e)>-1?e._update("entry",t):(t?n=this._previousState||this._initialPseudo:r.isNull(this._historyPseudo)?n=this._initialPseudo:(n=this._previousState||this._initialPseudo,this._historyPseudo._isDeep&&(t=!0)),n._update("entry",t,e)))},_exit:function(){this.isActive()&&(this._notify("states","exit"),this._inactivate())},_completion:function(){this._inactivate(),r.isNull(this._parent)?s.error('Regionインスタンス"'+this._name+'"の「親」状態が存在しません。'):r.every(this._parent._regions,function(t){return!t.isActive()})&&this._notify("parent","completion")}},u.manipulator.region)),l={Machine:Machine,State:State,Transition:Transition,Region:Region,InitialPseudoState:InitialPseudoState,FinalState:FinalState,SubMachine:SubMachine,HistoryPseudoState:HistoryPseudoState,TerminatePseudoState:TerminatePseudoState,ChoicePseudoState:ChoicePseudoState,EntryPointPseudoState:EntryPointPseudoState,ExitPointPseudoState:ExitPointPseudoState},a?e.exports=l:r.isUndefined(window)||(window.FSM=l)}).call(this,t("_process"))},{_process:2,bluebird:1,underscore:3,"uuid/v4":6}]},{},[7]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5vZGVfbW9kdWxlcy9icm93c2VyLXBhY2svX3ByZWx1ZGUuanMiLCJub2RlX21vZHVsZXMvYmx1ZWJpcmQvanMvYnJvd3Nlci9ibHVlYmlyZC5qcyIsIm5vZGVfbW9kdWxlcy9wcm9jZXNzL2Jyb3dzZXIuanMiLCJub2RlX21vZHVsZXMvdW5kZXJzY29yZS91bmRlcnNjb3JlLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvbGliL2J5dGVzVG9VdWlkLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvbGliL3JuZy1icm93c2VyLmpzIiwibm9kZV9tb2R1bGVzL3V1aWQvdjQuanMiLCJzcmMvYXN5bmMtZnNtLmpzIl0sIm5hbWVzIjpbImUiLCJ0IiwibiIsInIiLCJzIiwibyIsInUiLCJhIiwicmVxdWlyZSIsImkiLCJmIiwiRXJyb3IiLCJjb2RlIiwibCIsImV4cG9ydHMiLCJjYWxsIiwibGVuZ3RoIiwiMSIsIm1vZHVsZSIsImRlZmluZSIsImFtZCIsIndpbmRvdyIsImdsb2JhbCIsInNlbGYiLCJQcm9taXNlIiwiX2RlcmVxXyIsImFueSIsInByb21pc2VzIiwicmV0IiwiU29tZVByb21pc2VBcnJheSIsInByb21pc2UiLCJzZXRIb3dNYW55Iiwic2V0VW53cmFwIiwiaW5pdCIsIl9Tb21lUHJvbWlzZUFycmF5IiwicHJvdG90eXBlIiwidGhpcyIsIjIiLCJBc3luYyIsIl9jdXN0b21TY2hlZHVsZXIiLCJfaXNUaWNrVXNlZCIsIl9sYXRlUXVldWUiLCJRdWV1ZSIsIl9ub3JtYWxRdWV1ZSIsIl9oYXZlRHJhaW5lZFF1ZXVlcyIsIl90cmFtcG9saW5lRW5hYmxlZCIsImRyYWluUXVldWVzIiwiX2RyYWluUXVldWVzIiwiX3NjaGVkdWxlIiwic2NoZWR1bGUiLCJBc3luY0ludm9rZUxhdGVyIiwiZm4iLCJyZWNlaXZlciIsImFyZyIsInB1c2giLCJfcXVldWVUaWNrIiwiQXN5bmNJbnZva2UiLCJBc3luY1NldHRsZVByb21pc2VzIiwiX3B1c2hPbmUiLCJmaXJzdExpbmVFcnJvciIsInV0aWwiLCJzZXRTY2hlZHVsZXIiLCJwcmV2IiwiaGFzQ3VzdG9tU2NoZWR1bGVyIiwiZW5hYmxlVHJhbXBvbGluZSIsImRpc2FibGVUcmFtcG9saW5lSWZOZWNlc3NhcnkiLCJoYXNEZXZUb29scyIsImhhdmVJdGVtc1F1ZXVlZCIsImZhdGFsRXJyb3IiLCJpc05vZGUiLCJwcm9jZXNzIiwic3RkZXJyIiwid3JpdGUiLCJzdGFjayIsImV4aXQiLCJ0aHJvd0xhdGVyIiwiYXJndW1lbnRzIiwic2V0VGltZW91dCIsImludm9rZUxhdGVyIiwiaW52b2tlIiwic2V0dGxlUHJvbWlzZXMiLCJfc2V0dGxlUHJvbWlzZXMiLCJfZHJhaW5RdWV1ZSIsInF1ZXVlIiwic2hpZnQiLCJfcmVzZXQiLCIuL3F1ZXVlIiwiLi9zY2hlZHVsZSIsIi4vdXRpbCIsIjMiLCJJTlRFUk5BTCIsInRyeUNvbnZlcnRUb1Byb21pc2UiLCJkZWJ1ZyIsImNhbGxlZEJpbmQiLCJyZWplY3RUaGlzIiwiXyIsIl9yZWplY3QiLCJ0YXJnZXRSZWplY3RlZCIsImNvbnRleHQiLCJwcm9taXNlUmVqZWN0aW9uUXVldWVkIiwiYmluZGluZ1Byb21pc2UiLCJfdGhlbiIsImJpbmRpbmdSZXNvbHZlZCIsInRoaXNBcmciLCJfYml0RmllbGQiLCJfcmVzb2x2ZUNhbGxiYWNrIiwidGFyZ2V0IiwiYmluZGluZ1JlamVjdGVkIiwiYmluZCIsIl9wcm9wYWdhdGVGcm9tIiwicHJvcGFnYXRlRnJvbUZ1bmN0aW9uIiwiX2JvdW5kVmFsdWUiLCJib3VuZFZhbHVlRnVuY3Rpb24iLCJtYXliZVByb21pc2UiLCJfdGFyZ2V0IiwiX3NldEJvdW5kVG8iLCJ1bmRlZmluZWQiLCJfc2V0T25DYW5jZWwiLCJvYmoiLCJfYm91bmRUbyIsIl9pc0JvdW5kIiwidmFsdWUiLCJyZXNvbHZlIiwiNCIsIm9sZCIsImJsdWViaXJkIiwibm9Db25mbGljdCIsIi4vcHJvbWlzZSIsIjUiLCJjciIsIk9iamVjdCIsImNyZWF0ZSIsImNhbGxlckNhY2hlIiwiZ2V0dGVyQ2FjaGUiLCJlbnN1cmVNZXRob2QiLCJtZXRob2ROYW1lIiwibWVzc2FnZSIsImNsYXNzU3RyaW5nIiwidG9TdHJpbmciLCJUeXBlRXJyb3IiLCJjYWxsZXIiLCJwb3AiLCJhcHBseSIsIm5hbWVkR2V0dGVyIiwiaW5kZXhlZEdldHRlciIsImluZGV4IiwiTWF0aCIsIm1heCIsImdldEdldHRlciIsImNhbkV2YWx1YXRlIiwiaXNJZGVudGlmaWVyIiwiYXJncyIsInNsaWNlIiwiZ2V0IiwicHJvcGVydHlOYW1lIiwiZ2V0dGVyIiwibWF5YmVHZXR0ZXIiLCI2IiwiUHJvbWlzZUFycmF5IiwiYXBpUmVqZWN0aW9uIiwidHJ5Q2F0Y2giLCJlcnJvck9iaiIsImFzeW5jIiwiX2FzeW5jIiwiY2FuY2VsIiwiY2FuY2VsbGF0aW9uIiwiX3dhcm4iLCJjaGlsZCIsIl9pc0NhbmNlbGxhYmxlIiwiX2NhbmNlbEJ5IiwiX2lzRm9sbG93aW5nIiwiX2ZvbGxvd2VlIiwiX2NhbmNlbEJyYW5jaGVkIiwicGFyZW50IiwiX2NhbmNlbGxhdGlvblBhcmVudCIsIl9zZXRXaWxsQmVDYW5jZWxsZWQiLCJfYnJhbmNoSGFzQ2FuY2VsbGVkIiwiX2JyYW5jaGVzUmVtYWluaW5nVG9DYW5jZWwiLCJfZW5vdWdoQnJhbmNoZXNIYXZlQ2FuY2VsbGVkIiwiY2FuY2VsbGVyIiwiX2ludm9rZU9uQ2FuY2VsIiwiX2NhbmNlbCIsIl9zZXRDYW5jZWxsZWQiLCJfY2FuY2VsUHJvbWlzZXMiLCJfbGVuZ3RoIiwiX3Vuc2V0T25DYW5jZWwiLCJfb25DYW5jZWxGaWVsZCIsImlzUGVuZGluZyIsIl9pc0NhbmNlbGxlZCIsImlzQ2FuY2VsbGFibGUiLCJpc0NhbmNlbGxlZCIsIl9kb0ludm9rZU9uQ2FuY2VsIiwib25DYW5jZWxDYWxsYmFjayIsImludGVybmFsT25seSIsImlzQXJyYXkiLCJfYXR0YWNoRXh0cmFUcmFjZSIsIl9yZXN1bHRDYW5jZWxsZWQiLCJfb25DYW5jZWwiLCJfaW52b2tlSW50ZXJuYWxPbkNhbmNlbCIsIjciLCJORVhUX0ZJTFRFUiIsImdldEtleXMiLCJrZXlzIiwiaW5zdGFuY2VzIiwiY2IiLCJib3VuZFRvIiwicHJlZGljYXRlTG9vcCIsIml0ZW0iLCJtYXRjaGVzUHJlZGljYXRlIiwiaXNPYmplY3QiLCJqIiwia2V5IiwiLi9lczUiLCI4IiwiQ29udGV4dCIsIl90cmFjZSIsIkNhcHR1cmVkVHJhY2UiLCJwZWVrQ29udGV4dCIsImxhc3RJbmRleCIsImNvbnRleHRTdGFjayIsImxvbmdTdGFja1RyYWNlcyIsIl9wcm9taXNlQ3JlYXRlZCIsIl9wdXNoQ29udGV4dCIsIl9wb3BDb250ZXh0IiwiX3BlZWtDb250ZXh0IiwidHJhY2UiLCJkZWFjdGl2YXRlTG9uZ1N0YWNrVHJhY2VzIiwiYWN0aXZhdGVMb25nU3RhY2tUcmFjZXMiLCJQcm9taXNlX3B1c2hDb250ZXh0IiwiUHJvbWlzZV9wb3BDb250ZXh0IiwiUHJvbWlzZV9QZWVrQ29udGV4dCIsIlByb21pc2VfcGVla0NvbnRleHQiLCJQcm9taXNlX3Byb21pc2VDcmVhdGVkIiwiY3R4IiwiOSIsImdlbmVyYXRlUHJvbWlzZUxpZmVjeWNsZUV2ZW50T2JqZWN0IiwibmFtZSIsImRlZmF1bHRGaXJlRXZlbnQiLCJjYW5jZWxsYXRpb25FeGVjdXRlIiwiZXhlY3V0b3IiLCJyZWplY3QiLCJvbkNhbmNlbCIsIl9hdHRhY2hDYW5jZWxsYXRpb25DYWxsYmFjayIsImNhbmNlbGxhdGlvbkF0dGFjaENhbmNlbGxhdGlvbkNhbGxiYWNrIiwicHJldmlvdXNPbkNhbmNlbCIsImNhbmNlbGxhdGlvbk9uQ2FuY2VsIiwiY2FuY2VsbGF0aW9uU2V0T25DYW5jZWwiLCJjYW5jZWxsYXRpb25DbGVhckNhbmNlbGxhdGlvbkRhdGEiLCJjYW5jZWxsYXRpb25Qcm9wYWdhdGVGcm9tIiwiZmxhZ3MiLCJicmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsIiwiaXNGdWxmaWxsZWQiLCJsb25nU3RhY2tUcmFjZXNDYXB0dXJlU3RhY2tUcmFjZSIsImxvbmdTdGFja1RyYWNlc0F0dGFjaEV4dHJhVHJhY2UiLCJlcnJvciIsImlnbm9yZVNlbGYiLCJjYW5BdHRhY2hUcmFjZSIsIl9wYXJlbnQiLCJhdHRhY2hFeHRyYVRyYWNlIiwiX19zdGFja0NsZWFuZWRfXyIsInBhcnNlZCIsInBhcnNlU3RhY2tBbmRNZXNzYWdlIiwibm90RW51bWVyYWJsZVByb3AiLCJqb2luIiwid2FybiIsInNob3VsZFVzZU93blRyYWNlIiwiY29uZmlnIiwid2FybmluZ3MiLCJ3YXJuaW5nIiwiV2FybmluZyIsImFjdGl2ZUZpcmVFdmVudCIsImZvcm1hdEFuZExvZ0Vycm9yIiwicmVjb25zdHJ1Y3RTdGFjayIsInN0YWNrcyIsInJlbW92ZUR1cGxpY2F0ZU9yRW1wdHlKdW1wcyIsInNwbGljZSIsInJlbW92ZUNvbW1vblJvb3RzIiwiY3VycmVudCIsImN1cnJlbnRMYXN0SW5kZXgiLCJjdXJyZW50TGFzdExpbmUiLCJjb21tb25Sb290TWVldFBvaW50IiwibGluZSIsImNsZWFuU3RhY2siLCJpc1RyYWNlTGluZSIsInN0YWNrRnJhbWVQYXR0ZXJuIiwidGVzdCIsImlzSW50ZXJuYWxGcmFtZSIsInNob3VsZElnbm9yZSIsImluZGVudFN0YWNrRnJhbWVzIiwiY2hhckF0Iiwic3RhY2tGcmFtZXNBc0FycmF5IiwicmVwbGFjZSIsInNwbGl0IiwidGl0bGUiLCJpc1NvZnQiLCJjb25zb2xlIiwiZm9ybWF0U3RhY2siLCJTdHJpbmciLCJwcmludFdhcm5pbmciLCJsb2ciLCJmaXJlUmVqZWN0aW9uRXZlbnQiLCJsb2NhbEhhbmRsZXIiLCJyZWFzb24iLCJsb2NhbEV2ZW50RmlyZWQiLCJmb3JtYXROb25FcnJvciIsInN0ciIsIkpTT04iLCJzdHJpbmdpZnkiLCJzbmlwIiwic3Vic3RyIiwibWF4Q2hhcnMiLCJsb25nU3RhY2tUcmFjZXNJc1N1cHBvcnRlZCIsImNhcHR1cmVTdGFja1RyYWNlIiwicGFyc2VMaW5lSW5mbyIsIm1hdGNoZXMiLCJtYXRjaCIsInBhcnNlTGluZUluZm9SZWdleCIsImZpbGVOYW1lIiwicGFyc2VJbnQiLCJfcHJvbWlzZXNDcmVhdGVkIiwidW5jeWNsZSIsInVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQiLCJwb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiIsImdldERvbWFpbiIsIl9nZXREb21haW4iLCJibHVlYmlyZEZyYW1lUGF0dGVybiIsIm5vZGVGcmFtZVBhdHRlcm4iLCJwYXJzZUxpbmVQYXR0ZXJuIiwiZGVidWdnaW5nIiwiZW52Iiwid0ZvcmdvdHRlblJldHVybiIsInN1cHByZXNzVW5oYW5kbGVkUmVqZWN0aW9ucyIsIl9lbnN1cmVQb3NzaWJsZVJlamVjdGlvbkhhbmRsZWQiLCJfc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQiLCJfbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uIiwiX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCIsIl9zZXRSZXR1cm5lZE5vblVuZGVmaW5lZCIsIl9yZXR1cm5lZE5vblVuZGVmaW5lZCIsIl9pc1JlamVjdGlvblVuaGFuZGxlZCIsIl9zZXR0bGVkVmFsdWUiLCJfc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCIsIl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQiLCJfaXNVbmhhbmRsZWRSZWplY3Rpb25Ob3RpZmllZCIsIl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkIiwib25Qb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiIsImRvbWFpbiIsImRvbWFpbkJpbmQiLCJvblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQiLCJkaXNhYmxlTG9uZ1N0YWNrVHJhY2VzIiwiUHJvbWlzZV9jYXB0dXJlU3RhY2tUcmFjZSIsIl9jYXB0dXJlU3RhY2tUcmFjZSIsIlByb21pc2VfYXR0YWNoRXh0cmFUcmFjZSIsImhhc0xvbmdTdGFja1RyYWNlcyIsImZpcmVEb21FdmVudCIsIkN1c3RvbUV2ZW50IiwiZXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiZG9tRXZlbnQiLCJ0b0xvd2VyQ2FzZSIsImRldGFpbCIsImNhbmNlbGFibGUiLCJFdmVudCIsImRvY3VtZW50IiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJmaXJlR2xvYmFsRXZlbnQiLCJlbWl0IiwibWV0aG9kIiwiZXZlbnRUb09iamVjdEdlbmVyYXRvciIsInByb21pc2VDcmVhdGVkIiwicHJvbWlzZUZ1bGZpbGxlZCIsInByb21pc2VSZWplY3RlZCIsInByb21pc2VSZXNvbHZlZCIsInByb21pc2VDYW5jZWxsZWQiLCJwcm9taXNlQ2hhaW5lZCIsInVuaGFuZGxlZFJlamVjdGlvbiIsInJlamVjdGlvbkhhbmRsZWQiLCJnbG9iYWxFdmVudEZpcmVkIiwiZG9tRXZlbnRGaXJlZCIsIm9wdHMiLCJ3YXJuaW5nc09wdGlvbiIsIl9jbGVhckNhbmNlbGxhdGlvbkRhdGEiLCJfZXhlY3V0ZSIsIm1vbml0b3JpbmciLCJfZmlyZUV2ZW50IiwiaGFuZGxlciIsImluaGVyaXRzIiwibm9kZXMiLCJzdGFja1RvSW5kZXgiLCJub2RlIiwiY3ljbGVFZGdlTm9kZSIsImN1cnJlbnRDaGlsZExlbmd0aCIsInY4c3RhY2tGcmFtZVBhdHRlcm4iLCJ2OHN0YWNrRm9ybWF0dGVyIiwic3RhY2tUcmFjZUxpbWl0IiwiaWdub3JlVW50aWwiLCJlcnIiLCJpbmRleE9mIiwiaGFzU3RhY2tBZnRlclRocm93IiwiaXNUVFkiLCJjb2xvciIsImNoZWNrRm9yZ290dGVuUmV0dXJucyIsInJldHVyblZhbHVlIiwiaGFuZGxlckxpbmUiLCJjcmVhdG9yTGluZSIsInRyYWNlTGluZXMiLCJsaW5lTWF0Y2hlcyIsImZpcnN0VXNlckxpbmUiLCJtc2ciLCJzZXRCb3VuZHMiLCJsYXN0TGluZUVycm9yIiwiZmlyc3RGaWxlTmFtZSIsImxhc3RGaWxlTmFtZSIsImZpcnN0U3RhY2tMaW5lcyIsImxhc3RTdGFja0xpbmVzIiwiZmlyc3RJbmRleCIsInJlc3VsdCIsImluZm8iLCJkZXByZWNhdGVkIiwicmVwbGFjZW1lbnQiLCIuL2Vycm9ycyIsIjEwIiwicmV0dXJuZXIiLCJ0aHJvd2VyIiwidGhlblJldHVybiIsInRoZW5UaHJvdyIsImNhdGNoVGhyb3ciLCJfcmVhc29uIiwiY2F1Z2h0IiwiY2F0Y2hSZXR1cm4iLCJfdmFsdWUiLCIxMSIsInByb21pc2VBbGxUaGlzIiwiUHJvbWlzZUFsbCIsIlByb21pc2VSZWR1Y2UiLCJyZWR1Y2UiLCJhbGwiLCJlYWNoIiwibWFwU2VyaWVzIiwiMTIiLCJzdWJFcnJvciIsIm5hbWVQcm9wZXJ0eSIsImRlZmF1bHRNZXNzYWdlIiwiU3ViRXJyb3IiLCJjb25zdHJ1Y3RvciIsIk9wZXJhdGlvbmFsRXJyb3IiLCJjYXVzZSIsIl9UeXBlRXJyb3IiLCJfUmFuZ2VFcnJvciIsImVzNSIsIk9iamVjdGZyZWV6ZSIsImZyZWV6ZSIsIkNhbmNlbGxhdGlvbkVycm9yIiwiVGltZW91dEVycm9yIiwiQWdncmVnYXRlRXJyb3IiLCJSYW5nZUVycm9yIiwibWV0aG9kcyIsIkFycmF5IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsImVudW1lcmFibGUiLCJsZXZlbCIsImluZGVudCIsImxpbmVzIiwiZXJyb3JUeXBlcyIsIlJlamVjdGlvbkVycm9yIiwiMTMiLCJpc0VTNSIsImdldERlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJuYW1lcyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRQcm90b3R5cGVPZiIsInByb3BlcnR5SXNXcml0YWJsZSIsInByb3AiLCJkZXNjcmlwdG9yIiwic2V0IiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJwcm90byIsIk9iamVjdEtleXMiLCJkZXNjIiwiMTQiLCJQcm9taXNlTWFwIiwibWFwIiwiZmlsdGVyIiwib3B0aW9ucyIsIjE1IiwiUGFzc1Rocm91Z2hIYW5kbGVyQ29udGV4dCIsInR5cGUiLCJjYWxsZWQiLCJjYW5jZWxQcm9taXNlIiwiRmluYWxseUhhbmRsZXJDYW5jZWxSZWFjdGlvbiIsImZpbmFsbHlIYW5kbGVyIiwiY2hlY2tDYW5jZWwiLCJzdWNjZWVkIiwiZmFpbCIsInJlYXNvbk9yVmFsdWUiLCJpc0ZpbmFsbHlIYW5kbGVyIiwiaXNSZWplY3RlZCIsImNhdGNoRmlsdGVyIiwiX3Bhc3NUaHJvdWdoIiwic3VjY2VzcyIsInRoZW4iLCJsYXN0bHkiLCJ0YXAiLCJ0YXBDYXRjaCIsImhhbmRsZXJPclByZWRpY2F0ZSIsImxlbiIsImNhdGNoSW5zdGFuY2VzIiwiLi9jYXRjaF9maWx0ZXIiLCIxNiIsIlByb3h5YWJsZSIsInByb21pc2VGcm9tWWllbGRIYW5kbGVyIiwieWllbGRIYW5kbGVycyIsInRyYWNlUGFyZW50IiwiUHJvbWlzZVNwYXduIiwiZ2VuZXJhdG9yRnVuY3Rpb24iLCJ5aWVsZEhhbmRsZXIiLCJpbnRlcm5hbCIsIl9maW5hbGx5UHJvbWlzZSIsIl9wcm9taXNlIiwiX3N0YWNrIiwiX2dlbmVyYXRvckZ1bmN0aW9uIiwiX3JlY2VpdmVyIiwiX2dlbmVyYXRvciIsIl95aWVsZEhhbmRsZXJzIiwiY29uY2F0IiwiX3lpZWxkZWRQcm9taXNlIiwiX2NhbmNlbGxhdGlvblBoYXNlIiwiX2lzUmVzb2x2ZWQiLCJfY2xlYW51cCIsIl9mdWxmaWxsIiwiX3Byb21pc2VDYW5jZWxsZWQiLCJjb3JvdXRpbmUiLCJyZXR1cm5TZW50aW5lbCIsIl9jb250aW51ZSIsIl9wcm9taXNlRnVsZmlsbGVkIiwibmV4dCIsIl9wcm9taXNlUmVqZWN0ZWQiLCJfcnVuIiwiX3JlamVjdENhbGxiYWNrIiwiZG9uZSIsImJpdEZpZWxkIiwiX3Byb3h5IiwiUHJvbWlzZVNwYXduJCIsImdlbmVyYXRvciIsInNwYXduIiwiYWRkWWllbGRIYW5kbGVyIiwiMTciLCJsYXN0Iiwic3ByZWFkIiwiMTgiLCJNYXBwaW5nUHJvbWlzZUFycmF5IiwibGltaXQiLCJfZmlsdGVyIiwiY29uc3RydWN0b3IkIiwiX2NhbGxiYWNrIiwiX3ByZXNlcnZlZFZhbHVlcyIsIl9saW1pdCIsIl9pbkZsaWdodCIsIl9xdWV1ZSIsIl9hc3luY0luaXQiLCJjb25jdXJyZW5jeSIsImlzRmluaXRlIiwiX2luaXQkIiwiX2luaXQiLCJ2YWx1ZXMiLCJfdmFsdWVzIiwicHJlc2VydmVkVmFsdWVzIiwiY2FsbGJhY2siLCJfdG90YWxSZXNvbHZlZCIsIl9yZXNvbHZlIiwiYm9vbGVhbnMiLCIxOSIsIl9yZXNvbHZlRnJvbVN5bmNWYWx1ZSIsImF0dGVtcHQiLCIyMCIsImlzVW50eXBlZEVycm9yIiwid3JhcEFzT3BlcmF0aW9uYWxFcnJvciIsInJFcnJvcktleSIsIm1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbiIsIm1heWJlV3JhcEFzRXJyb3IiLCJtdWx0aUFyZ3MiLCJ3cmFwcGVkIiwiMjEiLCJzcHJlYWRBZGFwdGVyIiwidmFsIiwibm9kZWJhY2siLCJzdWNjZXNzQWRhcHRlciIsImVycm9yQWRhcHRlciIsIm5ld1JlYXNvbiIsImFzQ2FsbGJhY2siLCJub2RlaWZ5IiwiYWRhcHRlciIsIjIyIiwiY2hlY2siLCJfZnVsZmlsbG1lbnRIYW5kbGVyMCIsIl9yZWplY3Rpb25IYW5kbGVyMCIsIl9wcm9taXNlMCIsIl9yZWNlaXZlcjAiLCJfcmVzb2x2ZUZyb21FeGVjdXRvciIsImRlZmVyUmVzb2x2ZSIsInYiLCJkZWZlclJlamVjdCIsImZpbGxUeXBlcyIsInAiLCJtYWtlU2VsZlJlc29sdXRpb25FcnJvciIsInJlZmxlY3RIYW5kbGVyIiwiUHJvbWlzZUluc3BlY3Rpb24iLCJVTkRFRklORURfQklORElORyIsImVycm9ycyIsIkFQUExZIiwiY3JlYXRlQ29udGV4dCIsIm5vZGViYWNrRm9yUHJvbWlzZSIsInJlZmxlY3QiLCJkaWRGdWxmaWxsIiwiZGlkUmVqZWN0IiwiX3NldElzRmluYWwiLCJ0b0pTT04iLCJmdWxmaWxsbWVudFZhbHVlIiwicmVqZWN0aW9uUmVhc29uIiwib3JpZ2luYXRlc0Zyb21SZWplY3Rpb24iLCJnZXROZXdMaWJyYXJ5Q29weSIsImlzIiwiZnJvbU5vZGUiLCJmcm9tQ2FsbGJhY2siLCJfaXNGYXRlU2VhbGVkIiwiX3NldEFzeW5jR3VhcmFudGVlZCIsImNhc3QiLCJfc2V0RnVsZmlsbGVkIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJpbnRlcm5hbERhdGEiLCJoYXZlSW50ZXJuYWxEYXRhIiwic2V0dGxlciIsIl9zZXR0bGVQcm9taXNlQ3R4IiwiX3NldHRsZVByb21pc2VMYXRlQ2FuY2VsbGF0aW9uT2JzZXJ2ZXIiLCJfYWRkQ2FsbGJhY2tzIiwiX3NldExlbmd0aCIsIl9zZXRSZWplY3RlZCIsIl9zZXRGb2xsb3dpbmciLCJfaXNGaW5hbCIsIl91bnNldENhbmNlbGxlZCIsIl9yZWNlaXZlckF0IiwiX3Byb21pc2VBdCIsIl9mdWxmaWxsbWVudEhhbmRsZXJBdCIsIl9yZWplY3Rpb25IYW5kbGVyQXQiLCJfbWlncmF0ZUNhbGxiYWNrMCIsImZvbGxvd2VyIiwiZnVsZmlsbCIsIl9taWdyYXRlQ2FsbGJhY2tBdCIsImJhc2UiLCJwcm94eWFibGUiLCJzaG91bGRCaW5kIiwiX3NldEZvbGxvd2VlIiwic3luY2hyb25vdXMiLCJpZ25vcmVOb25FcnJvcldhcm5pbmdzIiwiZW5zdXJlRXJyb3JPYmplY3QiLCJoYXNTdGFjayIsIl9zZXR0bGVQcm9taXNlRnJvbUhhbmRsZXIiLCJ4IiwiX3NldHRsZVByb21pc2UiLCJpc1Byb21pc2UiLCJhc3luY0d1YXJhbnRlZWQiLCJfc2V0dGxlUHJvbWlzZTAiLCJfY2xlYXJDYWxsYmFja0RhdGFBdEluZGV4IiwiX2Z1bGZpbGxQcm9taXNlcyIsIl9yZWplY3RQcm9taXNlcyIsImRlZmVyIiwicGVuZGluZyIsInZlcnNpb24iLCJ0b0Zhc3RQcm9wZXJ0aWVzIiwiYiIsImMiLCIuL2FueS5qcyIsIi4vYXN5bmMiLCIuL2JpbmQiLCIuL2NhbGxfZ2V0LmpzIiwiLi9jYW5jZWwiLCIuL2NvbnRleHQiLCIuL2RlYnVnZ2FiaWxpdHkiLCIuL2RpcmVjdF9yZXNvbHZlIiwiLi9lYWNoLmpzIiwiLi9maWx0ZXIuanMiLCIuL2ZpbmFsbHkiLCIuL2dlbmVyYXRvcnMuanMiLCIuL2pvaW4iLCIuL21hcC5qcyIsIi4vbWV0aG9kIiwiLi9ub2RlYmFjayIsIi4vbm9kZWlmeS5qcyIsIi4vcHJvbWlzZV9hcnJheSIsIi4vcHJvbWlzaWZ5LmpzIiwiLi9wcm9wcy5qcyIsIi4vcmFjZS5qcyIsIi4vcmVkdWNlLmpzIiwiLi9zZXR0bGUuanMiLCIuL3NvbWUuanMiLCIuL3N5bmNocm9ub3VzX2luc3BlY3Rpb24iLCIuL3RoZW5hYmxlcyIsIi4vdGltZXJzLmpzIiwiLi91c2luZy5qcyIsIjIzIiwidG9SZXNvbHV0aW9uVmFsdWUiLCJNYXAiLCJyZXNvbHZlVmFsdWVJZkVtcHR5IiwiYXNBcnJheSIsIl9pdGVyYXRlIiwiX3Jlc29sdmVFbXB0eUFycmF5IiwiZ2V0QWN0dWFsTGVuZ3RoIiwic2hvdWxkQ29weVZhbHVlcyIsImlzUmVzb2x2ZWQiLCIyNCIsInByb3BzRmlsdGVyIiwibm9Db3B5UHJvcHNQYXR0ZXJuIiwiaXNQcm9taXNpZmllZCIsIl9faXNQcm9taXNpZmllZF9fIiwiaGFzUHJvbWlzaWZpZWQiLCJzdWZmaXgiLCJnZXREYXRhUHJvcGVydHlPckRlZmF1bHQiLCJkZWZhdWx0UHJvbWlzaWZpZWQiLCJjaGVja1ZhbGlkIiwic3VmZml4UmVnZXhwIiwia2V5V2l0aG91dEFzeW5jU3VmZml4IiwicHJvbWlzaWZpYWJsZU1ldGhvZHMiLCJpbmhlcml0ZWREYXRhS2V5cyIsInBhc3Nlc0RlZmF1bHRGaWx0ZXIiLCJkZWZhdWx0RmlsdGVyIiwicHJvbWlzaWZ5QWxsIiwicHJvbWlzaWZpZXIiLCJSZWdFeHAiLCJlc2NhcGVJZGVudFJlZ2V4IiwicHJvbWlzaWZpZWRLZXkiLCJtYWtlTm9kZVByb21pc2lmaWVkIiwiVEhJUyIsInByb21pc2lmaWVkIiwicHJvbWlzaWZ5IiwibWFrZU5vZGVQcm9taXNpZmllZEV2YWwiLCJ3aXRoQXBwZW5kZWQiLCJub0NvcHlQcm9wcyIsIl9fIiwiZGVmYXVsdFRoaXMiLCJjb3B5RGVzY3JpcHRvcnMiLCJpc0NsYXNzIiwiMjUiLCJQcm9wZXJ0aWVzUHJvbWlzZUFycmF5IiwiZW50cmllcyIsImlzTWFwIiwiRXM2TWFwIiwibWFwVG9FbnRyaWVzIiwiX2lzTWFwIiwicHJvcHMiLCJjYXN0VmFsdWUiLCJleHRyYWN0RW50cnkiLCJzaXplIiwiZm9yRWFjaCIsImVudHJpZXNUb01hcCIsImtleU9mZnNldCIsIjI2IiwiYXJyYXlNb3ZlIiwic3JjIiwic3JjSW5kZXgiLCJkc3QiLCJkc3RJbmRleCIsImNhcGFjaXR5IiwiX2NhcGFjaXR5IiwiX2Zyb250IiwiX3dpbGxCZU92ZXJDYXBhY2l0eSIsIl9jaGVja0NhcGFjaXR5Iiwid3JhcE1hc2siLCJmcm9udCIsIl9yZXNpemVUbyIsIm9sZENhcGFjaXR5IiwiMjciLCJyYWNlIiwicmFjZUxhdGVyIiwiYXJyYXkiLCIyOCIsIlJlZHVjdGlvblByb21pc2VBcnJheSIsImluaXRpYWxWYWx1ZSIsIl9lYWNoIiwiX2ZuIiwiX2luaXRpYWxWYWx1ZSIsIl9jdXJyZW50Q2FuY2VsbGFibGUiLCJfZWFjaFZhbHVlcyIsImNvbXBsZXRlZCIsInZhbHVlT3JSZWFzb24iLCJnb3RBY2N1bSIsImFjY3VtIiwiX2dvdEFjY3VtIiwiZ290VmFsdWUiLCJfZWFjaENvbXBsZXRlIiwic2VuZGVyIiwiX3Jlc3VsdENhbmNlbGxlZCQiLCIyOSIsIk5hdGl2ZVByb21pc2UiLCJnZXROYXRpdmVQcm9taXNlIiwiTXV0YXRpb25PYnNlcnZlciIsIkdsb2JhbFNldEltbWVkaWF0ZSIsInNldEltbWVkaWF0ZSIsIlByb2Nlc3NOZXh0VGljayIsIm5leHRUaWNrIiwiaXNSZWNlbnROb2RlIiwibmF0aXZlUHJvbWlzZSIsIm5hdmlnYXRvciIsInN0YW5kYWxvbmUiLCJjb3Jkb3ZhIiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJ0b2dnbGVTY2hlZHVsZWQiLCJkaXYyIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwib2JzZXJ2ZSIsInNjaGVkdWxlVG9nZ2xlIiwiZGlzY29ubmVjdCIsIjMwIiwiU2V0dGxlZFByb21pc2VBcnJheSIsIl9wcm9taXNlUmVzb2x2ZWQiLCJpbnNwZWN0aW9uIiwiX3NldHRsZWRWYWx1ZUZpZWxkIiwic2V0dGxlIiwiMzEiLCJfaG93TWFueSIsIl91bndyYXAiLCJfaW5pdGlhbGl6ZWQiLCJzb21lIiwiaG93TWFueSIsIkNBTkNFTExBVElPTiIsImlzQXJyYXlSZXNvbHZlZCIsIl9jYW5Qb3NzaWJseUZ1bGZpbGwiLCJfZ2V0UmFuZ2VFcnJvciIsImNvdW50IiwiX2FkZEZ1bGZpbGxlZCIsIl9mdWxmaWxsZWQiLCJfYWRkUmVqZWN0ZWQiLCJfY2hlY2tPdXRjb21lIiwiX3JlamVjdGVkIiwiMzIiLCJfX2lzQ2FuY2VsbGVkIiwiMzMiLCJkb0dldFRoZW4iLCJnZXRUaGVuIiwiaXNBbnlCbHVlYmlyZFByb21pc2UiLCJoYXNQcm9wIiwiZG9UaGVuYWJsZSIsIjM0IiwiSGFuZGxlV3JhcHBlciIsImhhbmRsZSIsInN1Y2Nlc3NDbGVhciIsImNsZWFyVGltZW91dCIsImZhaWx1cmVDbGVhciIsImFmdGVyVmFsdWUiLCJkZWxheSIsIm1zIiwiYWZ0ZXJUaW1lb3V0IiwidGltZW91dCIsImhhbmRsZVdyYXBwZXIiLCIzNSIsImNhc3RQcmVzZXJ2aW5nRGlzcG9zYWJsZSIsInRoZW5hYmxlIiwiX2lzRGlzcG9zYWJsZSIsIl9nZXREaXNwb3NlciIsIl9zZXREaXNwb3NhYmxlIiwiZGlzcG9zZSIsInJlc291cmNlcyIsIml0ZXJhdG9yIiwidHJ5RGlzcG9zZSIsIkRpc3Bvc2VyIiwiZGF0YSIsIl9kYXRhIiwiX2NvbnRleHQiLCJGdW5jdGlvbkRpc3Bvc2VyIiwibWF5YmVVbndyYXBEaXNwb3NlciIsImlzRGlzcG9zZXIiLCJSZXNvdXJjZUxpc3QiLCJOVUxMIiwicmVzb3VyY2UiLCJkb0Rpc3Bvc2UiLCJfdW5zZXREaXNwb3NhYmxlIiwiZCIsInVzaW5nIiwiaW5wdXQiLCJzcHJlYWRBcmdzIiwiZGlzcG9zZXIiLCJyZWZsZWN0ZWRSZXNvdXJjZXMiLCJyZXN1bHRQcm9taXNlIiwiaW5zcGVjdGlvbnMiLCJfZGlzcG9zZXIiLCIzNiIsInRyeUNhdGNoZXIiLCJ0cnlDYXRjaFRhcmdldCIsImlzUHJpbWl0aXZlIiwibWF5YmVFcnJvciIsInNhZmVUb1N0cmluZyIsImFwcGVuZGVlIiwiZGVmYXVsdFZhbHVlIiwiaGFzTWV0aG9kcyIsImhhc01ldGhvZHNPdGhlclRoYW5Db25zdHJ1Y3RvciIsImhhc1RoaXNBc3NpZ25tZW50QW5kU3RhdGljTWV0aG9kcyIsInRoaXNBc3NpZ25tZW50UGF0dGVybiIsIkZha2VDb25zdHJ1Y3RvciIsInJpZGVudCIsImZpbGxlZFJhbmdlIiwicHJlZml4IiwiaXNFcnJvciIsImlnbm9yZSIsImZyb20iLCJ0byIsImhhc0VudlZhcmlhYmxlcyIsImdsb2JhbE9iamVjdCIsIkNoaWxkIiwiUGFyZW50IiwiVCIsImV4Y2x1ZGVkUHJvdG90eXBlcyIsIkZ1bmN0aW9uIiwiaXNFeGNsdWRlZFByb3RvIiwidmlzaXRlZEtleXMiLCJlbnVtZXJhdGlvbiIsIlN5bWJvbCIsIkFycmF5RnJvbSIsIml0UmVzdWx0IiwiaXQiLCJjaHJvbWUiLCJsb2FkVGltZXMiLCJ2ZXJzaW9ucyIsIk51bWJlciIsIlAiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsInJ1blRpbWVvdXQiLCJmdW4iLCJjYWNoZWRTZXRUaW1lb3V0IiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwiY2FjaGVkQ2xlYXJUaW1lb3V0IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5pbmciLCJjdXJyZW50UXVldWUiLCJxdWV1ZUluZGV4IiwiZHJhaW5RdWV1ZSIsInJ1biIsIkl0ZW0iLCJub29wIiwiYnJvd3NlciIsImFyZ3YiLCJvbiIsImFkZExpc3RlbmVyIiwib25jZSIsIm9mZiIsInJlbW92ZUxpc3RlbmVyIiwicmVtb3ZlQWxsTGlzdGVuZXJzIiwicHJlcGVuZExpc3RlbmVyIiwicHJlcGVuZE9uY2VMaXN0ZW5lciIsImxpc3RlbmVycyIsImJpbmRpbmciLCJjd2QiLCJjaGRpciIsImRpciIsInVtYXNrIiwiY3JlYXRlUmVkdWNlIiwiaXRlcmF0ZWUiLCJtZW1vIiwiY3VycmVudEtleSIsIm9wdGltaXplQ2IiLCJpc0FycmF5TGlrZSIsImNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyIiwicHJlZGljYXRlIiwiZ2V0TGVuZ3RoIiwiY3JlYXRlSW5kZXhGaW5kZXIiLCJwcmVkaWNhdGVGaW5kIiwic29ydGVkSW5kZXgiLCJpZHgiLCJtaW4iLCJpc05hTiIsImNvbGxlY3ROb25FbnVtUHJvcHMiLCJub25FbnVtSWR4Iiwibm9uRW51bWVyYWJsZVByb3BzIiwiaXNGdW5jdGlvbiIsIk9ialByb3RvIiwiY29udGFpbnMiLCJyb290IiwicHJldmlvdXNVbmRlcnNjb3JlIiwiQXJyYXlQcm90byIsIkZ1bmNQcm90byIsIm5hdGl2ZUlzQXJyYXkiLCJuYXRpdmVLZXlzIiwibmF0aXZlQmluZCIsIm5hdGl2ZUNyZWF0ZSIsIkN0b3IiLCJfd3JhcHBlZCIsIlZFUlNJT04iLCJmdW5jIiwiYXJnQ291bnQiLCJvdGhlciIsImNvbGxlY3Rpb24iLCJhY2N1bXVsYXRvciIsImlkZW50aXR5IiwibWF0Y2hlciIsInByb3BlcnR5IiwiSW5maW5pdHkiLCJjcmVhdGVBc3NpZ25lciIsImtleXNGdW5jIiwidW5kZWZpbmVkT25seSIsInNvdXJjZSIsImJhc2VDcmVhdGUiLCJNQVhfQVJSQVlfSU5ERVgiLCJwb3ciLCJjb2xsZWN0IiwicmVzdWx0cyIsImZvbGRsIiwiaW5qZWN0IiwicmVkdWNlUmlnaHQiLCJmb2xkciIsImZpbmQiLCJkZXRlY3QiLCJmaW5kSW5kZXgiLCJmaW5kS2V5Iiwic2VsZWN0IiwibGlzdCIsIm5lZ2F0ZSIsImV2ZXJ5IiwiaW5jbHVkZXMiLCJpbmNsdWRlIiwiZnJvbUluZGV4IiwiZ3VhcmQiLCJpc0Z1bmMiLCJwbHVjayIsIndoZXJlIiwiYXR0cnMiLCJmaW5kV2hlcmUiLCJjb21wdXRlZCIsImxhc3RDb21wdXRlZCIsInNodWZmbGUiLCJyYW5kIiwic2h1ZmZsZWQiLCJyYW5kb20iLCJzYW1wbGUiLCJzb3J0QnkiLCJjcml0ZXJpYSIsInNvcnQiLCJsZWZ0IiwicmlnaHQiLCJncm91cCIsImJlaGF2aW9yIiwiZ3JvdXBCeSIsImluZGV4QnkiLCJjb3VudEJ5IiwidG9BcnJheSIsInBhcnRpdGlvbiIsInBhc3MiLCJmaXJzdCIsImhlYWQiLCJ0YWtlIiwiaW5pdGlhbCIsInJlc3QiLCJ0YWlsIiwiZHJvcCIsImNvbXBhY3QiLCJmbGF0dGVuIiwic2hhbGxvdyIsInN0cmljdCIsInN0YXJ0SW5kZXgiLCJvdXRwdXQiLCJpc0FyZ3VtZW50cyIsIndpdGhvdXQiLCJkaWZmZXJlbmNlIiwidW5pcSIsInVuaXF1ZSIsImlzU29ydGVkIiwiaXNCb29sZWFuIiwic2VlbiIsInVuaW9uIiwiaW50ZXJzZWN0aW9uIiwiYXJnc0xlbmd0aCIsInppcCIsInVuemlwIiwib2JqZWN0IiwiZmluZExhc3RJbmRleCIsImxvdyIsImhpZ2giLCJtaWQiLCJmbG9vciIsImxhc3RJbmRleE9mIiwicmFuZ2UiLCJzdGFydCIsInN0b3AiLCJzdGVwIiwiY2VpbCIsImV4ZWN1dGVCb3VuZCIsInNvdXJjZUZ1bmMiLCJib3VuZEZ1bmMiLCJjYWxsaW5nQ29udGV4dCIsImJvdW5kIiwicGFydGlhbCIsImJvdW5kQXJncyIsInBvc2l0aW9uIiwiYmluZEFsbCIsIm1lbW9pemUiLCJoYXNoZXIiLCJjYWNoZSIsImFkZHJlc3MiLCJ3YWl0IiwidGhyb3R0bGUiLCJwcmV2aW91cyIsImxhdGVyIiwibGVhZGluZyIsIm5vdyIsInJlbWFpbmluZyIsInRyYWlsaW5nIiwiZGVib3VuY2UiLCJpbW1lZGlhdGUiLCJ0aW1lc3RhbXAiLCJjYWxsTm93Iiwid3JhcCIsIndyYXBwZXIiLCJjb21wb3NlIiwiYWZ0ZXIiLCJ0aW1lcyIsImJlZm9yZSIsImhhc0VudW1CdWciLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImFsbEtleXMiLCJtYXBPYmplY3QiLCJwYWlycyIsImludmVydCIsImZ1bmN0aW9ucyIsImV4dGVuZCIsImV4dGVuZE93biIsImFzc2lnbiIsInBpY2siLCJvaXRlcmF0ZWUiLCJvbWl0IiwiZGVmYXVsdHMiLCJjbG9uZSIsImludGVyY2VwdG9yIiwiaXNNYXRjaCIsImVxIiwiYVN0YWNrIiwiYlN0YWNrIiwiY2xhc3NOYW1lIiwiYXJlQXJyYXlzIiwiYUN0b3IiLCJiQ3RvciIsImlzRXF1YWwiLCJpc0VtcHR5IiwiaXNTdHJpbmciLCJpc0VsZW1lbnQiLCJub2RlVHlwZSIsIkludDhBcnJheSIsInBhcnNlRmxvYXQiLCJpc051bWJlciIsImlzTnVsbCIsImlzVW5kZWZpbmVkIiwiY29uc3RhbnQiLCJwcm9wZXJ0eU9mIiwiRGF0ZSIsImdldFRpbWUiLCJlc2NhcGVNYXAiLCImIiwiPCIsIj4iLCJcIiIsIiciLCJgIiwidW5lc2NhcGVNYXAiLCJjcmVhdGVFc2NhcGVyIiwiZXNjYXBlciIsInRlc3RSZWdleHAiLCJyZXBsYWNlUmVnZXhwIiwic3RyaW5nIiwiZXNjYXBlIiwidW5lc2NhcGUiLCJmYWxsYmFjayIsImlkQ291bnRlciIsInVuaXF1ZUlkIiwiaWQiLCJ0ZW1wbGF0ZVNldHRpbmdzIiwiZXZhbHVhdGUiLCJpbnRlcnBvbGF0ZSIsIm5vTWF0Y2giLCJlc2NhcGVzIiwiXFwiLCJcciIsIlxuIiwi4oCoIiwi4oCpIiwiZXNjYXBlQ2hhciIsInRlbXBsYXRlIiwidGV4dCIsInNldHRpbmdzIiwib2xkU2V0dGluZ3MiLCJvZmZzZXQiLCJ2YXJpYWJsZSIsInJlbmRlciIsImFyZ3VtZW50IiwiY2hhaW4iLCJpbnN0YW5jZSIsIl9jaGFpbiIsIm1peGluIiwidmFsdWVPZiIsImJ5dGVUb0hleCIsImJ1ZiIsImJ0aCIsInJuZyIsImNyeXB0byIsIm1zQ3J5cHRvIiwiZ2V0UmFuZG9tVmFsdWVzIiwicm5kczgiLCJVaW50OEFycmF5Iiwicm5kcyIsImJ5dGVzVG9VdWlkIiwiaWkiLCJNb2RlbCIsIl9jYWNoZSIsIl9leHRlbmREZWVwIiwiU3ViamVjdCIsIl9vYnNlcnZlcnMiLCJFbnRpdHkiLCJfaWQiLCJ1dWlkIiwiX25hbWUiLCJpc0ZhbHN5IiwiX3R5cGUiLCJfc3RhdHVzIiwibW9kZWwiLCJfc2V0T2JzZXJ2ZXJUeXBlIiwiRWxlbSIsIl9jb250YWluZXIiLCJfcm9vdCIsIl9sZXZlbCIsImRlZmluZVByb3BlcnRpZXMiLCJQcm90b1N0YXRlIiwicmVnaW9uIiwiX3JlZ2lvbnMiLCJTdGF0ZSIsInNhdmUiLCJhZGRNZXRob2QiLCJfZW50cnlBY3Rpb24iLCJlbnRyeUFjdGlvbiIsIl9leGl0QWN0aW9uIiwiZXhpdEFjdGlvbiIsIl9kb0FjdGl2aXR5IiwiZG9BY3Rpdml0eSIsIl9hdXRvVHJhbnNpdGlvbiIsImF1dG9UcmFuc2l0aW9uIiwiX2xvb3AiLCJsb29wIiwiX2ZwcyIsImZwcyIsIl9pbnRlcnZhbCIsIl90aW1lcklkIiwiX2xhc3RDYWxsVGltZSIsIk1hY2hpbmUiLCJfZGVwbG95ZWQiLCJfbGlua3MiLCJhcHBlbmRSZWdpb24iLCJGaW5hbFN0YXRlIiwiU3ViTWFjaGluZSIsIl9saW5rIiwiUHNldWRvU3RhdGUiLCJJbml0aWFsUHNldWRvU3RhdGUiLCJIaXN0b3J5UHNldWRvU3RhdGUiLCJkZWVwIiwiX2lzRGVlcCIsIlRlcm1pbmF0ZVBzZXVkb1N0YXRlIiwiQ2hvaWNlUHNldWRvU3RhdGUiLCJjb25kaXRpb24iLCJfY29uZGl0aW9uIiwiQ29ubmVjdGlvblBvaW50UHNldWRvU3RhdGUiLCJfa2V5IiwiX2hhc1N1YlJvb3QiLCJfaXNFbmRwb2ludCIsIkVudHJ5UG9pbnRQc2V1ZG9TdGF0ZSIsIkV4aXRQb2ludFBzZXVkb1N0YXRlIiwiVHJhbnNpdGlvbiIsIl9yYXdTb3VyY2UiLCJsb2dnZXIiLCJfcmF3VGFyZ2V0IiwiX3NvdXJjZSIsIl9ndWFyZCIsIl9lZmZlY3QiLCJlZmZlY3QiLCJfaW50ZXJuYWwiLCJfbG9ja2VkIiwibG9ja2VkIiwiX2lzRXhwbGljaXRFbnRyeSIsIl9leGl0VmlhRXhpdFBvaW50IiwiUmVnaW9uIiwiX2luaXRpYWxQc2V1ZG8iLCJfZmluYWwiLCJfaGlzdG9yeVBzZXVkbyIsIl9wcmV2aW91c1N0YXRlIiwiX3N0YXRlcyIsIl90cmFuc2l0cyIsIl9zZXREZWZhdWx0U3RhdGVzIiwiX2VhY2hFbnRpdHkiLCJzdGF0ZSIsIm0iLCJfZmluZFN0YXRlIiwidGFyZ2V0U3RhdGUiLCJzdWJsZXZlbCIsInN1YlJlZ2lvbiIsIl9maW5kRGVlcEhpc3RvcnlQc2V1ZG9TdGF0ZSIsImNvbnRhaW5lciIsImhhc0hpc3RvcnkiLCJfZ2V0VXBwZXJDb250YWluZXIiLCJfZmluZEZpcnN0VHJhbnNpdGlvbiIsInRyYW5zaXRzIiwidHJhbnNpdCIsIl9maW5kTmV4dFRyYW5zaXRpb24iLCJpc05vZGVKUyIsIkZTTSIsImRlYnVnZ2FibGUiLCJsb2dMZXZlbCIsImxvZ0xldmVsRGF0YSIsIkJvb2xlYW4iLCJhY2Nlc3NvciIsInVuc2V0IiwicmVzdG9yZSIsImNsZWFyIiwiaGVscGVyIiwiJGdldCIsInN1cGVyU3RhdGUiLCJfZ2V0U3VwZXJTdGF0ZSIsIiRzZXQiLCIkdW5zZXQiLCIkZXh0ZW5kIiwiJHNhdmUiLCIkcmVzdG9yZSIsIiRjbGVhciIsImRpc2FibGUiLCIkcHJvcHMiLCIkbWV0aG9kcyIsImFkZFN0YXRlIiwicmVtb3ZlU3RhdGUiLCJhZGRUcmFuc2l0aW9uIiwidHJhbnNpdGlvbiIsInJlbW92ZVRyYW5zaXRpb24iLCJyZW1vdmVSZWdpb24iLCJtYW5pcHVsYXRvciIsInN0YXRlcyIsIl9hZGRPYnNlcnZlciIsIl91cGRhdGUiLCJfcmVtb3ZlT2JzZXJ2ZXIiLCJjdXJyZW50TGV2ZWwiLCJfZ2V0UGFyZW50TGV2ZWwiLCJfZ2V0Um9vdCIsIl91cGRhdGVSZWxhdGlvbiIsImRlc3RpbmF0aW9uIiwiX2NvdW50T2JzZXJ2ZXJzIiwidHlwZXMiLCJvYnNlcnZlciIsIm9ic2VydmVycyIsIl9ub3RpZnkiLCJnZXRJZCIsImdldE5hbWUiLCJzZXROYW1lIiwiaXNBY3RpdmUiLCJfYWN0aXZhdGUiLCJfaW5hY3RpdmF0ZSIsImdldENvbnRhaW5lciIsImdldEN1cnJlbnRMZXZlbCIsImdldFJlZ2lvbiIsImNvbXBsZXRpb24iLCJfZXhpdCIsIl9lbnRyeSIsInRyaWdnZXIiLCJfc2V0VGltZXIiLCJfcmVwZWF0IiwiX2NsZWFyVGltZXIiLCJjdXJyZW50VGltZSIsInByb2Nlc3NpbmdUaW1lIiwidGltZVRvQ2FsbCIsIl90aW1lb3V0IiwicHJldmlvdXNUaW1lIiwiZGVsdGFUaW1lIiwiaGlzdG9yeSIsInByaW9yaXR5IiwiZGVwbG95IiwiZW50aXR5IiwidW5kZXBsb3kiLCJfc3RhY2tQcm9taXNlIiwiZmluaXNoIiwiX29uUmVqZWN0ZWQiLCJjYXRjaCIsIl9vbkVycm9yIiwiX2Fib3J0ZWQiLCJfb3V0ZXJFeGVjdXRpb24iLCJfbGlua0JhY2siLCJhZGRMaW5rIiwibWFjaGluZSIsInJlbW92ZUxpbmsiLCJfbGlua0ZvcndhcmQiLCJfaW5uZXJFeGVjdXRpb24iLCJleGl0UG9pbnQiLCJzZXRLZXkiLCJ1cHBlckNvbnRhaW5lciIsImdldEluZGV4IiwiX2NvbXBsZXRpb24iLCJfc2V0UHJldmlvdXNTdGF0ZSIsImluaXRpYWxQc2V1ZG8iLCJmaW5hbCIsIl9zZXREZWZhdWx0U3RhdGVOYW1lIl0sIm1hcHBpbmdzIjoiQ0FBQSxTQUFBQSxFQUFBQyxFQUFBQyxFQUFBQyxHQUFBLFNBQUFDLEVBQUFDLEVBQUFDLEdBQUEsSUFBQUosRUFBQUcsR0FBQSxDQUFBLElBQUFKLEVBQUFJLEdBQUEsQ0FBQSxJQUFBRSxFQUFBLG1CQUFBQyxTQUFBQSxRQUFBLElBQUFGLEdBQUFDLEVBQUEsT0FBQUEsRUFBQUYsR0FBQSxHQUFBLEdBQUFJLEVBQUEsT0FBQUEsRUFBQUosR0FBQSxHQUFBLElBQUFLLEVBQUEsSUFBQUMsTUFBQSx1QkFBQU4sRUFBQSxLQUFBLE1BQUFLLEVBQUFFLEtBQUEsbUJBQUFGLEVBQUEsSUFBQUcsRUFBQVgsRUFBQUcsSUFBQVMsWUFBQWIsRUFBQUksR0FBQSxHQUFBVSxLQUFBRixFQUFBQyxRQUFBLFNBQUFkLEdBQUEsSUFBQUUsRUFBQUQsRUFBQUksR0FBQSxHQUFBTCxHQUFBLE9BQUFJLEVBQUFGLEdBQUFGLElBQUFhLEVB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QyxJQUFBQSIsImZpbGUiOiJhc3luYy1mc20ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIHJlcXVpcmU9PVwiZnVuY3Rpb25cIiYmcmVxdWlyZTtmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkiLCIvKiBAcHJlc2VydmVcbiAqIFRoZSBNSVQgTGljZW5zZSAoTUlUKVxuICogXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtMjAxNyBQZXRrYSBBbnRvbm92XG4gKiBcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqIFxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICogXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuICBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKiBcbiAqL1xuLyoqXG4gKiBibHVlYmlyZCBidWlsZCB2ZXJzaW9uIDMuNS4wXG4gKiBGZWF0dXJlcyBlbmFibGVkOiBjb3JlLCByYWNlLCBjYWxsX2dldCwgZ2VuZXJhdG9ycywgbWFwLCBub2RlaWZ5LCBwcm9taXNpZnksIHByb3BzLCByZWR1Y2UsIHNldHRsZSwgc29tZSwgdXNpbmcsIHRpbWVycywgZmlsdGVyLCBhbnksIGVhY2hcbiovXG4hZnVuY3Rpb24oZSl7aWYoXCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGUpbW9kdWxlLmV4cG9ydHM9ZSgpO2Vsc2UgaWYoXCJmdW5jdGlvblwiPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kKWRlZmluZShbXSxlKTtlbHNle3ZhciBmO1widW5kZWZpbmVkXCIhPXR5cGVvZiB3aW5kb3c/Zj13aW5kb3c6XCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbD9mPWdsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmKGY9c2VsZiksZi5Qcm9taXNlPWUoKX19KGZ1bmN0aW9uKCl7dmFyIGRlZmluZSxtb2R1bGUsZXhwb3J0cztyZXR1cm4gKGZ1bmN0aW9uIGUodCxuLHIpe2Z1bmN0aW9uIHMobyx1KXtpZighbltvXSl7aWYoIXRbb10pe3ZhciBhPXR5cGVvZiBfZGVyZXFfPT1cImZ1bmN0aW9uXCImJl9kZXJlcV87aWYoIXUmJmEpcmV0dXJuIGEobywhMCk7aWYoaSlyZXR1cm4gaShvLCEwKTt2YXIgZj1uZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiK28rXCInXCIpO3Rocm93IGYuY29kZT1cIk1PRFVMRV9OT1RfRk9VTkRcIixmfXZhciBsPW5bb109e2V4cG9ydHM6e319O3Rbb11bMF0uY2FsbChsLmV4cG9ydHMsZnVuY3Rpb24oZSl7dmFyIG49dFtvXVsxXVtlXTtyZXR1cm4gcyhuP246ZSl9LGwsbC5leHBvcnRzLGUsdCxuLHIpfXJldHVybiBuW29dLmV4cG9ydHN9dmFyIGk9dHlwZW9mIF9kZXJlcV89PVwiZnVuY3Rpb25cIiYmX2RlcmVxXztmb3IodmFyIG89MDtvPHIubGVuZ3RoO28rKylzKHJbb10pO3JldHVybiBzfSkoezE6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbnZhciBTb21lUHJvbWlzZUFycmF5ID0gUHJvbWlzZS5fU29tZVByb21pc2VBcnJheTtcbmZ1bmN0aW9uIGFueShwcm9taXNlcykge1xuICAgIHZhciByZXQgPSBuZXcgU29tZVByb21pc2VBcnJheShwcm9taXNlcyk7XG4gICAgdmFyIHByb21pc2UgPSByZXQucHJvbWlzZSgpO1xuICAgIHJldC5zZXRIb3dNYW55KDEpO1xuICAgIHJldC5zZXRVbndyYXAoKTtcbiAgICByZXQuaW5pdCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xufVxuXG5Qcm9taXNlLmFueSA9IGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgIHJldHVybiBhbnkocHJvbWlzZXMpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuYW55ID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBhbnkodGhpcyk7XG59O1xuXG59O1xuXG59LHt9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIGZpcnN0TGluZUVycm9yO1xudHJ5IHt0aHJvdyBuZXcgRXJyb3IoKTsgfSBjYXRjaCAoZSkge2ZpcnN0TGluZUVycm9yID0gZTt9XG52YXIgc2NoZWR1bGUgPSBfZGVyZXFfKFwiLi9zY2hlZHVsZVwiKTtcbnZhciBRdWV1ZSA9IF9kZXJlcV8oXCIuL3F1ZXVlXCIpO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsXCIpO1xuXG5mdW5jdGlvbiBBc3luYygpIHtcbiAgICB0aGlzLl9jdXN0b21TY2hlZHVsZXIgPSBmYWxzZTtcbiAgICB0aGlzLl9pc1RpY2tVc2VkID0gZmFsc2U7XG4gICAgdGhpcy5fbGF0ZVF1ZXVlID0gbmV3IFF1ZXVlKDE2KTtcbiAgICB0aGlzLl9ub3JtYWxRdWV1ZSA9IG5ldyBRdWV1ZSgxNik7XG4gICAgdGhpcy5faGF2ZURyYWluZWRRdWV1ZXMgPSBmYWxzZTtcbiAgICB0aGlzLl90cmFtcG9saW5lRW5hYmxlZCA9IHRydWU7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHRoaXMuZHJhaW5RdWV1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHNlbGYuX2RyYWluUXVldWVzKCk7XG4gICAgfTtcbiAgICB0aGlzLl9zY2hlZHVsZSA9IHNjaGVkdWxlO1xufVxuXG5Bc3luYy5wcm90b3R5cGUuc2V0U2NoZWR1bGVyID0gZnVuY3Rpb24oZm4pIHtcbiAgICB2YXIgcHJldiA9IHRoaXMuX3NjaGVkdWxlO1xuICAgIHRoaXMuX3NjaGVkdWxlID0gZm47XG4gICAgdGhpcy5fY3VzdG9tU2NoZWR1bGVyID0gdHJ1ZTtcbiAgICByZXR1cm4gcHJldjtcbn07XG5cbkFzeW5jLnByb3RvdHlwZS5oYXNDdXN0b21TY2hlZHVsZXIgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fY3VzdG9tU2NoZWR1bGVyO1xufTtcblxuQXN5bmMucHJvdG90eXBlLmVuYWJsZVRyYW1wb2xpbmUgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl90cmFtcG9saW5lRW5hYmxlZCA9IHRydWU7XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuZGlzYWJsZVRyYW1wb2xpbmVJZk5lY2Vzc2FyeSA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh1dGlsLmhhc0RldlRvb2xzKSB7XG4gICAgICAgIHRoaXMuX3RyYW1wb2xpbmVFbmFibGVkID0gZmFsc2U7XG4gICAgfVxufTtcblxuQXN5bmMucHJvdG90eXBlLmhhdmVJdGVtc1F1ZXVlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5faXNUaWNrVXNlZCB8fCB0aGlzLl9oYXZlRHJhaW5lZFF1ZXVlcztcbn07XG5cblxuQXN5bmMucHJvdG90eXBlLmZhdGFsRXJyb3IgPSBmdW5jdGlvbihlLCBpc05vZGUpIHtcbiAgICBpZiAoaXNOb2RlKSB7XG4gICAgICAgIHByb2Nlc3Muc3RkZXJyLndyaXRlKFwiRmF0YWwgXCIgKyAoZSBpbnN0YW5jZW9mIEVycm9yID8gZS5zdGFjayA6IGUpICtcbiAgICAgICAgICAgIFwiXFxuXCIpO1xuICAgICAgICBwcm9jZXNzLmV4aXQoMik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy50aHJvd0xhdGVyKGUpO1xuICAgIH1cbn07XG5cbkFzeW5jLnByb3RvdHlwZS50aHJvd0xhdGVyID0gZnVuY3Rpb24oZm4sIGFyZykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGFyZyA9IGZuO1xuICAgICAgICBmbiA9IGZ1bmN0aW9uICgpIHsgdGhyb3cgYXJnOyB9O1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHNldFRpbWVvdXQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZuKGFyZyk7XG4gICAgICAgIH0sIDApO1xuICAgIH0gZWxzZSB0cnkge1xuICAgICAgICB0aGlzLl9zY2hlZHVsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGZuKGFyZyk7XG4gICAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTm8gYXN5bmMgc2NoZWR1bGVyIGF2YWlsYWJsZVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcdTAwMGFcIik7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gQXN5bmNJbnZva2VMYXRlcihmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgIHRoaXMuX2xhdGVRdWV1ZS5wdXNoKGZuLCByZWNlaXZlciwgYXJnKTtcbiAgICB0aGlzLl9xdWV1ZVRpY2soKTtcbn1cblxuZnVuY3Rpb24gQXN5bmNJbnZva2UoZm4sIHJlY2VpdmVyLCBhcmcpIHtcbiAgICB0aGlzLl9ub3JtYWxRdWV1ZS5wdXNoKGZuLCByZWNlaXZlciwgYXJnKTtcbiAgICB0aGlzLl9xdWV1ZVRpY2soKTtcbn1cblxuZnVuY3Rpb24gQXN5bmNTZXR0bGVQcm9taXNlcyhwcm9taXNlKSB7XG4gICAgdGhpcy5fbm9ybWFsUXVldWUuX3B1c2hPbmUocHJvbWlzZSk7XG4gICAgdGhpcy5fcXVldWVUaWNrKCk7XG59XG5cbmlmICghdXRpbC5oYXNEZXZUb29scykge1xuICAgIEFzeW5jLnByb3RvdHlwZS5pbnZva2VMYXRlciA9IEFzeW5jSW52b2tlTGF0ZXI7XG4gICAgQXN5bmMucHJvdG90eXBlLmludm9rZSA9IEFzeW5jSW52b2tlO1xuICAgIEFzeW5jLnByb3RvdHlwZS5zZXR0bGVQcm9taXNlcyA9IEFzeW5jU2V0dGxlUHJvbWlzZXM7XG59IGVsc2Uge1xuICAgIEFzeW5jLnByb3RvdHlwZS5pbnZva2VMYXRlciA9IGZ1bmN0aW9uIChmbiwgcmVjZWl2ZXIsIGFyZykge1xuICAgICAgICBpZiAodGhpcy5fdHJhbXBvbGluZUVuYWJsZWQpIHtcbiAgICAgICAgICAgIEFzeW5jSW52b2tlTGF0ZXIuY2FsbCh0aGlzLCBmbiwgcmVjZWl2ZXIsIGFyZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICBmbi5jYWxsKHJlY2VpdmVyLCBhcmcpO1xuICAgICAgICAgICAgICAgIH0sIDEwMCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICBBc3luYy5wcm90b3R5cGUuaW52b2tlID0gZnVuY3Rpb24gKGZuLCByZWNlaXZlciwgYXJnKSB7XG4gICAgICAgIGlmICh0aGlzLl90cmFtcG9saW5lRW5hYmxlZCkge1xuICAgICAgICAgICAgQXN5bmNJbnZva2UuY2FsbCh0aGlzLCBmbiwgcmVjZWl2ZXIsIGFyZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9zY2hlZHVsZShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICBmbi5jYWxsKHJlY2VpdmVyLCBhcmcpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgQXN5bmMucHJvdG90eXBlLnNldHRsZVByb21pc2VzID0gZnVuY3Rpb24ocHJvbWlzZSkge1xuICAgICAgICBpZiAodGhpcy5fdHJhbXBvbGluZUVuYWJsZWQpIHtcbiAgICAgICAgICAgIEFzeW5jU2V0dGxlUHJvbWlzZXMuY2FsbCh0aGlzLCBwcm9taXNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NjaGVkdWxlKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHByb21pc2UuX3NldHRsZVByb21pc2VzKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG59XG5cbkFzeW5jLnByb3RvdHlwZS5fZHJhaW5RdWV1ZSA9IGZ1bmN0aW9uKHF1ZXVlKSB7XG4gICAgd2hpbGUgKHF1ZXVlLmxlbmd0aCgpID4gMCkge1xuICAgICAgICB2YXIgZm4gPSBxdWV1ZS5zaGlmdCgpO1xuICAgICAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGZuLl9zZXR0bGVQcm9taXNlcygpO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlY2VpdmVyID0gcXVldWUuc2hpZnQoKTtcbiAgICAgICAgdmFyIGFyZyA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgIGZuLmNhbGwocmVjZWl2ZXIsIGFyZyk7XG4gICAgfVxufTtcblxuQXN5bmMucHJvdG90eXBlLl9kcmFpblF1ZXVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9kcmFpblF1ZXVlKHRoaXMuX25vcm1hbFF1ZXVlKTtcbiAgICB0aGlzLl9yZXNldCgpO1xuICAgIHRoaXMuX2hhdmVEcmFpbmVkUXVldWVzID0gdHJ1ZTtcbiAgICB0aGlzLl9kcmFpblF1ZXVlKHRoaXMuX2xhdGVRdWV1ZSk7XG59O1xuXG5Bc3luYy5wcm90b3R5cGUuX3F1ZXVlVGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXRoaXMuX2lzVGlja1VzZWQpIHtcbiAgICAgICAgdGhpcy5faXNUaWNrVXNlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuX3NjaGVkdWxlKHRoaXMuZHJhaW5RdWV1ZXMpO1xuICAgIH1cbn07XG5cbkFzeW5jLnByb3RvdHlwZS5fcmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faXNUaWNrVXNlZCA9IGZhbHNlO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBBc3luYztcbm1vZHVsZS5leHBvcnRzLmZpcnN0TGluZUVycm9yID0gZmlyc3RMaW5lRXJyb3I7XG5cbn0se1wiLi9xdWV1ZVwiOjI2LFwiLi9zY2hlZHVsZVwiOjI5LFwiLi91dGlsXCI6MzZ9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBJTlRFUk5BTCwgdHJ5Q29udmVydFRvUHJvbWlzZSwgZGVidWcpIHtcbnZhciBjYWxsZWRCaW5kID0gZmFsc2U7XG52YXIgcmVqZWN0VGhpcyA9IGZ1bmN0aW9uKF8sIGUpIHtcbiAgICB0aGlzLl9yZWplY3QoZSk7XG59O1xuXG52YXIgdGFyZ2V0UmVqZWN0ZWQgPSBmdW5jdGlvbihlLCBjb250ZXh0KSB7XG4gICAgY29udGV4dC5wcm9taXNlUmVqZWN0aW9uUXVldWVkID0gdHJ1ZTtcbiAgICBjb250ZXh0LmJpbmRpbmdQcm9taXNlLl90aGVuKHJlamVjdFRoaXMsIHJlamVjdFRoaXMsIG51bGwsIHRoaXMsIGUpO1xufTtcblxudmFyIGJpbmRpbmdSZXNvbHZlZCA9IGZ1bmN0aW9uKHRoaXNBcmcsIGNvbnRleHQpIHtcbiAgICBpZiAoKCh0aGlzLl9iaXRGaWVsZCAmIDUwMzk3MTg0KSA9PT0gMCkpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZUNhbGxiYWNrKGNvbnRleHQudGFyZ2V0KTtcbiAgICB9XG59O1xuXG52YXIgYmluZGluZ1JlamVjdGVkID0gZnVuY3Rpb24oZSwgY29udGV4dCkge1xuICAgIGlmICghY29udGV4dC5wcm9taXNlUmVqZWN0aW9uUXVldWVkKSB0aGlzLl9yZWplY3QoZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5iaW5kID0gZnVuY3Rpb24gKHRoaXNBcmcpIHtcbiAgICBpZiAoIWNhbGxlZEJpbmQpIHtcbiAgICAgICAgY2FsbGVkQmluZCA9IHRydWU7XG4gICAgICAgIFByb21pc2UucHJvdG90eXBlLl9wcm9wYWdhdGVGcm9tID0gZGVidWcucHJvcGFnYXRlRnJvbUZ1bmN0aW9uKCk7XG4gICAgICAgIFByb21pc2UucHJvdG90eXBlLl9ib3VuZFZhbHVlID0gZGVidWcuYm91bmRWYWx1ZUZ1bmN0aW9uKCk7XG4gICAgfVxuICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHRoaXNBcmcpO1xuICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0Ll9wcm9wYWdhdGVGcm9tKHRoaXMsIDEpO1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQoKTtcbiAgICByZXQuX3NldEJvdW5kVG8obWF5YmVQcm9taXNlKTtcbiAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB2YXIgY29udGV4dCA9IHtcbiAgICAgICAgICAgIHByb21pc2VSZWplY3Rpb25RdWV1ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgcHJvbWlzZTogcmV0LFxuICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICBiaW5kaW5nUHJvbWlzZTogbWF5YmVQcm9taXNlXG4gICAgICAgIH07XG4gICAgICAgIHRhcmdldC5fdGhlbihJTlRFUk5BTCwgdGFyZ2V0UmVqZWN0ZWQsIHVuZGVmaW5lZCwgcmV0LCBjb250ZXh0KTtcbiAgICAgICAgbWF5YmVQcm9taXNlLl90aGVuKFxuICAgICAgICAgICAgYmluZGluZ1Jlc29sdmVkLCBiaW5kaW5nUmVqZWN0ZWQsIHVuZGVmaW5lZCwgcmV0LCBjb250ZXh0KTtcbiAgICAgICAgcmV0Ll9zZXRPbkNhbmNlbChtYXliZVByb21pc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldC5fcmVzb2x2ZUNhbGxiYWNrKHRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0Qm91bmRUbyA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICBpZiAob2JqICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDIwOTcxNTI7XG4gICAgICAgIHRoaXMuX2JvdW5kVG8gPSBvYmo7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MjA5NzE1Mik7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzQm91bmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDIwOTcxNTIpID09PSAyMDk3MTUyO1xufTtcblxuUHJvbWlzZS5iaW5kID0gZnVuY3Rpb24gKHRoaXNBcmcsIHZhbHVlKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh2YWx1ZSkuYmluZCh0aGlzQXJnKTtcbn07XG59O1xuXG59LHt9XSw0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIG9sZDtcbmlmICh0eXBlb2YgUHJvbWlzZSAhPT0gXCJ1bmRlZmluZWRcIikgb2xkID0gUHJvbWlzZTtcbmZ1bmN0aW9uIG5vQ29uZmxpY3QoKSB7XG4gICAgdHJ5IHsgaWYgKFByb21pc2UgPT09IGJsdWViaXJkKSBQcm9taXNlID0gb2xkOyB9XG4gICAgY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGJsdWViaXJkO1xufVxudmFyIGJsdWViaXJkID0gX2RlcmVxXyhcIi4vcHJvbWlzZVwiKSgpO1xuYmx1ZWJpcmQubm9Db25mbGljdCA9IG5vQ29uZmxpY3Q7XG5tb2R1bGUuZXhwb3J0cyA9IGJsdWViaXJkO1xuXG59LHtcIi4vcHJvbWlzZVwiOjIyfV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciBjciA9IE9iamVjdC5jcmVhdGU7XG5pZiAoY3IpIHtcbiAgICB2YXIgY2FsbGVyQ2FjaGUgPSBjcihudWxsKTtcbiAgICB2YXIgZ2V0dGVyQ2FjaGUgPSBjcihudWxsKTtcbiAgICBjYWxsZXJDYWNoZVtcIiBzaXplXCJdID0gZ2V0dGVyQ2FjaGVbXCIgc2l6ZVwiXSA9IDA7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsXCIpO1xudmFyIGNhbkV2YWx1YXRlID0gdXRpbC5jYW5FdmFsdWF0ZTtcbnZhciBpc0lkZW50aWZpZXIgPSB1dGlsLmlzSWRlbnRpZmllcjtcblxudmFyIGdldE1ldGhvZENhbGxlcjtcbnZhciBnZXRHZXR0ZXI7XG5pZiAoIXRydWUpIHtcbnZhciBtYWtlTWV0aG9kQ2FsbGVyID0gZnVuY3Rpb24gKG1ldGhvZE5hbWUpIHtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiZW5zdXJlTWV0aG9kXCIsIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBsZW4gPSB0aGlzLmxlbmd0aDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGVuc3VyZU1ldGhvZChvYmosICdtZXRob2ROYW1lJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHN3aXRjaChsZW4pIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDE6IHJldHVybiBvYmoubWV0aG9kTmFtZSh0aGlzWzBdKTsgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDI6IHJldHVybiBvYmoubWV0aG9kTmFtZSh0aGlzWzBdLCB0aGlzWzFdKTsgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBvYmoubWV0aG9kTmFtZSh0aGlzWzBdLCB0aGlzWzFdLCB0aGlzWzJdKTsgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBvYmoubWV0aG9kTmFtZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iai5tZXRob2ROYW1lLmFwcGx5KG9iaiwgdGhpcyk7ICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgXCIucmVwbGFjZSgvbWV0aG9kTmFtZS9nLCBtZXRob2ROYW1lKSkoZW5zdXJlTWV0aG9kKTtcbn07XG5cbnZhciBtYWtlR2V0dGVyID0gZnVuY3Rpb24gKHByb3BlcnR5TmFtZSkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJvYmpcIiwgXCIgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAndXNlIHN0cmljdCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICByZXR1cm4gb2JqLnByb3BlcnR5TmFtZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICBcIi5yZXBsYWNlKFwicHJvcGVydHlOYW1lXCIsIHByb3BlcnR5TmFtZSkpO1xufTtcblxudmFyIGdldENvbXBpbGVkID0gZnVuY3Rpb24obmFtZSwgY29tcGlsZXIsIGNhY2hlKSB7XG4gICAgdmFyIHJldCA9IGNhY2hlW25hbWVdO1xuICAgIGlmICh0eXBlb2YgcmV0ICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKCFpc0lkZW50aWZpZXIobmFtZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldCA9IGNvbXBpbGVyKG5hbWUpO1xuICAgICAgICBjYWNoZVtuYW1lXSA9IHJldDtcbiAgICAgICAgY2FjaGVbXCIgc2l6ZVwiXSsrO1xuICAgICAgICBpZiAoY2FjaGVbXCIgc2l6ZVwiXSA+IDUxMikge1xuICAgICAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhjYWNoZSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSBkZWxldGUgY2FjaGVba2V5c1tpXV07XG4gICAgICAgICAgICBjYWNoZVtcIiBzaXplXCJdID0ga2V5cy5sZW5ndGggLSAyNTY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cbmdldE1ldGhvZENhbGxlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgICByZXR1cm4gZ2V0Q29tcGlsZWQobmFtZSwgbWFrZU1ldGhvZENhbGxlciwgY2FsbGVyQ2FjaGUpO1xufTtcblxuZ2V0R2V0dGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiBnZXRDb21waWxlZChuYW1lLCBtYWtlR2V0dGVyLCBnZXR0ZXJDYWNoZSk7XG59O1xufVxuXG5mdW5jdGlvbiBlbnN1cmVNZXRob2Qob2JqLCBtZXRob2ROYW1lKSB7XG4gICAgdmFyIGZuO1xuICAgIGlmIChvYmogIT0gbnVsbCkgZm4gPSBvYmpbbWV0aG9kTmFtZV07XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZhciBtZXNzYWdlID0gXCJPYmplY3QgXCIgKyB1dGlsLmNsYXNzU3RyaW5nKG9iaikgKyBcIiBoYXMgbm8gbWV0aG9kICdcIiArXG4gICAgICAgICAgICB1dGlsLnRvU3RyaW5nKG1ldGhvZE5hbWUpICsgXCInXCI7XG4gICAgICAgIHRocm93IG5ldyBQcm9taXNlLlR5cGVFcnJvcihtZXNzYWdlKTtcbiAgICB9XG4gICAgcmV0dXJuIGZuO1xufVxuXG5mdW5jdGlvbiBjYWxsZXIob2JqKSB7XG4gICAgdmFyIG1ldGhvZE5hbWUgPSB0aGlzLnBvcCgpO1xuICAgIHZhciBmbiA9IGVuc3VyZU1ldGhvZChvYmosIG1ldGhvZE5hbWUpO1xuICAgIHJldHVybiBmbi5hcHBseShvYmosIHRoaXMpO1xufVxuUHJvbWlzZS5wcm90b3R5cGUuY2FsbCA9IGZ1bmN0aW9uIChtZXRob2ROYW1lKSB7XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7O1xuICAgIGlmICghdHJ1ZSkge1xuICAgICAgICBpZiAoY2FuRXZhbHVhdGUpIHtcbiAgICAgICAgICAgIHZhciBtYXliZUNhbGxlciA9IGdldE1ldGhvZENhbGxlcihtZXRob2ROYW1lKTtcbiAgICAgICAgICAgIGlmIChtYXliZUNhbGxlciAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl90aGVuKFxuICAgICAgICAgICAgICAgICAgICBtYXliZUNhbGxlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyZ3MsIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXJncy5wdXNoKG1ldGhvZE5hbWUpO1xuICAgIHJldHVybiB0aGlzLl90aGVuKGNhbGxlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGFyZ3MsIHVuZGVmaW5lZCk7XG59O1xuXG5mdW5jdGlvbiBuYW1lZEdldHRlcihvYmopIHtcbiAgICByZXR1cm4gb2JqW3RoaXNdO1xufVxuZnVuY3Rpb24gaW5kZXhlZEdldHRlcihvYmopIHtcbiAgICB2YXIgaW5kZXggPSArdGhpcztcbiAgICBpZiAoaW5kZXggPCAwKSBpbmRleCA9IE1hdGgubWF4KDAsIGluZGV4ICsgb2JqLmxlbmd0aCk7XG4gICAgcmV0dXJuIG9ialtpbmRleF07XG59XG5Qcm9taXNlLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAocHJvcGVydHlOYW1lKSB7XG4gICAgdmFyIGlzSW5kZXggPSAodHlwZW9mIHByb3BlcnR5TmFtZSA9PT0gXCJudW1iZXJcIik7XG4gICAgdmFyIGdldHRlcjtcbiAgICBpZiAoIWlzSW5kZXgpIHtcbiAgICAgICAgaWYgKGNhbkV2YWx1YXRlKSB7XG4gICAgICAgICAgICB2YXIgbWF5YmVHZXR0ZXIgPSBnZXRHZXR0ZXIocHJvcGVydHlOYW1lKTtcbiAgICAgICAgICAgIGdldHRlciA9IG1heWJlR2V0dGVyICE9PSBudWxsID8gbWF5YmVHZXR0ZXIgOiBuYW1lZEdldHRlcjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldHRlciA9IG5hbWVkR2V0dGVyO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2V0dGVyID0gaW5kZXhlZEdldHRlcjtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4oZ2V0dGVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgcHJvcGVydHlOYW1lLCB1bmRlZmluZWQpO1xufTtcbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSw2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXksIGFwaVJlamVjdGlvbiwgZGVidWcpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIGFzeW5jID0gUHJvbWlzZS5fYXN5bmM7XG5cblByb21pc2UucHJvdG90eXBlW1wiYnJlYWtcIl0gPSBQcm9taXNlLnByb3RvdHlwZS5jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIWRlYnVnLmNhbmNlbGxhdGlvbigpKSByZXR1cm4gdGhpcy5fd2FybihcImNhbmNlbGxhdGlvbiBpcyBkaXNhYmxlZFwiKTtcblxuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB2YXIgY2hpbGQgPSBwcm9taXNlO1xuICAgIHdoaWxlIChwcm9taXNlLl9pc0NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgaWYgKCFwcm9taXNlLl9jYW5jZWxCeShjaGlsZCkpIHtcbiAgICAgICAgICAgIGlmIChjaGlsZC5faXNGb2xsb3dpbmcoKSkge1xuICAgICAgICAgICAgICAgIGNoaWxkLl9mb2xsb3dlZSgpLmNhbmNlbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjaGlsZC5fY2FuY2VsQnJhbmNoZWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHBhcmVudCA9IHByb21pc2UuX2NhbmNlbGxhdGlvblBhcmVudDtcbiAgICAgICAgaWYgKHBhcmVudCA9PSBudWxsIHx8ICFwYXJlbnQuX2lzQ2FuY2VsbGFibGUoKSkge1xuICAgICAgICAgICAgaWYgKHByb21pc2UuX2lzRm9sbG93aW5nKCkpIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9mb2xsb3dlZSgpLmNhbmNlbCgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9jYW5jZWxCcmFuY2hlZCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocHJvbWlzZS5faXNGb2xsb3dpbmcoKSkgcHJvbWlzZS5fZm9sbG93ZWUoKS5jYW5jZWwoKTtcbiAgICAgICAgICAgIHByb21pc2UuX3NldFdpbGxCZUNhbmNlbGxlZCgpO1xuICAgICAgICAgICAgY2hpbGQgPSBwcm9taXNlO1xuICAgICAgICAgICAgcHJvbWlzZSA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9icmFuY2hIYXNDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9icmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsLS07XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZW5vdWdoQnJhbmNoZXNIYXZlQ2FuY2VsbGVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX2JyYW5jaGVzUmVtYWluaW5nVG9DYW5jZWwgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgICB0aGlzLl9icmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsIDw9IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fY2FuY2VsQnkgPSBmdW5jdGlvbihjYW5jZWxsZXIpIHtcbiAgICBpZiAoY2FuY2VsbGVyID09PSB0aGlzKSB7XG4gICAgICAgIHRoaXMuX2JyYW5jaGVzUmVtYWluaW5nVG9DYW5jZWwgPSAwO1xuICAgICAgICB0aGlzLl9pbnZva2VPbkNhbmNlbCgpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9icmFuY2hIYXNDYW5jZWxsZWQoKTtcbiAgICAgICAgaWYgKHRoaXMuX2Vub3VnaEJyYW5jaGVzSGF2ZUNhbmNlbGxlZCgpKSB7XG4gICAgICAgICAgICB0aGlzLl9pbnZva2VPbkNhbmNlbCgpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2NhbmNlbEJyYW5jaGVkID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuX2Vub3VnaEJyYW5jaGVzSGF2ZUNhbmNlbGxlZCgpKSB7XG4gICAgICAgIHRoaXMuX2NhbmNlbCgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoIXRoaXMuX2lzQ2FuY2VsbGFibGUoKSkgcmV0dXJuO1xuICAgIHRoaXMuX3NldENhbmNlbGxlZCgpO1xuICAgIGFzeW5jLmludm9rZSh0aGlzLl9jYW5jZWxQcm9taXNlcywgdGhpcywgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9jYW5jZWxQcm9taXNlcyA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9sZW5ndGgoKSA+IDApIHRoaXMuX3NldHRsZVByb21pc2VzKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fdW5zZXRPbkNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX29uQ2FuY2VsRmllbGQgPSB1bmRlZmluZWQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faXNDYW5jZWxsYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlzUGVuZGluZygpICYmICF0aGlzLl9pc0NhbmNlbGxlZCgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuaXNDYW5jZWxsYWJsZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmlzUGVuZGluZygpICYmICF0aGlzLmlzQ2FuY2VsbGVkKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZG9JbnZva2VPbkNhbmNlbCA9IGZ1bmN0aW9uKG9uQ2FuY2VsQ2FsbGJhY2ssIGludGVybmFsT25seSkge1xuICAgIGlmICh1dGlsLmlzQXJyYXkob25DYW5jZWxDYWxsYmFjaykpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvbkNhbmNlbENhbGxiYWNrLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLl9kb0ludm9rZU9uQ2FuY2VsKG9uQ2FuY2VsQ2FsbGJhY2tbaV0sIGludGVybmFsT25seSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9uQ2FuY2VsQ2FsbGJhY2sgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAodHlwZW9mIG9uQ2FuY2VsQ2FsbGJhY2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgaWYgKCFpbnRlcm5hbE9ubHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZSA9IHRyeUNhdGNoKG9uQ2FuY2VsQ2FsbGJhY2spLmNhbGwodGhpcy5fYm91bmRWYWx1ZSgpKTtcbiAgICAgICAgICAgICAgICBpZiAoZSA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYXR0YWNoRXh0cmFUcmFjZShlLmUpO1xuICAgICAgICAgICAgICAgICAgICBhc3luYy50aHJvd0xhdGVyKGUuZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb25DYW5jZWxDYWxsYmFjay5fcmVzdWx0Q2FuY2VsbGVkKHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2ludm9rZU9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIG9uQ2FuY2VsQ2FsbGJhY2sgPSB0aGlzLl9vbkNhbmNlbCgpO1xuICAgIHRoaXMuX3Vuc2V0T25DYW5jZWwoKTtcbiAgICBhc3luYy5pbnZva2UodGhpcy5fZG9JbnZva2VPbkNhbmNlbCwgdGhpcywgb25DYW5jZWxDYWxsYmFjayk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5faW52b2tlSW50ZXJuYWxPbkNhbmNlbCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9pc0NhbmNlbGxhYmxlKCkpIHtcbiAgICAgICAgdGhpcy5fZG9JbnZva2VPbkNhbmNlbCh0aGlzLl9vbkNhbmNlbCgpLCB0cnVlKTtcbiAgICAgICAgdGhpcy5fdW5zZXRPbkNhbmNlbCgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZXN1bHRDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLmNhbmNlbCgpO1xufTtcblxufTtcblxufSx7XCIuL3V0aWxcIjozNn1dLDc6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKE5FWFRfRklMVEVSKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgZ2V0S2V5cyA9IF9kZXJlcV8oXCIuL2VzNVwiKS5rZXlzO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG5cbmZ1bmN0aW9uIGNhdGNoRmlsdGVyKGluc3RhbmNlcywgY2IsIHByb21pc2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZSkge1xuICAgICAgICB2YXIgYm91bmRUbyA9IHByb21pc2UuX2JvdW5kVmFsdWUoKTtcbiAgICAgICAgcHJlZGljYXRlTG9vcDogZm9yICh2YXIgaSA9IDA7IGkgPCBpbnN0YW5jZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBpdGVtID0gaW5zdGFuY2VzW2ldO1xuXG4gICAgICAgICAgICBpZiAoaXRlbSA9PT0gRXJyb3IgfHxcbiAgICAgICAgICAgICAgICAoaXRlbSAhPSBudWxsICYmIGl0ZW0ucHJvdG90eXBlIGluc3RhbmNlb2YgRXJyb3IpKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBpdGVtKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnlDYXRjaChjYikuY2FsbChib3VuZFRvLCBlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpdGVtID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlc1ByZWRpY2F0ZSA9IHRyeUNhdGNoKGl0ZW0pLmNhbGwoYm91bmRUbywgZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoZXNQcmVkaWNhdGUgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXRjaGVzUHJlZGljYXRlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2hlc1ByZWRpY2F0ZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ5Q2F0Y2goY2IpLmNhbGwoYm91bmRUbywgZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIGlmICh1dGlsLmlzT2JqZWN0KGUpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleXMgPSBnZXRLZXlzKGl0ZW0pO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGl0ZW1ba2V5XSAhPSBlW2tleV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIHByZWRpY2F0ZUxvb3A7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRyeUNhdGNoKGNiKS5jYWxsKGJvdW5kVG8sIGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBORVhUX0ZJTFRFUjtcbiAgICB9O1xufVxuXG5yZXR1cm4gY2F0Y2hGaWx0ZXI7XG59O1xuXG59LHtcIi4vZXM1XCI6MTMsXCIuL3V0aWxcIjozNn1dLDg6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UpIHtcbnZhciBsb25nU3RhY2tUcmFjZXMgPSBmYWxzZTtcbnZhciBjb250ZXh0U3RhY2sgPSBbXTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Byb21pc2VDcmVhdGVkID0gZnVuY3Rpb24oKSB7fTtcblByb21pc2UucHJvdG90eXBlLl9wdXNoQ29udGV4dCA9IGZ1bmN0aW9uKCkge307XG5Qcm9taXNlLnByb3RvdHlwZS5fcG9wQ29udGV4dCA9IGZ1bmN0aW9uKCkge3JldHVybiBudWxsO307XG5Qcm9taXNlLl9wZWVrQ29udGV4dCA9IFByb21pc2UucHJvdG90eXBlLl9wZWVrQ29udGV4dCA9IGZ1bmN0aW9uKCkge307XG5cbmZ1bmN0aW9uIENvbnRleHQoKSB7XG4gICAgdGhpcy5fdHJhY2UgPSBuZXcgQ29udGV4dC5DYXB0dXJlZFRyYWNlKHBlZWtDb250ZXh0KCkpO1xufVxuQ29udGV4dC5wcm90b3R5cGUuX3B1c2hDb250ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl90cmFjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRoaXMuX3RyYWNlLl9wcm9taXNlQ3JlYXRlZCA9IG51bGw7XG4gICAgICAgIGNvbnRleHRTdGFjay5wdXNoKHRoaXMuX3RyYWNlKTtcbiAgICB9XG59O1xuXG5Db250ZXh0LnByb3RvdHlwZS5fcG9wQ29udGV4dCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5fdHJhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB2YXIgdHJhY2UgPSBjb250ZXh0U3RhY2sucG9wKCk7XG4gICAgICAgIHZhciByZXQgPSB0cmFjZS5fcHJvbWlzZUNyZWF0ZWQ7XG4gICAgICAgIHRyYWNlLl9wcm9taXNlQ3JlYXRlZCA9IG51bGw7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuZnVuY3Rpb24gY3JlYXRlQ29udGV4dCgpIHtcbiAgICBpZiAobG9uZ1N0YWNrVHJhY2VzKSByZXR1cm4gbmV3IENvbnRleHQoKTtcbn1cblxuZnVuY3Rpb24gcGVla0NvbnRleHQoKSB7XG4gICAgdmFyIGxhc3RJbmRleCA9IGNvbnRleHRTdGFjay5sZW5ndGggLSAxO1xuICAgIGlmIChsYXN0SW5kZXggPj0gMCkge1xuICAgICAgICByZXR1cm4gY29udGV4dFN0YWNrW2xhc3RJbmRleF07XG4gICAgfVxuICAgIHJldHVybiB1bmRlZmluZWQ7XG59XG5Db250ZXh0LkNhcHR1cmVkVHJhY2UgPSBudWxsO1xuQ29udGV4dC5jcmVhdGUgPSBjcmVhdGVDb250ZXh0O1xuQ29udGV4dC5kZWFjdGl2YXRlTG9uZ1N0YWNrVHJhY2VzID0gZnVuY3Rpb24oKSB7fTtcbkNvbnRleHQuYWN0aXZhdGVMb25nU3RhY2tUcmFjZXMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgUHJvbWlzZV9wdXNoQ29udGV4dCA9IFByb21pc2UucHJvdG90eXBlLl9wdXNoQ29udGV4dDtcbiAgICB2YXIgUHJvbWlzZV9wb3BDb250ZXh0ID0gUHJvbWlzZS5wcm90b3R5cGUuX3BvcENvbnRleHQ7XG4gICAgdmFyIFByb21pc2VfUGVla0NvbnRleHQgPSBQcm9taXNlLl9wZWVrQ29udGV4dDtcbiAgICB2YXIgUHJvbWlzZV9wZWVrQ29udGV4dCA9IFByb21pc2UucHJvdG90eXBlLl9wZWVrQ29udGV4dDtcbiAgICB2YXIgUHJvbWlzZV9wcm9taXNlQ3JlYXRlZCA9IFByb21pc2UucHJvdG90eXBlLl9wcm9taXNlQ3JlYXRlZDtcbiAgICBDb250ZXh0LmRlYWN0aXZhdGVMb25nU3RhY2tUcmFjZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX3B1c2hDb250ZXh0ID0gUHJvbWlzZV9wdXNoQ29udGV4dDtcbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX3BvcENvbnRleHQgPSBQcm9taXNlX3BvcENvbnRleHQ7XG4gICAgICAgIFByb21pc2UuX3BlZWtDb250ZXh0ID0gUHJvbWlzZV9QZWVrQ29udGV4dDtcbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX3BlZWtDb250ZXh0ID0gUHJvbWlzZV9wZWVrQ29udGV4dDtcbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX3Byb21pc2VDcmVhdGVkID0gUHJvbWlzZV9wcm9taXNlQ3JlYXRlZDtcbiAgICAgICAgbG9uZ1N0YWNrVHJhY2VzID0gZmFsc2U7XG4gICAgfTtcbiAgICBsb25nU3RhY2tUcmFjZXMgPSB0cnVlO1xuICAgIFByb21pc2UucHJvdG90eXBlLl9wdXNoQ29udGV4dCA9IENvbnRleHQucHJvdG90eXBlLl9wdXNoQ29udGV4dDtcbiAgICBQcm9taXNlLnByb3RvdHlwZS5fcG9wQ29udGV4dCA9IENvbnRleHQucHJvdG90eXBlLl9wb3BDb250ZXh0O1xuICAgIFByb21pc2UuX3BlZWtDb250ZXh0ID0gUHJvbWlzZS5wcm90b3R5cGUuX3BlZWtDb250ZXh0ID0gcGVla0NvbnRleHQ7XG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX3Byb21pc2VDcmVhdGVkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBjdHggPSB0aGlzLl9wZWVrQ29udGV4dCgpO1xuICAgICAgICBpZiAoY3R4ICYmIGN0eC5fcHJvbWlzZUNyZWF0ZWQgPT0gbnVsbCkgY3R4Ll9wcm9taXNlQ3JlYXRlZCA9IHRoaXM7XG4gICAgfTtcbn07XG5yZXR1cm4gQ29udGV4dDtcbn07XG5cbn0se31dLDk6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIENvbnRleHQpIHtcbnZhciBnZXREb21haW4gPSBQcm9taXNlLl9nZXREb21haW47XG52YXIgYXN5bmMgPSBQcm9taXNlLl9hc3luYztcbnZhciBXYXJuaW5nID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpLldhcm5pbmc7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgY2FuQXR0YWNoVHJhY2UgPSB1dGlsLmNhbkF0dGFjaFRyYWNlO1xudmFyIHVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQ7XG52YXIgcG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb247XG52YXIgYmx1ZWJpcmRGcmFtZVBhdHRlcm4gPVxuICAgIC9bXFxcXFxcL11ibHVlYmlyZFtcXFxcXFwvXWpzW1xcXFxcXC9dKHJlbGVhc2V8ZGVidWd8aW5zdHJ1bWVudGVkKS87XG52YXIgbm9kZUZyYW1lUGF0dGVybiA9IC9cXCgoPzp0aW1lcnNcXC5qcyk6XFxkKzpcXGQrXFwpLztcbnZhciBwYXJzZUxpbmVQYXR0ZXJuID0gL1tcXC88XFwoXSguKz8pOihcXGQrKTooXFxkKylcXCk/XFxzKiQvO1xudmFyIHN0YWNrRnJhbWVQYXR0ZXJuID0gbnVsbDtcbnZhciBmb3JtYXRTdGFjayA9IG51bGw7XG52YXIgaW5kZW50U3RhY2tGcmFtZXMgPSBmYWxzZTtcbnZhciBwcmludFdhcm5pbmc7XG52YXIgZGVidWdnaW5nID0gISEodXRpbC5lbnYoXCJCTFVFQklSRF9ERUJVR1wiKSAhPSAwICYmXG4gICAgICAgICAgICAgICAgICAgICAgICAodHJ1ZSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuZW52KFwiQkxVRUJJUkRfREVCVUdcIikgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICB1dGlsLmVudihcIk5PREVfRU5WXCIpID09PSBcImRldmVsb3BtZW50XCIpKTtcblxudmFyIHdhcm5pbmdzID0gISEodXRpbC5lbnYoXCJCTFVFQklSRF9XQVJOSU5HU1wiKSAhPSAwICYmXG4gICAgKGRlYnVnZ2luZyB8fCB1dGlsLmVudihcIkJMVUVCSVJEX1dBUk5JTkdTXCIpKSk7XG5cbnZhciBsb25nU3RhY2tUcmFjZXMgPSAhISh1dGlsLmVudihcIkJMVUVCSVJEX0xPTkdfU1RBQ0tfVFJBQ0VTXCIpICE9IDAgJiZcbiAgICAoZGVidWdnaW5nIHx8IHV0aWwuZW52KFwiQkxVRUJJUkRfTE9OR19TVEFDS19UUkFDRVNcIikpKTtcblxudmFyIHdGb3Jnb3R0ZW5SZXR1cm4gPSB1dGlsLmVudihcIkJMVUVCSVJEX1dfRk9SR09UVEVOX1JFVFVSTlwiKSAhPSAwICYmXG4gICAgKHdhcm5pbmdzIHx8ICEhdXRpbC5lbnYoXCJCTFVFQklSRF9XX0ZPUkdPVFRFTl9SRVRVUk5cIikpO1xuXG5Qcm9taXNlLnByb3RvdHlwZS5zdXBwcmVzc1VuaGFuZGxlZFJlamVjdGlvbnMgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0KCk7XG4gICAgdGFyZ2V0Ll9iaXRGaWVsZCA9ICgodGFyZ2V0Ll9iaXRGaWVsZCAmICh+MTA0ODU3NikpIHxcbiAgICAgICAgICAgICAgICAgICAgICA1MjQyODgpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoKHRoaXMuX2JpdEZpZWxkICYgNTI0Mjg4KSAhPT0gMCkgcmV0dXJuO1xuICAgIHRoaXMuX3NldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgYXN5bmMuaW52b2tlTGF0ZXIodGhpcy5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uLCB0aGlzLCB1bmRlZmluZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX25vdGlmeVVuaGFuZGxlZFJlamVjdGlvbklzSGFuZGxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBmaXJlUmVqZWN0aW9uRXZlbnQoXCJyZWplY3Rpb25IYW5kbGVkXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCwgdW5kZWZpbmVkLCB0aGlzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRSZXR1cm5lZE5vblVuZGVmaW5lZCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAyNjg0MzU0NTY7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmV0dXJuZWROb25VbmRlZmluZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMjY4NDM1NDU2KSAhPT0gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9ub3RpZnlVbmhhbmRsZWRSZWplY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX2lzUmVqZWN0aW9uVW5oYW5kbGVkKCkpIHtcbiAgICAgICAgdmFyIHJlYXNvbiA9IHRoaXMuX3NldHRsZWRWYWx1ZSgpO1xuICAgICAgICB0aGlzLl9zZXRVbmhhbmRsZWRSZWplY3Rpb25Jc05vdGlmaWVkKCk7XG4gICAgICAgIGZpcmVSZWplY3Rpb25FdmVudChcInVuaGFuZGxlZFJlamVjdGlvblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJseVVuaGFuZGxlZFJlamVjdGlvbiwgcmVhc29uLCB0aGlzKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMjYyMTQ0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0VW5oYW5kbGVkUmVqZWN0aW9uSXNOb3RpZmllZCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkICYgKH4yNjIxNDQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzVW5oYW5kbGVkUmVqZWN0aW9uTm90aWZpZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDI2MjE0NCkgPiAwO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldFJlamVjdGlvbklzVW5oYW5kbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCAxMDQ4NTc2O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MTA0ODU3Nik7XG4gICAgaWYgKHRoaXMuX2lzVW5oYW5kbGVkUmVqZWN0aW9uTm90aWZpZWQoKSkge1xuICAgICAgICB0aGlzLl91bnNldFVuaGFuZGxlZFJlamVjdGlvbklzTm90aWZpZWQoKTtcbiAgICAgICAgdGhpcy5fbm90aWZ5VW5oYW5kbGVkUmVqZWN0aW9uSXNIYW5kbGVkKCk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzUmVqZWN0aW9uVW5oYW5kbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiAxMDQ4NTc2KSA+IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fd2FybiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIHNob3VsZFVzZU93blRyYWNlLCBwcm9taXNlKSB7XG4gICAgcmV0dXJuIHdhcm4obWVzc2FnZSwgc2hvdWxkVXNlT3duVHJhY2UsIHByb21pc2UgfHwgdGhpcyk7XG59O1xuXG5Qcm9taXNlLm9uUG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24gPSBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gZ2V0RG9tYWluKCk7XG4gICAgcG9zc2libHlVbmhhbmRsZWRSZWplY3Rpb24gPVxuICAgICAgICB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIiA/IChkb21haW4gPT09IG51bGwgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbiA6IHV0aWwuZG9tYWluQmluZChkb21haW4sIGZuKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkO1xufTtcblxuUHJvbWlzZS5vblVuaGFuZGxlZFJlamVjdGlvbkhhbmRsZWQgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICB2YXIgZG9tYWluID0gZ2V0RG9tYWluKCk7XG4gICAgdW5oYW5kbGVkUmVqZWN0aW9uSGFuZGxlZCA9XG4gICAgICAgIHR5cGVvZiBmbiA9PT0gXCJmdW5jdGlvblwiID8gKGRvbWFpbiA9PT0gbnVsbCA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuIDogdXRpbC5kb21haW5CaW5kKGRvbWFpbiwgZm4pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiB1bmRlZmluZWQ7XG59O1xuXG52YXIgZGlzYWJsZUxvbmdTdGFja1RyYWNlcyA9IGZ1bmN0aW9uKCkge307XG5Qcm9taXNlLmxvbmdTdGFja1RyYWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXN5bmMuaGF2ZUl0ZW1zUXVldWVkKCkgJiYgIWNvbmZpZy5sb25nU3RhY2tUcmFjZXMpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiY2Fubm90IGVuYWJsZSBsb25nIHN0YWNrIHRyYWNlcyBhZnRlciBwcm9taXNlcyBoYXZlIGJlZW4gY3JlYXRlZFxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcdTAwMGFcIik7XG4gICAgfVxuICAgIGlmICghY29uZmlnLmxvbmdTdGFja1RyYWNlcyAmJiBsb25nU3RhY2tUcmFjZXNJc1N1cHBvcnRlZCgpKSB7XG4gICAgICAgIHZhciBQcm9taXNlX2NhcHR1cmVTdGFja1RyYWNlID0gUHJvbWlzZS5wcm90b3R5cGUuX2NhcHR1cmVTdGFja1RyYWNlO1xuICAgICAgICB2YXIgUHJvbWlzZV9hdHRhY2hFeHRyYVRyYWNlID0gUHJvbWlzZS5wcm90b3R5cGUuX2F0dGFjaEV4dHJhVHJhY2U7XG4gICAgICAgIGNvbmZpZy5sb25nU3RhY2tUcmFjZXMgPSB0cnVlO1xuICAgICAgICBkaXNhYmxlTG9uZ1N0YWNrVHJhY2VzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoYXN5bmMuaGF2ZUl0ZW1zUXVldWVkKCkgJiYgIWNvbmZpZy5sb25nU3RhY2tUcmFjZXMpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJjYW5ub3QgZW5hYmxlIGxvbmcgc3RhY2sgdHJhY2VzIGFmdGVyIHByb21pc2VzIGhhdmUgYmVlbiBjcmVhdGVkXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFx1MDAwYVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFByb21pc2UucHJvdG90eXBlLl9jYXB0dXJlU3RhY2tUcmFjZSA9IFByb21pc2VfY2FwdHVyZVN0YWNrVHJhY2U7XG4gICAgICAgICAgICBQcm9taXNlLnByb3RvdHlwZS5fYXR0YWNoRXh0cmFUcmFjZSA9IFByb21pc2VfYXR0YWNoRXh0cmFUcmFjZTtcbiAgICAgICAgICAgIENvbnRleHQuZGVhY3RpdmF0ZUxvbmdTdGFja1RyYWNlcygpO1xuICAgICAgICAgICAgYXN5bmMuZW5hYmxlVHJhbXBvbGluZSgpO1xuICAgICAgICAgICAgY29uZmlnLmxvbmdTdGFja1RyYWNlcyA9IGZhbHNlO1xuICAgICAgICB9O1xuICAgICAgICBQcm9taXNlLnByb3RvdHlwZS5fY2FwdHVyZVN0YWNrVHJhY2UgPSBsb25nU3RhY2tUcmFjZXNDYXB0dXJlU3RhY2tUcmFjZTtcbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX2F0dGFjaEV4dHJhVHJhY2UgPSBsb25nU3RhY2tUcmFjZXNBdHRhY2hFeHRyYVRyYWNlO1xuICAgICAgICBDb250ZXh0LmFjdGl2YXRlTG9uZ1N0YWNrVHJhY2VzKCk7XG4gICAgICAgIGFzeW5jLmRpc2FibGVUcmFtcG9saW5lSWZOZWNlc3NhcnkoKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLmhhc0xvbmdTdGFja1RyYWNlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gY29uZmlnLmxvbmdTdGFja1RyYWNlcyAmJiBsb25nU3RhY2tUcmFjZXNJc1N1cHBvcnRlZCgpO1xufTtcblxudmFyIGZpcmVEb21FdmVudCA9IChmdW5jdGlvbigpIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIEN1c3RvbUV2ZW50ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBldmVudCA9IG5ldyBDdXN0b21FdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgICAgICAgdXRpbC5nbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obmFtZSwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9tRXZlbnQgPSBuZXcgQ3VzdG9tRXZlbnQobmFtZS50b0xvd2VyQ2FzZSgpLCB7XG4gICAgICAgICAgICAgICAgICAgIGRldGFpbDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWVcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gIXV0aWwuZ2xvYmFsLmRpc3BhdGNoRXZlbnQoZG9tRXZlbnQpO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gbmV3IEV2ZW50KFwiQ3VzdG9tRXZlbnRcIik7XG4gICAgICAgICAgICB1dGlsLmdsb2JhbC5kaXNwYXRjaEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbihuYW1lLCBldmVudCkge1xuICAgICAgICAgICAgICAgIHZhciBkb21FdmVudCA9IG5ldyBFdmVudChuYW1lLnRvTG93ZXJDYXNlKCksIHtcbiAgICAgICAgICAgICAgICAgICAgY2FuY2VsYWJsZTogdHJ1ZVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGRvbUV2ZW50LmRldGFpbCA9IGV2ZW50O1xuICAgICAgICAgICAgICAgIHJldHVybiAhdXRpbC5nbG9iYWwuZGlzcGF0Y2hFdmVudChkb21FdmVudCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGV2ZW50ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJDdXN0b21FdmVudFwiKTtcbiAgICAgICAgICAgIGV2ZW50LmluaXRDdXN0b21FdmVudChcInRlc3Rpbmd0aGVldmVudFwiLCBmYWxzZSwgdHJ1ZSwge30pO1xuICAgICAgICAgICAgdXRpbC5nbG9iYWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24obmFtZSwgZXZlbnQpIHtcbiAgICAgICAgICAgICAgICB2YXIgZG9tRXZlbnQgPSBkb2N1bWVudC5jcmVhdGVFdmVudChcIkN1c3RvbUV2ZW50XCIpO1xuICAgICAgICAgICAgICAgIGRvbUV2ZW50LmluaXRDdXN0b21FdmVudChuYW1lLnRvTG93ZXJDYXNlKCksIGZhbHNlLCB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBldmVudCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuICF1dGlsLmdsb2JhbC5kaXNwYXRjaEV2ZW50KGRvbUV2ZW50KTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59KSgpO1xuXG52YXIgZmlyZUdsb2JhbEV2ZW50ID0gKGZ1bmN0aW9uKCkge1xuICAgIGlmICh1dGlsLmlzTm9kZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvY2Vzcy5lbWl0LmFwcGx5KHByb2Nlc3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCF1dGlsLmdsb2JhbCkge1xuICAgICAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgICAgICAgIHZhciBtZXRob2ROYW1lID0gXCJvblwiICsgbmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgdmFyIG1ldGhvZCA9IHV0aWwuZ2xvYmFsW21ldGhvZE5hbWVdO1xuICAgICAgICAgICAgaWYgKCFtZXRob2QpIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIG1ldGhvZC5hcHBseSh1dGlsLmdsb2JhbCwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9O1xuICAgIH1cbn0pKCk7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlUHJvbWlzZUxpZmVjeWNsZUV2ZW50T2JqZWN0KG5hbWUsIHByb21pc2UpIHtcbiAgICByZXR1cm4ge3Byb21pc2U6IHByb21pc2V9O1xufVxuXG52YXIgZXZlbnRUb09iamVjdEdlbmVyYXRvciA9IHtcbiAgICBwcm9taXNlQ3JlYXRlZDogZ2VuZXJhdGVQcm9taXNlTGlmZWN5Y2xlRXZlbnRPYmplY3QsXG4gICAgcHJvbWlzZUZ1bGZpbGxlZDogZ2VuZXJhdGVQcm9taXNlTGlmZWN5Y2xlRXZlbnRPYmplY3QsXG4gICAgcHJvbWlzZVJlamVjdGVkOiBnZW5lcmF0ZVByb21pc2VMaWZlY3ljbGVFdmVudE9iamVjdCxcbiAgICBwcm9taXNlUmVzb2x2ZWQ6IGdlbmVyYXRlUHJvbWlzZUxpZmVjeWNsZUV2ZW50T2JqZWN0LFxuICAgIHByb21pc2VDYW5jZWxsZWQ6IGdlbmVyYXRlUHJvbWlzZUxpZmVjeWNsZUV2ZW50T2JqZWN0LFxuICAgIHByb21pc2VDaGFpbmVkOiBmdW5jdGlvbihuYW1lLCBwcm9taXNlLCBjaGlsZCkge1xuICAgICAgICByZXR1cm4ge3Byb21pc2U6IHByb21pc2UsIGNoaWxkOiBjaGlsZH07XG4gICAgfSxcbiAgICB3YXJuaW5nOiBmdW5jdGlvbihuYW1lLCB3YXJuaW5nKSB7XG4gICAgICAgIHJldHVybiB7d2FybmluZzogd2FybmluZ307XG4gICAgfSxcbiAgICB1bmhhbmRsZWRSZWplY3Rpb246IGZ1bmN0aW9uIChuYW1lLCByZWFzb24sIHByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIHtyZWFzb246IHJlYXNvbiwgcHJvbWlzZTogcHJvbWlzZX07XG4gICAgfSxcbiAgICByZWplY3Rpb25IYW5kbGVkOiBnZW5lcmF0ZVByb21pc2VMaWZlY3ljbGVFdmVudE9iamVjdFxufTtcblxudmFyIGFjdGl2ZUZpcmVFdmVudCA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgdmFyIGdsb2JhbEV2ZW50RmlyZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICBnbG9iYWxFdmVudEZpcmVkID0gZmlyZUdsb2JhbEV2ZW50LmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKGUpO1xuICAgICAgICBnbG9iYWxFdmVudEZpcmVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgZG9tRXZlbnRGaXJlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGRvbUV2ZW50RmlyZWQgPSBmaXJlRG9tRXZlbnQobmFtZSxcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRUb09iamVjdEdlbmVyYXRvcltuYW1lXS5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGFzeW5jLnRocm93TGF0ZXIoZSk7XG4gICAgICAgIGRvbUV2ZW50RmlyZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBkb21FdmVudEZpcmVkIHx8IGdsb2JhbEV2ZW50RmlyZWQ7XG59O1xuXG5Qcm9taXNlLmNvbmZpZyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgICBvcHRzID0gT2JqZWN0KG9wdHMpO1xuICAgIGlmIChcImxvbmdTdGFja1RyYWNlc1wiIGluIG9wdHMpIHtcbiAgICAgICAgaWYgKG9wdHMubG9uZ1N0YWNrVHJhY2VzKSB7XG4gICAgICAgICAgICBQcm9taXNlLmxvbmdTdGFja1RyYWNlcygpO1xuICAgICAgICB9IGVsc2UgaWYgKCFvcHRzLmxvbmdTdGFja1RyYWNlcyAmJiBQcm9taXNlLmhhc0xvbmdTdGFja1RyYWNlcygpKSB7XG4gICAgICAgICAgICBkaXNhYmxlTG9uZ1N0YWNrVHJhY2VzKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKFwid2FybmluZ3NcIiBpbiBvcHRzKSB7XG4gICAgICAgIHZhciB3YXJuaW5nc09wdGlvbiA9IG9wdHMud2FybmluZ3M7XG4gICAgICAgIGNvbmZpZy53YXJuaW5ncyA9ICEhd2FybmluZ3NPcHRpb247XG4gICAgICAgIHdGb3Jnb3R0ZW5SZXR1cm4gPSBjb25maWcud2FybmluZ3M7XG5cbiAgICAgICAgaWYgKHV0aWwuaXNPYmplY3Qod2FybmluZ3NPcHRpb24pKSB7XG4gICAgICAgICAgICBpZiAoXCJ3Rm9yZ290dGVuUmV0dXJuXCIgaW4gd2FybmluZ3NPcHRpb24pIHtcbiAgICAgICAgICAgICAgICB3Rm9yZ290dGVuUmV0dXJuID0gISF3YXJuaW5nc09wdGlvbi53Rm9yZ290dGVuUmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChcImNhbmNlbGxhdGlvblwiIGluIG9wdHMgJiYgb3B0cy5jYW5jZWxsYXRpb24gJiYgIWNvbmZpZy5jYW5jZWxsYXRpb24pIHtcbiAgICAgICAgaWYgKGFzeW5jLmhhdmVJdGVtc1F1ZXVlZCgpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgXCJjYW5ub3QgZW5hYmxlIGNhbmNlbGxhdGlvbiBhZnRlciBwcm9taXNlcyBhcmUgaW4gdXNlXCIpO1xuICAgICAgICB9XG4gICAgICAgIFByb21pc2UucHJvdG90eXBlLl9jbGVhckNhbmNlbGxhdGlvbkRhdGEgPVxuICAgICAgICAgICAgY2FuY2VsbGF0aW9uQ2xlYXJDYW5jZWxsYXRpb25EYXRhO1xuICAgICAgICBQcm9taXNlLnByb3RvdHlwZS5fcHJvcGFnYXRlRnJvbSA9IGNhbmNlbGxhdGlvblByb3BhZ2F0ZUZyb207XG4gICAgICAgIFByb21pc2UucHJvdG90eXBlLl9vbkNhbmNlbCA9IGNhbmNlbGxhdGlvbk9uQ2FuY2VsO1xuICAgICAgICBQcm9taXNlLnByb3RvdHlwZS5fc2V0T25DYW5jZWwgPSBjYW5jZWxsYXRpb25TZXRPbkNhbmNlbDtcbiAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX2F0dGFjaENhbmNlbGxhdGlvbkNhbGxiYWNrID1cbiAgICAgICAgICAgIGNhbmNlbGxhdGlvbkF0dGFjaENhbmNlbGxhdGlvbkNhbGxiYWNrO1xuICAgICAgICBQcm9taXNlLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGNhbmNlbGxhdGlvbkV4ZWN1dGU7XG4gICAgICAgIHByb3BhZ2F0ZUZyb21GdW5jdGlvbiA9IGNhbmNlbGxhdGlvblByb3BhZ2F0ZUZyb207XG4gICAgICAgIGNvbmZpZy5jYW5jZWxsYXRpb24gPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoXCJtb25pdG9yaW5nXCIgaW4gb3B0cykge1xuICAgICAgICBpZiAob3B0cy5tb25pdG9yaW5nICYmICFjb25maWcubW9uaXRvcmluZykge1xuICAgICAgICAgICAgY29uZmlnLm1vbml0b3JpbmcgPSB0cnVlO1xuICAgICAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX2ZpcmVFdmVudCA9IGFjdGl2ZUZpcmVFdmVudDtcbiAgICAgICAgfSBlbHNlIGlmICghb3B0cy5tb25pdG9yaW5nICYmIGNvbmZpZy5tb25pdG9yaW5nKSB7XG4gICAgICAgICAgICBjb25maWcubW9uaXRvcmluZyA9IGZhbHNlO1xuICAgICAgICAgICAgUHJvbWlzZS5wcm90b3R5cGUuX2ZpcmVFdmVudCA9IGRlZmF1bHRGaXJlRXZlbnQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2U7XG59O1xuXG5mdW5jdGlvbiBkZWZhdWx0RmlyZUV2ZW50KCkgeyByZXR1cm4gZmFsc2U7IH1cblxuUHJvbWlzZS5wcm90b3R5cGUuX2ZpcmVFdmVudCA9IGRlZmF1bHRGaXJlRXZlbnQ7XG5Qcm9taXNlLnByb3RvdHlwZS5fZXhlY3V0ZSA9IGZ1bmN0aW9uKGV4ZWN1dG9yLCByZXNvbHZlLCByZWplY3QpIHtcbiAgICB0cnkge1xuICAgICAgICBleGVjdXRvcihyZXNvbHZlLCByZWplY3QpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGU7XG4gICAgfVxufTtcblByb21pc2UucHJvdG90eXBlLl9vbkNhbmNlbCA9IGZ1bmN0aW9uICgpIHt9O1xuUHJvbWlzZS5wcm90b3R5cGUuX3NldE9uQ2FuY2VsID0gZnVuY3Rpb24gKGhhbmRsZXIpIHsgOyB9O1xuUHJvbWlzZS5wcm90b3R5cGUuX2F0dGFjaENhbmNlbGxhdGlvbkNhbGxiYWNrID0gZnVuY3Rpb24ob25DYW5jZWwpIHtcbiAgICA7XG59O1xuUHJvbWlzZS5wcm90b3R5cGUuX2NhcHR1cmVTdGFja1RyYWNlID0gZnVuY3Rpb24gKCkge307XG5Qcm9taXNlLnByb3RvdHlwZS5fYXR0YWNoRXh0cmFUcmFjZSA9IGZ1bmN0aW9uICgpIHt9O1xuUHJvbWlzZS5wcm90b3R5cGUuX2NsZWFyQ2FuY2VsbGF0aW9uRGF0YSA9IGZ1bmN0aW9uKCkge307XG5Qcm9taXNlLnByb3RvdHlwZS5fcHJvcGFnYXRlRnJvbSA9IGZ1bmN0aW9uIChwYXJlbnQsIGZsYWdzKSB7XG4gICAgO1xuICAgIDtcbn07XG5cbmZ1bmN0aW9uIGNhbmNlbGxhdGlvbkV4ZWN1dGUoZXhlY3V0b3IsIHJlc29sdmUsIHJlamVjdCkge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB0cnkge1xuICAgICAgICBleGVjdXRvcihyZXNvbHZlLCByZWplY3QsIGZ1bmN0aW9uKG9uQ2FuY2VsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG9uQ2FuY2VsICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwib25DYW5jZWwgbXVzdCBiZSBhIGZ1bmN0aW9uLCBnb3Q6IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwudG9TdHJpbmcob25DYW5jZWwpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHByb21pc2UuX2F0dGFjaENhbmNlbGxhdGlvbkNhbGxiYWNrKG9uQ2FuY2VsKTtcbiAgICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNhbmNlbGxhdGlvbkF0dGFjaENhbmNlbGxhdGlvbkNhbGxiYWNrKG9uQ2FuY2VsKSB7XG4gICAgaWYgKCF0aGlzLl9pc0NhbmNlbGxhYmxlKCkpIHJldHVybiB0aGlzO1xuXG4gICAgdmFyIHByZXZpb3VzT25DYW5jZWwgPSB0aGlzLl9vbkNhbmNlbCgpO1xuICAgIGlmIChwcmV2aW91c09uQ2FuY2VsICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHV0aWwuaXNBcnJheShwcmV2aW91c09uQ2FuY2VsKSkge1xuICAgICAgICAgICAgcHJldmlvdXNPbkNhbmNlbC5wdXNoKG9uQ2FuY2VsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3NldE9uQ2FuY2VsKFtwcmV2aW91c09uQ2FuY2VsLCBvbkNhbmNlbF0pO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fc2V0T25DYW5jZWwob25DYW5jZWwpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2FuY2VsbGF0aW9uT25DYW5jZWwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX29uQ2FuY2VsRmllbGQ7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbGxhdGlvblNldE9uQ2FuY2VsKG9uQ2FuY2VsKSB7XG4gICAgdGhpcy5fb25DYW5jZWxGaWVsZCA9IG9uQ2FuY2VsO1xufVxuXG5mdW5jdGlvbiBjYW5jZWxsYXRpb25DbGVhckNhbmNlbGxhdGlvbkRhdGEoKSB7XG4gICAgdGhpcy5fY2FuY2VsbGF0aW9uUGFyZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX29uQ2FuY2VsRmllbGQgPSB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGNhbmNlbGxhdGlvblByb3BhZ2F0ZUZyb20ocGFyZW50LCBmbGFncykge1xuICAgIGlmICgoZmxhZ3MgJiAxKSAhPT0gMCkge1xuICAgICAgICB0aGlzLl9jYW5jZWxsYXRpb25QYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHZhciBicmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsID0gcGFyZW50Ll9icmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsO1xuICAgICAgICBpZiAoYnJhbmNoZXNSZW1haW5pbmdUb0NhbmNlbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBicmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsID0gMDtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQuX2JyYW5jaGVzUmVtYWluaW5nVG9DYW5jZWwgPSBicmFuY2hlc1JlbWFpbmluZ1RvQ2FuY2VsICsgMTtcbiAgICB9XG4gICAgaWYgKChmbGFncyAmIDIpICE9PSAwICYmIHBhcmVudC5faXNCb3VuZCgpKSB7XG4gICAgICAgIHRoaXMuX3NldEJvdW5kVG8ocGFyZW50Ll9ib3VuZFRvKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGJpbmRpbmdQcm9wYWdhdGVGcm9tKHBhcmVudCwgZmxhZ3MpIHtcbiAgICBpZiAoKGZsYWdzICYgMikgIT09IDAgJiYgcGFyZW50Ll9pc0JvdW5kKCkpIHtcbiAgICAgICAgdGhpcy5fc2V0Qm91bmRUbyhwYXJlbnQuX2JvdW5kVG8pO1xuICAgIH1cbn1cbnZhciBwcm9wYWdhdGVGcm9tRnVuY3Rpb24gPSBiaW5kaW5nUHJvcGFnYXRlRnJvbTtcblxuZnVuY3Rpb24gYm91bmRWYWx1ZUZ1bmN0aW9uKCkge1xuICAgIHZhciByZXQgPSB0aGlzLl9ib3VuZFRvO1xuICAgIGlmIChyZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAocmV0IGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgaWYgKHJldC5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldC52YWx1ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIGxvbmdTdGFja1RyYWNlc0NhcHR1cmVTdGFja1RyYWNlKCkge1xuICAgIHRoaXMuX3RyYWNlID0gbmV3IENhcHR1cmVkVHJhY2UodGhpcy5fcGVla0NvbnRleHQoKSk7XG59XG5cbmZ1bmN0aW9uIGxvbmdTdGFja1RyYWNlc0F0dGFjaEV4dHJhVHJhY2UoZXJyb3IsIGlnbm9yZVNlbGYpIHtcbiAgICBpZiAoY2FuQXR0YWNoVHJhY2UoZXJyb3IpKSB7XG4gICAgICAgIHZhciB0cmFjZSA9IHRoaXMuX3RyYWNlO1xuICAgICAgICBpZiAodHJhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgaWYgKGlnbm9yZVNlbGYpIHRyYWNlID0gdHJhY2UuX3BhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHJhY2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdHJhY2UuYXR0YWNoRXh0cmFUcmFjZShlcnJvcik7XG4gICAgICAgIH0gZWxzZSBpZiAoIWVycm9yLl9fc3RhY2tDbGVhbmVkX18pIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWQgPSBwYXJzZVN0YWNrQW5kTWVzc2FnZShlcnJvcik7XG4gICAgICAgICAgICB1dGlsLm5vdEVudW1lcmFibGVQcm9wKGVycm9yLCBcInN0YWNrXCIsXG4gICAgICAgICAgICAgICAgcGFyc2VkLm1lc3NhZ2UgKyBcIlxcblwiICsgcGFyc2VkLnN0YWNrLmpvaW4oXCJcXG5cIikpO1xuICAgICAgICAgICAgdXRpbC5ub3RFbnVtZXJhYmxlUHJvcChlcnJvciwgXCJfX3N0YWNrQ2xlYW5lZF9fXCIsIHRydWUpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ZvcmdvdHRlblJldHVybnMocmV0dXJuVmFsdWUsIHByb21pc2VDcmVhdGVkLCBuYW1lLCBwcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudCkge1xuICAgIGlmIChyZXR1cm5WYWx1ZSA9PT0gdW5kZWZpbmVkICYmIHByb21pc2VDcmVhdGVkICE9PSBudWxsICYmXG4gICAgICAgIHdGb3Jnb3R0ZW5SZXR1cm4pIHtcbiAgICAgICAgaWYgKHBhcmVudCAhPT0gdW5kZWZpbmVkICYmIHBhcmVudC5fcmV0dXJuZWROb25VbmRlZmluZWQoKSkgcmV0dXJuO1xuICAgICAgICBpZiAoKHByb21pc2UuX2JpdEZpZWxkICYgNjU1MzUpID09PSAwKSByZXR1cm47XG5cbiAgICAgICAgaWYgKG5hbWUpIG5hbWUgPSBuYW1lICsgXCIgXCI7XG4gICAgICAgIHZhciBoYW5kbGVyTGluZSA9IFwiXCI7XG4gICAgICAgIHZhciBjcmVhdG9yTGluZSA9IFwiXCI7XG4gICAgICAgIGlmIChwcm9taXNlQ3JlYXRlZC5fdHJhY2UpIHtcbiAgICAgICAgICAgIHZhciB0cmFjZUxpbmVzID0gcHJvbWlzZUNyZWF0ZWQuX3RyYWNlLnN0YWNrLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gY2xlYW5TdGFjayh0cmFjZUxpbmVzKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICAgICAgICAgIHZhciBsaW5lID0gc3RhY2tbaV07XG4gICAgICAgICAgICAgICAgaWYgKCFub2RlRnJhbWVQYXR0ZXJuLnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxpbmVNYXRjaGVzID0gbGluZS5tYXRjaChwYXJzZUxpbmVQYXR0ZXJuKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGxpbmVNYXRjaGVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyTGluZSAgPSBcImF0IFwiICsgbGluZU1hdGNoZXNbMV0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiOlwiICsgbGluZU1hdGNoZXNbMl0gKyBcIjpcIiArIGxpbmVNYXRjaGVzWzNdICsgXCIgXCI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoc3RhY2subGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHZhciBmaXJzdFVzZXJMaW5lID0gc3RhY2tbMF07XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmFjZUxpbmVzLmxlbmd0aDsgKytpKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYWNlTGluZXNbaV0gPT09IGZpcnN0VXNlckxpbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0b3JMaW5lID0gXCJcXG5cIiArIHRyYWNlTGluZXNbaSAtIDFdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgbXNnID0gXCJhIHByb21pc2Ugd2FzIGNyZWF0ZWQgaW4gYSBcIiArIG5hbWUgK1xuICAgICAgICAgICAgXCJoYW5kbGVyIFwiICsgaGFuZGxlckxpbmUgKyBcImJ1dCB3YXMgbm90IHJldHVybmVkIGZyb20gaXQsIFwiICtcbiAgICAgICAgICAgIFwic2VlIGh0dHA6Ly9nb28uZ2wvclJxTVV3XCIgK1xuICAgICAgICAgICAgY3JlYXRvckxpbmU7XG4gICAgICAgIHByb21pc2UuX3dhcm4obXNnLCB0cnVlLCBwcm9taXNlQ3JlYXRlZCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkZXByZWNhdGVkKG5hbWUsIHJlcGxhY2VtZW50KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBuYW1lICtcbiAgICAgICAgXCIgaXMgZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIHZlcnNpb24uXCI7XG4gICAgaWYgKHJlcGxhY2VtZW50KSBtZXNzYWdlICs9IFwiIFVzZSBcIiArIHJlcGxhY2VtZW50ICsgXCIgaW5zdGVhZC5cIjtcbiAgICByZXR1cm4gd2FybihtZXNzYWdlKTtcbn1cblxuZnVuY3Rpb24gd2FybihtZXNzYWdlLCBzaG91bGRVc2VPd25UcmFjZSwgcHJvbWlzZSkge1xuICAgIGlmICghY29uZmlnLndhcm5pbmdzKSByZXR1cm47XG4gICAgdmFyIHdhcm5pbmcgPSBuZXcgV2FybmluZyhtZXNzYWdlKTtcbiAgICB2YXIgY3R4O1xuICAgIGlmIChzaG91bGRVc2VPd25UcmFjZSkge1xuICAgICAgICBwcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHdhcm5pbmcpO1xuICAgIH0gZWxzZSBpZiAoY29uZmlnLmxvbmdTdGFja1RyYWNlcyAmJiAoY3R4ID0gUHJvbWlzZS5fcGVla0NvbnRleHQoKSkpIHtcbiAgICAgICAgY3R4LmF0dGFjaEV4dHJhVHJhY2Uod2FybmluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIHBhcnNlZCA9IHBhcnNlU3RhY2tBbmRNZXNzYWdlKHdhcm5pbmcpO1xuICAgICAgICB3YXJuaW5nLnN0YWNrID0gcGFyc2VkLm1lc3NhZ2UgKyBcIlxcblwiICsgcGFyc2VkLnN0YWNrLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuXG4gICAgaWYgKCFhY3RpdmVGaXJlRXZlbnQoXCJ3YXJuaW5nXCIsIHdhcm5pbmcpKSB7XG4gICAgICAgIGZvcm1hdEFuZExvZ0Vycm9yKHdhcm5pbmcsIFwiXCIsIHRydWUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gcmVjb25zdHJ1Y3RTdGFjayhtZXNzYWdlLCBzdGFja3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrcy5sZW5ndGggLSAxOyArK2kpIHtcbiAgICAgICAgc3RhY2tzW2ldLnB1c2goXCJGcm9tIHByZXZpb3VzIGV2ZW50OlwiKTtcbiAgICAgICAgc3RhY2tzW2ldID0gc3RhY2tzW2ldLmpvaW4oXCJcXG5cIik7XG4gICAgfVxuICAgIGlmIChpIDwgc3RhY2tzLmxlbmd0aCkge1xuICAgICAgICBzdGFja3NbaV0gPSBzdGFja3NbaV0uam9pbihcIlxcblwiKTtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2UgKyBcIlxcblwiICsgc3RhY2tzLmpvaW4oXCJcXG5cIik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUR1cGxpY2F0ZU9yRW1wdHlKdW1wcyhzdGFja3MpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoc3RhY2tzW2ldLmxlbmd0aCA9PT0gMCB8fFxuICAgICAgICAgICAgKChpICsgMSA8IHN0YWNrcy5sZW5ndGgpICYmIHN0YWNrc1tpXVswXSA9PT0gc3RhY2tzW2krMV1bMF0pKSB7XG4gICAgICAgICAgICBzdGFja3Muc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgaS0tO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVDb21tb25Sb290cyhzdGFja3MpIHtcbiAgICB2YXIgY3VycmVudCA9IHN0YWNrc1swXTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IHN0YWNrcy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgcHJldiA9IHN0YWNrc1tpXTtcbiAgICAgICAgdmFyIGN1cnJlbnRMYXN0SW5kZXggPSBjdXJyZW50Lmxlbmd0aCAtIDE7XG4gICAgICAgIHZhciBjdXJyZW50TGFzdExpbmUgPSBjdXJyZW50W2N1cnJlbnRMYXN0SW5kZXhdO1xuICAgICAgICB2YXIgY29tbW9uUm9vdE1lZXRQb2ludCA9IC0xO1xuXG4gICAgICAgIGZvciAodmFyIGogPSBwcmV2Lmxlbmd0aCAtIDE7IGogPj0gMDsgLS1qKSB7XG4gICAgICAgICAgICBpZiAocHJldltqXSA9PT0gY3VycmVudExhc3RMaW5lKSB7XG4gICAgICAgICAgICAgICAgY29tbW9uUm9vdE1lZXRQb2ludCA9IGo7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gY29tbW9uUm9vdE1lZXRQb2ludDsgaiA+PSAwOyAtLWopIHtcbiAgICAgICAgICAgIHZhciBsaW5lID0gcHJldltqXTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50W2N1cnJlbnRMYXN0SW5kZXhdID09PSBsaW5lKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC5wb3AoKTtcbiAgICAgICAgICAgICAgICBjdXJyZW50TGFzdEluZGV4LS07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnQgPSBwcmV2O1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY2xlYW5TdGFjayhzdGFjaykge1xuICAgIHZhciByZXQgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YWNrLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBsaW5lID0gc3RhY2tbaV07XG4gICAgICAgIHZhciBpc1RyYWNlTGluZSA9IFwiICAgIChObyBzdGFjayB0cmFjZSlcIiA9PT0gbGluZSB8fFxuICAgICAgICAgICAgc3RhY2tGcmFtZVBhdHRlcm4udGVzdChsaW5lKTtcbiAgICAgICAgdmFyIGlzSW50ZXJuYWxGcmFtZSA9IGlzVHJhY2VMaW5lICYmIHNob3VsZElnbm9yZShsaW5lKTtcbiAgICAgICAgaWYgKGlzVHJhY2VMaW5lICYmICFpc0ludGVybmFsRnJhbWUpIHtcbiAgICAgICAgICAgIGlmIChpbmRlbnRTdGFja0ZyYW1lcyAmJiBsaW5lLmNoYXJBdCgwKSAhPT0gXCIgXCIpIHtcbiAgICAgICAgICAgICAgICBsaW5lID0gXCIgICAgXCIgKyBsaW5lO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0LnB1c2gobGluZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc3RhY2tGcmFtZXNBc0FycmF5KGVycm9yKSB7XG4gICAgdmFyIHN0YWNrID0gZXJyb3Iuc3RhY2sucmVwbGFjZSgvXFxzKyQvZywgXCJcIikuc3BsaXQoXCJcXG5cIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdGFjay5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgbGluZSA9IHN0YWNrW2ldO1xuICAgICAgICBpZiAoXCIgICAgKE5vIHN0YWNrIHRyYWNlKVwiID09PSBsaW5lIHx8IHN0YWNrRnJhbWVQYXR0ZXJuLnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpID4gMCAmJiBlcnJvci5uYW1lICE9IFwiU3ludGF4RXJyb3JcIikge1xuICAgICAgICBzdGFjayA9IHN0YWNrLnNsaWNlKGkpO1xuICAgIH1cbiAgICByZXR1cm4gc3RhY2s7XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RhY2tBbmRNZXNzYWdlKGVycm9yKSB7XG4gICAgdmFyIHN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gICAgdmFyIG1lc3NhZ2UgPSBlcnJvci50b1N0cmluZygpO1xuICAgIHN0YWNrID0gdHlwZW9mIHN0YWNrID09PSBcInN0cmluZ1wiICYmIHN0YWNrLmxlbmd0aCA+IDBcbiAgICAgICAgICAgICAgICA/IHN0YWNrRnJhbWVzQXNBcnJheShlcnJvcikgOiBbXCIgICAgKE5vIHN0YWNrIHRyYWNlKVwiXTtcbiAgICByZXR1cm4ge1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgICBzdGFjazogZXJyb3IubmFtZSA9PSBcIlN5bnRheEVycm9yXCIgPyBzdGFjayA6IGNsZWFuU3RhY2soc3RhY2spXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0QW5kTG9nRXJyb3IoZXJyb3IsIHRpdGxlLCBpc1NvZnQpIHtcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2U7XG4gICAgICAgIGlmICh1dGlsLmlzT2JqZWN0KGVycm9yKSkge1xuICAgICAgICAgICAgdmFyIHN0YWNrID0gZXJyb3Iuc3RhY2s7XG4gICAgICAgICAgICBtZXNzYWdlID0gdGl0bGUgKyBmb3JtYXRTdGFjayhzdGFjaywgZXJyb3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbWVzc2FnZSA9IHRpdGxlICsgU3RyaW5nKGVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHByaW50V2FybmluZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICBwcmludFdhcm5pbmcobWVzc2FnZSwgaXNTb2Z0KTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY29uc29sZS5sb2cgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICAgICAgICAgdHlwZW9mIGNvbnNvbGUubG9nID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gZmlyZVJlamVjdGlvbkV2ZW50KG5hbWUsIGxvY2FsSGFuZGxlciwgcmVhc29uLCBwcm9taXNlKSB7XG4gICAgdmFyIGxvY2FsRXZlbnRGaXJlZCA9IGZhbHNlO1xuICAgIHRyeSB7XG4gICAgICAgIGlmICh0eXBlb2YgbG9jYWxIYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGxvY2FsRXZlbnRGaXJlZCA9IHRydWU7XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gXCJyZWplY3Rpb25IYW5kbGVkXCIpIHtcbiAgICAgICAgICAgICAgICBsb2NhbEhhbmRsZXIocHJvbWlzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGxvY2FsSGFuZGxlcihyZWFzb24sIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBhc3luYy50aHJvd0xhdGVyKGUpO1xuICAgIH1cblxuICAgIGlmIChuYW1lID09PSBcInVuaGFuZGxlZFJlamVjdGlvblwiKSB7XG4gICAgICAgIGlmICghYWN0aXZlRmlyZUV2ZW50KG5hbWUsIHJlYXNvbiwgcHJvbWlzZSkgJiYgIWxvY2FsRXZlbnRGaXJlZCkge1xuICAgICAgICAgICAgZm9ybWF0QW5kTG9nRXJyb3IocmVhc29uLCBcIlVuaGFuZGxlZCByZWplY3Rpb24gXCIpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWN0aXZlRmlyZUV2ZW50KG5hbWUsIHByb21pc2UpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZm9ybWF0Tm9uRXJyb3Iob2JqKSB7XG4gICAgdmFyIHN0cjtcbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHN0ciA9IFwiW2Z1bmN0aW9uIFwiICtcbiAgICAgICAgICAgIChvYmoubmFtZSB8fCBcImFub255bW91c1wiKSArXG4gICAgICAgICAgICBcIl1cIjtcbiAgICB9IGVsc2Uge1xuICAgICAgICBzdHIgPSBvYmogJiYgdHlwZW9mIG9iai50b1N0cmluZyA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICA/IG9iai50b1N0cmluZygpIDogdXRpbC50b1N0cmluZyhvYmopO1xuICAgICAgICB2YXIgcnVzZWxlc3NUb1N0cmluZyA9IC9cXFtvYmplY3QgW2EtekEtWjAtOSRfXStcXF0vO1xuICAgICAgICBpZiAocnVzZWxlc3NUb1N0cmluZy50ZXN0KHN0cikpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgdmFyIG5ld1N0ciA9IEpTT04uc3RyaW5naWZ5KG9iaik7XG4gICAgICAgICAgICAgICAgc3RyID0gbmV3U3RyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2goZSkge1xuXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHN0ciA9IFwiKGVtcHR5IGFycmF5KVwiO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoXCIoPFwiICsgc25pcChzdHIpICsgXCI+LCBubyBzdGFjayB0cmFjZSlcIik7XG59XG5cbmZ1bmN0aW9uIHNuaXAoc3RyKSB7XG4gICAgdmFyIG1heENoYXJzID0gNDE7XG4gICAgaWYgKHN0ci5sZW5ndGggPCBtYXhDaGFycykge1xuICAgICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICByZXR1cm4gc3RyLnN1YnN0cigwLCBtYXhDaGFycyAtIDMpICsgXCIuLi5cIjtcbn1cblxuZnVuY3Rpb24gbG9uZ1N0YWNrVHJhY2VzSXNTdXBwb3J0ZWQoKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBjYXB0dXJlU3RhY2tUcmFjZSA9PT0gXCJmdW5jdGlvblwiO1xufVxuXG52YXIgc2hvdWxkSWdub3JlID0gZnVuY3Rpb24oKSB7IHJldHVybiBmYWxzZTsgfTtcbnZhciBwYXJzZUxpbmVJbmZvUmVnZXggPSAvW1xcLzxcXChdKFteOlxcL10rKTooXFxkKyk6KD86XFxkKylcXCk/XFxzKiQvO1xuZnVuY3Rpb24gcGFyc2VMaW5lSW5mbyhsaW5lKSB7XG4gICAgdmFyIG1hdGNoZXMgPSBsaW5lLm1hdGNoKHBhcnNlTGluZUluZm9SZWdleCk7XG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBtYXRjaGVzWzFdLFxuICAgICAgICAgICAgbGluZTogcGFyc2VJbnQobWF0Y2hlc1syXSwgMTApXG4gICAgICAgIH07XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzZXRCb3VuZHMoZmlyc3RMaW5lRXJyb3IsIGxhc3RMaW5lRXJyb3IpIHtcbiAgICBpZiAoIWxvbmdTdGFja1RyYWNlc0lzU3VwcG9ydGVkKCkpIHJldHVybjtcbiAgICB2YXIgZmlyc3RTdGFja0xpbmVzID0gZmlyc3RMaW5lRXJyb3Iuc3RhY2suc3BsaXQoXCJcXG5cIik7XG4gICAgdmFyIGxhc3RTdGFja0xpbmVzID0gbGFzdExpbmVFcnJvci5zdGFjay5zcGxpdChcIlxcblwiKTtcbiAgICB2YXIgZmlyc3RJbmRleCA9IC0xO1xuICAgIHZhciBsYXN0SW5kZXggPSAtMTtcbiAgICB2YXIgZmlyc3RGaWxlTmFtZTtcbiAgICB2YXIgbGFzdEZpbGVOYW1lO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZmlyc3RTdGFja0xpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUxpbmVJbmZvKGZpcnN0U3RhY2tMaW5lc1tpXSk7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICAgIGZpcnN0RmlsZU5hbWUgPSByZXN1bHQuZmlsZU5hbWU7XG4gICAgICAgICAgICBmaXJzdEluZGV4ID0gcmVzdWx0LmxpbmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RTdGFja0xpbmVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBwYXJzZUxpbmVJbmZvKGxhc3RTdGFja0xpbmVzW2ldKTtcbiAgICAgICAgaWYgKHJlc3VsdCkge1xuICAgICAgICAgICAgbGFzdEZpbGVOYW1lID0gcmVzdWx0LmZpbGVOYW1lO1xuICAgICAgICAgICAgbGFzdEluZGV4ID0gcmVzdWx0LmxpbmU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoZmlyc3RJbmRleCA8IDAgfHwgbGFzdEluZGV4IDwgMCB8fCAhZmlyc3RGaWxlTmFtZSB8fCAhbGFzdEZpbGVOYW1lIHx8XG4gICAgICAgIGZpcnN0RmlsZU5hbWUgIT09IGxhc3RGaWxlTmFtZSB8fCBmaXJzdEluZGV4ID49IGxhc3RJbmRleCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgc2hvdWxkSWdub3JlID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICBpZiAoYmx1ZWJpcmRGcmFtZVBhdHRlcm4udGVzdChsaW5lKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciBpbmZvID0gcGFyc2VMaW5lSW5mbyhsaW5lKTtcbiAgICAgICAgaWYgKGluZm8pIHtcbiAgICAgICAgICAgIGlmIChpbmZvLmZpbGVOYW1lID09PSBmaXJzdEZpbGVOYW1lICYmXG4gICAgICAgICAgICAgICAgKGZpcnN0SW5kZXggPD0gaW5mby5saW5lICYmIGluZm8ubGluZSA8PSBsYXN0SW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG59XG5cbmZ1bmN0aW9uIENhcHR1cmVkVHJhY2UocGFyZW50KSB7XG4gICAgdGhpcy5fcGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMuX3Byb21pc2VzQ3JlYXRlZCA9IDA7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMuX2xlbmd0aCA9IDEgKyAocGFyZW50ID09PSB1bmRlZmluZWQgPyAwIDogcGFyZW50Ll9sZW5ndGgpO1xuICAgIGNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIENhcHR1cmVkVHJhY2UpO1xuICAgIGlmIChsZW5ndGggPiAzMikgdGhpcy51bmN5Y2xlKCk7XG59XG51dGlsLmluaGVyaXRzKENhcHR1cmVkVHJhY2UsIEVycm9yKTtcbkNvbnRleHQuQ2FwdHVyZWRUcmFjZSA9IENhcHR1cmVkVHJhY2U7XG5cbkNhcHR1cmVkVHJhY2UucHJvdG90eXBlLnVuY3ljbGUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5fbGVuZ3RoO1xuICAgIGlmIChsZW5ndGggPCAyKSByZXR1cm47XG4gICAgdmFyIG5vZGVzID0gW107XG4gICAgdmFyIHN0YWNrVG9JbmRleCA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIG5vZGUgPSB0aGlzOyBub2RlICE9PSB1bmRlZmluZWQ7ICsraSkge1xuICAgICAgICBub2Rlcy5wdXNoKG5vZGUpO1xuICAgICAgICBub2RlID0gbm9kZS5fcGFyZW50O1xuICAgIH1cbiAgICBsZW5ndGggPSB0aGlzLl9sZW5ndGggPSBpO1xuICAgIGZvciAodmFyIGkgPSBsZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgc3RhY2sgPSBub2Rlc1tpXS5zdGFjaztcbiAgICAgICAgaWYgKHN0YWNrVG9JbmRleFtzdGFja10gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgc3RhY2tUb0luZGV4W3N0YWNrXSA9IGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIgY3VycmVudFN0YWNrID0gbm9kZXNbaV0uc3RhY2s7XG4gICAgICAgIHZhciBpbmRleCA9IHN0YWNrVG9JbmRleFtjdXJyZW50U3RhY2tdO1xuICAgICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBpbmRleCAhPT0gaSkge1xuICAgICAgICAgICAgaWYgKGluZGV4ID4gMCkge1xuICAgICAgICAgICAgICAgIG5vZGVzW2luZGV4IC0gMV0uX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBub2Rlc1tpbmRleCAtIDFdLl9sZW5ndGggPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbm9kZXNbaV0uX3BhcmVudCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIG5vZGVzW2ldLl9sZW5ndGggPSAxO1xuICAgICAgICAgICAgdmFyIGN5Y2xlRWRnZU5vZGUgPSBpID4gMCA/IG5vZGVzW2kgLSAxXSA6IHRoaXM7XG5cbiAgICAgICAgICAgIGlmIChpbmRleCA8IGxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9wYXJlbnQgPSBub2Rlc1tpbmRleCArIDFdO1xuICAgICAgICAgICAgICAgIGN5Y2xlRWRnZU5vZGUuX3BhcmVudC51bmN5Y2xlKCk7XG4gICAgICAgICAgICAgICAgY3ljbGVFZGdlTm9kZS5fbGVuZ3RoID1cbiAgICAgICAgICAgICAgICAgICAgY3ljbGVFZGdlTm9kZS5fcGFyZW50Ll9sZW5ndGggKyAxO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjeWNsZUVkZ2VOb2RlLl9wYXJlbnQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgY3ljbGVFZGdlTm9kZS5fbGVuZ3RoID0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBjdXJyZW50Q2hpbGRMZW5ndGggPSBjeWNsZUVkZ2VOb2RlLl9sZW5ndGggKyAxO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IGkgLSAyOyBqID49IDA7IC0taikge1xuICAgICAgICAgICAgICAgIG5vZGVzW2pdLl9sZW5ndGggPSBjdXJyZW50Q2hpbGRMZW5ndGg7XG4gICAgICAgICAgICAgICAgY3VycmVudENoaWxkTGVuZ3RoKys7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5DYXB0dXJlZFRyYWNlLnByb3RvdHlwZS5hdHRhY2hFeHRyYVRyYWNlID0gZnVuY3Rpb24oZXJyb3IpIHtcbiAgICBpZiAoZXJyb3IuX19zdGFja0NsZWFuZWRfXykgcmV0dXJuO1xuICAgIHRoaXMudW5jeWNsZSgpO1xuICAgIHZhciBwYXJzZWQgPSBwYXJzZVN0YWNrQW5kTWVzc2FnZShlcnJvcik7XG4gICAgdmFyIG1lc3NhZ2UgPSBwYXJzZWQubWVzc2FnZTtcbiAgICB2YXIgc3RhY2tzID0gW3BhcnNlZC5zdGFja107XG5cbiAgICB2YXIgdHJhY2UgPSB0aGlzO1xuICAgIHdoaWxlICh0cmFjZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN0YWNrcy5wdXNoKGNsZWFuU3RhY2sodHJhY2Uuc3RhY2suc3BsaXQoXCJcXG5cIikpKTtcbiAgICAgICAgdHJhY2UgPSB0cmFjZS5fcGFyZW50O1xuICAgIH1cbiAgICByZW1vdmVDb21tb25Sb290cyhzdGFja3MpO1xuICAgIHJlbW92ZUR1cGxpY2F0ZU9yRW1wdHlKdW1wcyhzdGFja3MpO1xuICAgIHV0aWwubm90RW51bWVyYWJsZVByb3AoZXJyb3IsIFwic3RhY2tcIiwgcmVjb25zdHJ1Y3RTdGFjayhtZXNzYWdlLCBzdGFja3MpKTtcbiAgICB1dGlsLm5vdEVudW1lcmFibGVQcm9wKGVycm9yLCBcIl9fc3RhY2tDbGVhbmVkX19cIiwgdHJ1ZSk7XG59O1xuXG52YXIgY2FwdHVyZVN0YWNrVHJhY2UgPSAoZnVuY3Rpb24gc3RhY2tEZXRlY3Rpb24oKSB7XG4gICAgdmFyIHY4c3RhY2tGcmFtZVBhdHRlcm4gPSAvXlxccyphdFxccyovO1xuICAgIHZhciB2OHN0YWNrRm9ybWF0dGVyID0gZnVuY3Rpb24oc3RhY2ssIGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIpIHJldHVybiBzdGFjaztcblxuICAgICAgICBpZiAoZXJyb3IubmFtZSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICAgICBlcnJvci5tZXNzYWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvci50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXROb25FcnJvcihlcnJvcik7XG4gICAgfTtcblxuICAgIGlmICh0eXBlb2YgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0ID09PSBcIm51bWJlclwiICYmXG4gICAgICAgIHR5cGVvZiBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCArPSA2O1xuICAgICAgICBzdGFja0ZyYW1lUGF0dGVybiA9IHY4c3RhY2tGcmFtZVBhdHRlcm47XG4gICAgICAgIGZvcm1hdFN0YWNrID0gdjhzdGFja0Zvcm1hdHRlcjtcbiAgICAgICAgdmFyIGNhcHR1cmVTdGFja1RyYWNlID0gRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2U7XG5cbiAgICAgICAgc2hvdWxkSWdub3JlID0gZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuIGJsdWViaXJkRnJhbWVQYXR0ZXJuLnRlc3QobGluZSk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihyZWNlaXZlciwgaWdub3JlVW50aWwpIHtcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCArPSA2O1xuICAgICAgICAgICAgY2FwdHVyZVN0YWNrVHJhY2UocmVjZWl2ZXIsIGlnbm9yZVVudGlsKTtcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCAtPSA2O1xuICAgICAgICB9O1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKCk7XG5cbiAgICBpZiAodHlwZW9mIGVyci5zdGFjayA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICBlcnIuc3RhY2suc3BsaXQoXCJcXG5cIilbMF0uaW5kZXhPZihcInN0YWNrRGV0ZWN0aW9uQFwiKSA+PSAwKSB7XG4gICAgICAgIHN0YWNrRnJhbWVQYXR0ZXJuID0gL0AvO1xuICAgICAgICBmb3JtYXRTdGFjayA9IHY4c3RhY2tGb3JtYXR0ZXI7XG4gICAgICAgIGluZGVudFN0YWNrRnJhbWVzID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlKG8pIHtcbiAgICAgICAgICAgIG8uc3RhY2sgPSBuZXcgRXJyb3IoKS5zdGFjaztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgaGFzU3RhY2tBZnRlclRocm93O1xuICAgIHRyeSB7IHRocm93IG5ldyBFcnJvcigpOyB9XG4gICAgY2F0Y2goZSkge1xuICAgICAgICBoYXNTdGFja0FmdGVyVGhyb3cgPSAoXCJzdGFja1wiIGluIGUpO1xuICAgIH1cbiAgICBpZiAoIShcInN0YWNrXCIgaW4gZXJyKSAmJiBoYXNTdGFja0FmdGVyVGhyb3cgJiZcbiAgICAgICAgdHlwZW9mIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBzdGFja0ZyYW1lUGF0dGVybiA9IHY4c3RhY2tGcmFtZVBhdHRlcm47XG4gICAgICAgIGZvcm1hdFN0YWNrID0gdjhzdGFja0Zvcm1hdHRlcjtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIGNhcHR1cmVTdGFja1RyYWNlKG8pIHtcbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCArPSA2O1xuICAgICAgICAgICAgdHJ5IHsgdGhyb3cgbmV3IEVycm9yKCk7IH1cbiAgICAgICAgICAgIGNhdGNoKGUpIHsgby5zdGFjayA9IGUuc3RhY2s7IH1cbiAgICAgICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCAtPSA2O1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZvcm1hdFN0YWNrID0gZnVuY3Rpb24oc3RhY2ssIGVycm9yKSB7XG4gICAgICAgIGlmICh0eXBlb2Ygc3RhY2sgPT09IFwic3RyaW5nXCIpIHJldHVybiBzdGFjaztcblxuICAgICAgICBpZiAoKHR5cGVvZiBlcnJvciA9PT0gXCJvYmplY3RcIiB8fFxuICAgICAgICAgICAgdHlwZW9mIGVycm9yID09PSBcImZ1bmN0aW9uXCIpICYmXG4gICAgICAgICAgICBlcnJvci5uYW1lICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGVycm9yLm1lc3NhZ2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIGVycm9yLnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZvcm1hdE5vbkVycm9yKGVycm9yKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIG51bGw7XG5cbn0pKFtdKTtcblxuaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiICYmIHR5cGVvZiBjb25zb2xlLndhcm4gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICBwcmludFdhcm5pbmcgPSBmdW5jdGlvbiAobWVzc2FnZSkge1xuICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgfTtcbiAgICBpZiAodXRpbC5pc05vZGUgJiYgcHJvY2Vzcy5zdGRlcnIuaXNUVFkpIHtcbiAgICAgICAgcHJpbnRXYXJuaW5nID0gZnVuY3Rpb24obWVzc2FnZSwgaXNTb2Z0KSB7XG4gICAgICAgICAgICB2YXIgY29sb3IgPSBpc1NvZnQgPyBcIlxcdTAwMWJbMzNtXCIgOiBcIlxcdTAwMWJbMzFtXCI7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oY29sb3IgKyBtZXNzYWdlICsgXCJcXHUwMDFiWzBtXFxuXCIpO1xuICAgICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIXV0aWwuaXNOb2RlICYmIHR5cGVvZiAobmV3IEVycm9yKCkuc3RhY2spID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIHByaW50V2FybmluZyA9IGZ1bmN0aW9uKG1lc3NhZ2UsIGlzU29mdCkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiJWNcIiArIG1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1NvZnQgPyBcImNvbG9yOiBkYXJrb3JhbmdlXCIgOiBcImNvbG9yOiByZWRcIik7XG4gICAgICAgIH07XG4gICAgfVxufVxuXG52YXIgY29uZmlnID0ge1xuICAgIHdhcm5pbmdzOiB3YXJuaW5ncyxcbiAgICBsb25nU3RhY2tUcmFjZXM6IGZhbHNlLFxuICAgIGNhbmNlbGxhdGlvbjogZmFsc2UsXG4gICAgbW9uaXRvcmluZzogZmFsc2Vcbn07XG5cbmlmIChsb25nU3RhY2tUcmFjZXMpIFByb21pc2UubG9uZ1N0YWNrVHJhY2VzKCk7XG5cbnJldHVybiB7XG4gICAgbG9uZ1N0YWNrVHJhY2VzOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5sb25nU3RhY2tUcmFjZXM7XG4gICAgfSxcbiAgICB3YXJuaW5nczogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiBjb25maWcud2FybmluZ3M7XG4gICAgfSxcbiAgICBjYW5jZWxsYXRpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLmNhbmNlbGxhdGlvbjtcbiAgICB9LFxuICAgIG1vbml0b3Jpbmc6IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gY29uZmlnLm1vbml0b3Jpbmc7XG4gICAgfSxcbiAgICBwcm9wYWdhdGVGcm9tRnVuY3Rpb246IGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gcHJvcGFnYXRlRnJvbUZ1bmN0aW9uO1xuICAgIH0sXG4gICAgYm91bmRWYWx1ZUZ1bmN0aW9uOiBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIGJvdW5kVmFsdWVGdW5jdGlvbjtcbiAgICB9LFxuICAgIGNoZWNrRm9yZ290dGVuUmV0dXJuczogY2hlY2tGb3Jnb3R0ZW5SZXR1cm5zLFxuICAgIHNldEJvdW5kczogc2V0Qm91bmRzLFxuICAgIHdhcm46IHdhcm4sXG4gICAgZGVwcmVjYXRlZDogZGVwcmVjYXRlZCxcbiAgICBDYXB0dXJlZFRyYWNlOiBDYXB0dXJlZFRyYWNlLFxuICAgIGZpcmVEb21FdmVudDogZmlyZURvbUV2ZW50LFxuICAgIGZpcmVHbG9iYWxFdmVudDogZmlyZUdsb2JhbEV2ZW50XG59O1xufTtcblxufSx7XCIuL2Vycm9yc1wiOjEyLFwiLi91dGlsXCI6MzZ9XSwxMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xuZnVuY3Rpb24gcmV0dXJuZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsdWU7XG59XG5mdW5jdGlvbiB0aHJvd2VyKCkge1xuICAgIHRocm93IHRoaXMucmVhc29uO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZVtcInJldHVyblwiXSA9XG5Qcm9taXNlLnByb3RvdHlwZS50aGVuUmV0dXJuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkgdmFsdWUuc3VwcHJlc3NVbmhhbmRsZWRSZWplY3Rpb25zKCk7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4oXG4gICAgICAgIHJldHVybmVyLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwge3ZhbHVlOiB2YWx1ZX0sIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZVtcInRocm93XCJdID1cblByb21pc2UucHJvdG90eXBlLnRoZW5UaHJvdyA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICByZXR1cm4gdGhpcy5fdGhlbihcbiAgICAgICAgdGhyb3dlciwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHtyZWFzb246IHJlYXNvbn0sIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5jYXRjaFRocm93ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoIDw9IDEpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICB1bmRlZmluZWQsIHRocm93ZXIsIHVuZGVmaW5lZCwge3JlYXNvbjogcmVhc29ufSwgdW5kZWZpbmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgX3JlYXNvbiA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSBmdW5jdGlvbigpIHt0aHJvdyBfcmVhc29uO307XG4gICAgICAgIHJldHVybiB0aGlzLmNhdWdodChyZWFzb24sIGhhbmRsZXIpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLmNhdGNoUmV0dXJuID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPD0gMSkge1xuICAgICAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB2YWx1ZS5zdXBwcmVzc1VuaGFuZGxlZFJlamVjdGlvbnMoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICB1bmRlZmluZWQsIHJldHVybmVyLCB1bmRlZmluZWQsIHt2YWx1ZTogdmFsdWV9LCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBfdmFsdWUgPSBhcmd1bWVudHNbMV07XG4gICAgICAgIGlmIChfdmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSBfdmFsdWUuc3VwcHJlc3NVbmhhbmRsZWRSZWplY3Rpb25zKCk7XG4gICAgICAgIHZhciBoYW5kbGVyID0gZnVuY3Rpb24oKSB7cmV0dXJuIF92YWx1ZTt9O1xuICAgICAgICByZXR1cm4gdGhpcy5jYXVnaHQodmFsdWUsIGhhbmRsZXIpO1xuICAgIH1cbn07XG59O1xuXG59LHt9XSwxMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciBQcm9taXNlUmVkdWNlID0gUHJvbWlzZS5yZWR1Y2U7XG52YXIgUHJvbWlzZUFsbCA9IFByb21pc2UuYWxsO1xuXG5mdW5jdGlvbiBwcm9taXNlQWxsVGhpcygpIHtcbiAgICByZXR1cm4gUHJvbWlzZUFsbCh0aGlzKTtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZU1hcFNlcmllcyhwcm9taXNlcywgZm4pIHtcbiAgICByZXR1cm4gUHJvbWlzZVJlZHVjZShwcm9taXNlcywgZm4sIElOVEVSTkFMLCBJTlRFUk5BTCk7XG59XG5cblByb21pc2UucHJvdG90eXBlLmVhY2ggPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gUHJvbWlzZVJlZHVjZSh0aGlzLCBmbiwgSU5URVJOQUwsIDApXG4gICAgICAgICAgICAgIC5fdGhlbihwcm9taXNlQWxsVGhpcywgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHRoaXMsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5tYXBTZXJpZXMgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICByZXR1cm4gUHJvbWlzZVJlZHVjZSh0aGlzLCBmbiwgSU5URVJOQUwsIElOVEVSTkFMKTtcbn07XG5cblByb21pc2UuZWFjaCA9IGZ1bmN0aW9uIChwcm9taXNlcywgZm4pIHtcbiAgICByZXR1cm4gUHJvbWlzZVJlZHVjZShwcm9taXNlcywgZm4sIElOVEVSTkFMLCAwKVxuICAgICAgICAgICAgICAuX3RoZW4ocHJvbWlzZUFsbFRoaXMsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBwcm9taXNlcywgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UubWFwU2VyaWVzID0gUHJvbWlzZU1hcFNlcmllcztcbn07XG5cblxufSx7fV0sMTI6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG52YXIgZXM1ID0gX2RlcmVxXyhcIi4vZXM1XCIpO1xudmFyIE9iamVjdGZyZWV6ZSA9IGVzNS5mcmVlemU7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgaW5oZXJpdHMgPSB1dGlsLmluaGVyaXRzO1xudmFyIG5vdEVudW1lcmFibGVQcm9wID0gdXRpbC5ub3RFbnVtZXJhYmxlUHJvcDtcblxuZnVuY3Rpb24gc3ViRXJyb3IobmFtZVByb3BlcnR5LCBkZWZhdWx0TWVzc2FnZSkge1xuICAgIGZ1bmN0aW9uIFN1YkVycm9yKG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFN1YkVycm9yKSkgcmV0dXJuIG5ldyBTdWJFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgbm90RW51bWVyYWJsZVByb3AodGhpcywgXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICB0eXBlb2YgbWVzc2FnZSA9PT0gXCJzdHJpbmdcIiA/IG1lc3NhZ2UgOiBkZWZhdWx0TWVzc2FnZSk7XG4gICAgICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwibmFtZVwiLCBuYW1lUHJvcGVydHkpO1xuICAgICAgICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgRXJyb3IuY2FsbCh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpbmhlcml0cyhTdWJFcnJvciwgRXJyb3IpO1xuICAgIHJldHVybiBTdWJFcnJvcjtcbn1cblxudmFyIF9UeXBlRXJyb3IsIF9SYW5nZUVycm9yO1xudmFyIFdhcm5pbmcgPSBzdWJFcnJvcihcIldhcm5pbmdcIiwgXCJ3YXJuaW5nXCIpO1xudmFyIENhbmNlbGxhdGlvbkVycm9yID0gc3ViRXJyb3IoXCJDYW5jZWxsYXRpb25FcnJvclwiLCBcImNhbmNlbGxhdGlvbiBlcnJvclwiKTtcbnZhciBUaW1lb3V0RXJyb3IgPSBzdWJFcnJvcihcIlRpbWVvdXRFcnJvclwiLCBcInRpbWVvdXQgZXJyb3JcIik7XG52YXIgQWdncmVnYXRlRXJyb3IgPSBzdWJFcnJvcihcIkFnZ3JlZ2F0ZUVycm9yXCIsIFwiYWdncmVnYXRlIGVycm9yXCIpO1xudHJ5IHtcbiAgICBfVHlwZUVycm9yID0gVHlwZUVycm9yO1xuICAgIF9SYW5nZUVycm9yID0gUmFuZ2VFcnJvcjtcbn0gY2F0Y2goZSkge1xuICAgIF9UeXBlRXJyb3IgPSBzdWJFcnJvcihcIlR5cGVFcnJvclwiLCBcInR5cGUgZXJyb3JcIik7XG4gICAgX1JhbmdlRXJyb3IgPSBzdWJFcnJvcihcIlJhbmdlRXJyb3JcIiwgXCJyYW5nZSBlcnJvclwiKTtcbn1cblxudmFyIG1ldGhvZHMgPSAoXCJqb2luIHBvcCBwdXNoIHNoaWZ0IHVuc2hpZnQgc2xpY2UgZmlsdGVyIGZvckVhY2ggc29tZSBcIiArXG4gICAgXCJldmVyeSBtYXAgaW5kZXhPZiBsYXN0SW5kZXhPZiByZWR1Y2UgcmVkdWNlUmlnaHQgc29ydCByZXZlcnNlXCIpLnNwbGl0KFwiIFwiKTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCBtZXRob2RzLmxlbmd0aDsgKytpKSB7XG4gICAgaWYgKHR5cGVvZiBBcnJheS5wcm90b3R5cGVbbWV0aG9kc1tpXV0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBBZ2dyZWdhdGVFcnJvci5wcm90b3R5cGVbbWV0aG9kc1tpXV0gPSBBcnJheS5wcm90b3R5cGVbbWV0aG9kc1tpXV07XG4gICAgfVxufVxuXG5lczUuZGVmaW5lUHJvcGVydHkoQWdncmVnYXRlRXJyb3IucHJvdG90eXBlLCBcImxlbmd0aFwiLCB7XG4gICAgdmFsdWU6IDAsXG4gICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlXG59KTtcbkFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZVtcImlzT3BlcmF0aW9uYWxcIl0gPSB0cnVlO1xudmFyIGxldmVsID0gMDtcbkFnZ3JlZ2F0ZUVycm9yLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmRlbnQgPSBBcnJheShsZXZlbCAqIDQgKyAxKS5qb2luKFwiIFwiKTtcbiAgICB2YXIgcmV0ID0gXCJcXG5cIiArIGluZGVudCArIFwiQWdncmVnYXRlRXJyb3Igb2Y6XCIgKyBcIlxcblwiO1xuICAgIGxldmVsKys7XG4gICAgaW5kZW50ID0gQXJyYXkobGV2ZWwgKiA0ICsgMSkuam9pbihcIiBcIik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBzdHIgPSB0aGlzW2ldID09PSB0aGlzID8gXCJbQ2lyY3VsYXIgQWdncmVnYXRlRXJyb3JdXCIgOiB0aGlzW2ldICsgXCJcIjtcbiAgICAgICAgdmFyIGxpbmVzID0gc3RyLnNwbGl0KFwiXFxuXCIpO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGxpbmVzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICBsaW5lc1tqXSA9IGluZGVudCArIGxpbmVzW2pdO1xuICAgICAgICB9XG4gICAgICAgIHN0ciA9IGxpbmVzLmpvaW4oXCJcXG5cIik7XG4gICAgICAgIHJldCArPSBzdHIgKyBcIlxcblwiO1xuICAgIH1cbiAgICBsZXZlbC0tO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBPcGVyYXRpb25hbEVycm9yKG1lc3NhZ2UpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT3BlcmF0aW9uYWxFcnJvcikpXG4gICAgICAgIHJldHVybiBuZXcgT3BlcmF0aW9uYWxFcnJvcihtZXNzYWdlKTtcbiAgICBub3RFbnVtZXJhYmxlUHJvcCh0aGlzLCBcIm5hbWVcIiwgXCJPcGVyYXRpb25hbEVycm9yXCIpO1xuICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwibWVzc2FnZVwiLCBtZXNzYWdlKTtcbiAgICB0aGlzLmNhdXNlID0gbWVzc2FnZTtcbiAgICB0aGlzW1wiaXNPcGVyYXRpb25hbFwiXSA9IHRydWU7XG5cbiAgICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgIG5vdEVudW1lcmFibGVQcm9wKHRoaXMsIFwibWVzc2FnZVwiLCBtZXNzYWdlLm1lc3NhZ2UpO1xuICAgICAgICBub3RFbnVtZXJhYmxlUHJvcCh0aGlzLCBcInN0YWNrXCIsIG1lc3NhZ2Uuc3RhY2spO1xuICAgIH0gZWxzZSBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIHtcbiAgICAgICAgRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UodGhpcywgdGhpcy5jb25zdHJ1Y3Rvcik7XG4gICAgfVxuXG59XG5pbmhlcml0cyhPcGVyYXRpb25hbEVycm9yLCBFcnJvcik7XG5cbnZhciBlcnJvclR5cGVzID0gRXJyb3JbXCJfX0JsdWViaXJkRXJyb3JUeXBlc19fXCJdO1xuaWYgKCFlcnJvclR5cGVzKSB7XG4gICAgZXJyb3JUeXBlcyA9IE9iamVjdGZyZWV6ZSh7XG4gICAgICAgIENhbmNlbGxhdGlvbkVycm9yOiBDYW5jZWxsYXRpb25FcnJvcixcbiAgICAgICAgVGltZW91dEVycm9yOiBUaW1lb3V0RXJyb3IsXG4gICAgICAgIE9wZXJhdGlvbmFsRXJyb3I6IE9wZXJhdGlvbmFsRXJyb3IsXG4gICAgICAgIFJlamVjdGlvbkVycm9yOiBPcGVyYXRpb25hbEVycm9yLFxuICAgICAgICBBZ2dyZWdhdGVFcnJvcjogQWdncmVnYXRlRXJyb3JcbiAgICB9KTtcbiAgICBlczUuZGVmaW5lUHJvcGVydHkoRXJyb3IsIFwiX19CbHVlYmlyZEVycm9yVHlwZXNfX1wiLCB7XG4gICAgICAgIHZhbHVlOiBlcnJvclR5cGVzLFxuICAgICAgICB3cml0YWJsZTogZmFsc2UsXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IGZhbHNlXG4gICAgfSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIEVycm9yOiBFcnJvcixcbiAgICBUeXBlRXJyb3I6IF9UeXBlRXJyb3IsXG4gICAgUmFuZ2VFcnJvcjogX1JhbmdlRXJyb3IsXG4gICAgQ2FuY2VsbGF0aW9uRXJyb3I6IGVycm9yVHlwZXMuQ2FuY2VsbGF0aW9uRXJyb3IsXG4gICAgT3BlcmF0aW9uYWxFcnJvcjogZXJyb3JUeXBlcy5PcGVyYXRpb25hbEVycm9yLFxuICAgIFRpbWVvdXRFcnJvcjogZXJyb3JUeXBlcy5UaW1lb3V0RXJyb3IsXG4gICAgQWdncmVnYXRlRXJyb3I6IGVycm9yVHlwZXMuQWdncmVnYXRlRXJyb3IsXG4gICAgV2FybmluZzogV2FybmluZ1xufTtcblxufSx7XCIuL2VzNVwiOjEzLFwiLi91dGlsXCI6MzZ9XSwxMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgaXNFUzUgPSAoZnVuY3Rpb24oKXtcbiAgICBcInVzZSBzdHJpY3RcIjtcbiAgICByZXR1cm4gdGhpcyA9PT0gdW5kZWZpbmVkO1xufSkoKTtcblxuaWYgKGlzRVM1KSB7XG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGZyZWV6ZTogT2JqZWN0LmZyZWV6ZSxcbiAgICAgICAgZGVmaW5lUHJvcGVydHk6IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSxcbiAgICAgICAgZ2V0RGVzY3JpcHRvcjogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcixcbiAgICAgICAga2V5czogT2JqZWN0LmtleXMsXG4gICAgICAgIG5hbWVzOiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyxcbiAgICAgICAgZ2V0UHJvdG90eXBlT2Y6IE9iamVjdC5nZXRQcm90b3R5cGVPZixcbiAgICAgICAgaXNBcnJheTogQXJyYXkuaXNBcnJheSxcbiAgICAgICAgaXNFUzU6IGlzRVM1LFxuICAgICAgICBwcm9wZXJ0eUlzV3JpdGFibGU6IGZ1bmN0aW9uKG9iaiwgcHJvcCkge1xuICAgICAgICAgICAgdmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgcHJvcCk7XG4gICAgICAgICAgICByZXR1cm4gISEoIWRlc2NyaXB0b3IgfHwgZGVzY3JpcHRvci53cml0YWJsZSB8fCBkZXNjcmlwdG9yLnNldCk7XG4gICAgICAgIH1cbiAgICB9O1xufSBlbHNlIHtcbiAgICB2YXIgaGFzID0ge30uaGFzT3duUHJvcGVydHk7XG4gICAgdmFyIHN0ciA9IHt9LnRvU3RyaW5nO1xuICAgIHZhciBwcm90byA9IHt9LmNvbnN0cnVjdG9yLnByb3RvdHlwZTtcblxuICAgIHZhciBPYmplY3RLZXlzID0gZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgdmFyIHJldCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbykge1xuICAgICAgICAgICAgaWYgKGhhcy5jYWxsKG8sIGtleSkpIHtcbiAgICAgICAgICAgICAgICByZXQucHVzaChrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcblxuICAgIHZhciBPYmplY3RHZXREZXNjcmlwdG9yID0gZnVuY3Rpb24obywga2V5KSB7XG4gICAgICAgIHJldHVybiB7dmFsdWU6IG9ba2V5XX07XG4gICAgfTtcblxuICAgIHZhciBPYmplY3REZWZpbmVQcm9wZXJ0eSA9IGZ1bmN0aW9uIChvLCBrZXksIGRlc2MpIHtcbiAgICAgICAgb1trZXldID0gZGVzYy52YWx1ZTtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgfTtcblxuICAgIHZhciBPYmplY3RGcmVlemUgPSBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgIHJldHVybiBvYmo7XG4gICAgfTtcblxuICAgIHZhciBPYmplY3RHZXRQcm90b3R5cGVPZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBPYmplY3Qob2JqKS5jb25zdHJ1Y3Rvci5wcm90b3R5cGU7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm90bztcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgQXJyYXlJc0FycmF5ID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ci5jYWxsKG9iaikgPT09IFwiW29iamVjdCBBcnJheV1cIjtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaChlKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuXG4gICAgbW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgICAgIGlzQXJyYXk6IEFycmF5SXNBcnJheSxcbiAgICAgICAga2V5czogT2JqZWN0S2V5cyxcbiAgICAgICAgbmFtZXM6IE9iamVjdEtleXMsXG4gICAgICAgIGRlZmluZVByb3BlcnR5OiBPYmplY3REZWZpbmVQcm9wZXJ0eSxcbiAgICAgICAgZ2V0RGVzY3JpcHRvcjogT2JqZWN0R2V0RGVzY3JpcHRvcixcbiAgICAgICAgZnJlZXplOiBPYmplY3RGcmVlemUsXG4gICAgICAgIGdldFByb3RvdHlwZU9mOiBPYmplY3RHZXRQcm90b3R5cGVPZixcbiAgICAgICAgaXNFUzU6IGlzRVM1LFxuICAgICAgICBwcm9wZXJ0eUlzV3JpdGFibGU6IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG59LHt9XSwxNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciBQcm9taXNlTWFwID0gUHJvbWlzZS5tYXA7XG5cblByb21pc2UucHJvdG90eXBlLmZpbHRlciA9IGZ1bmN0aW9uIChmbiwgb3B0aW9ucykge1xuICAgIHJldHVybiBQcm9taXNlTWFwKHRoaXMsIGZuLCBvcHRpb25zLCBJTlRFUk5BTCk7XG59O1xuXG5Qcm9taXNlLmZpbHRlciA9IGZ1bmN0aW9uIChwcm9taXNlcywgZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gUHJvbWlzZU1hcChwcm9taXNlcywgZm4sIG9wdGlvbnMsIElOVEVSTkFMKTtcbn07XG59O1xuXG59LHt9XSwxNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgdHJ5Q29udmVydFRvUHJvbWlzZSwgTkVYVF9GSUxURVIpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcbnZhciBDYW5jZWxsYXRpb25FcnJvciA9IFByb21pc2UuQ2FuY2VsbGF0aW9uRXJyb3I7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIGNhdGNoRmlsdGVyID0gX2RlcmVxXyhcIi4vY2F0Y2hfZmlsdGVyXCIpKE5FWFRfRklMVEVSKTtcblxuZnVuY3Rpb24gUGFzc1Rocm91Z2hIYW5kbGVyQ29udGV4dChwcm9taXNlLCB0eXBlLCBoYW5kbGVyKSB7XG4gICAgdGhpcy5wcm9taXNlID0gcHJvbWlzZTtcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMuaGFuZGxlciA9IGhhbmRsZXI7XG4gICAgdGhpcy5jYWxsZWQgPSBmYWxzZTtcbiAgICB0aGlzLmNhbmNlbFByb21pc2UgPSBudWxsO1xufVxuXG5QYXNzVGhyb3VnaEhhbmRsZXJDb250ZXh0LnByb3RvdHlwZS5pc0ZpbmFsbHlIYW5kbGVyID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMudHlwZSA9PT0gMDtcbn07XG5cbmZ1bmN0aW9uIEZpbmFsbHlIYW5kbGVyQ2FuY2VsUmVhY3Rpb24oZmluYWxseUhhbmRsZXIpIHtcbiAgICB0aGlzLmZpbmFsbHlIYW5kbGVyID0gZmluYWxseUhhbmRsZXI7XG59XG5cbkZpbmFsbHlIYW5kbGVyQ2FuY2VsUmVhY3Rpb24ucHJvdG90eXBlLl9yZXN1bHRDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICBjaGVja0NhbmNlbCh0aGlzLmZpbmFsbHlIYW5kbGVyKTtcbn07XG5cbmZ1bmN0aW9uIGNoZWNrQ2FuY2VsKGN0eCwgcmVhc29uKSB7XG4gICAgaWYgKGN0eC5jYW5jZWxQcm9taXNlICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgICAgICBjdHguY2FuY2VsUHJvbWlzZS5fcmVqZWN0KHJlYXNvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdHguY2FuY2VsUHJvbWlzZS5fY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICAgICAgY3R4LmNhbmNlbFByb21pc2UgPSBudWxsO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBzdWNjZWVkKCkge1xuICAgIHJldHVybiBmaW5hbGx5SGFuZGxlci5jYWxsKHRoaXMsIHRoaXMucHJvbWlzZS5fdGFyZ2V0KCkuX3NldHRsZWRWYWx1ZSgpKTtcbn1cbmZ1bmN0aW9uIGZhaWwocmVhc29uKSB7XG4gICAgaWYgKGNoZWNrQ2FuY2VsKHRoaXMsIHJlYXNvbikpIHJldHVybjtcbiAgICBlcnJvck9iai5lID0gcmVhc29uO1xuICAgIHJldHVybiBlcnJvck9iajtcbn1cbmZ1bmN0aW9uIGZpbmFsbHlIYW5kbGVyKHJlYXNvbk9yVmFsdWUpIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXMucHJvbWlzZTtcbiAgICB2YXIgaGFuZGxlciA9IHRoaXMuaGFuZGxlcjtcblxuICAgIGlmICghdGhpcy5jYWxsZWQpIHtcbiAgICAgICAgdGhpcy5jYWxsZWQgPSB0cnVlO1xuICAgICAgICB2YXIgcmV0ID0gdGhpcy5pc0ZpbmFsbHlIYW5kbGVyKClcbiAgICAgICAgICAgID8gaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVmFsdWUoKSlcbiAgICAgICAgICAgIDogaGFuZGxlci5jYWxsKHByb21pc2UuX2JvdW5kVmFsdWUoKSwgcmVhc29uT3JWYWx1ZSk7XG4gICAgICAgIGlmIChyZXQgPT09IE5FWFRfRklMVEVSKSB7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9IGVsc2UgaWYgKHJldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9zZXRSZXR1cm5lZE5vblVuZGVmaW5lZCgpO1xuICAgICAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocmV0LCBwcm9taXNlKTtcbiAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuY2FuY2VsUHJvbWlzZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UuX2lzQ2FuY2VsbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWFzb24gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBDYW5jZWxsYXRpb25FcnJvcihcImxhdGUgY2FuY2VsbGF0aW9uIG9ic2VydmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZShyZWFzb24pO1xuICAgICAgICAgICAgICAgICAgICAgICAgZXJyb3JPYmouZSA9IHJlYXNvbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcnJvck9iajtcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXliZVByb21pc2UuaXNQZW5kaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fYXR0YWNoQ2FuY2VsbGF0aW9uQ2FsbGJhY2soXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3IEZpbmFsbHlIYW5kbGVyQ2FuY2VsUmVhY3Rpb24odGhpcykpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtYXliZVByb21pc2UuX3RoZW4oXG4gICAgICAgICAgICAgICAgICAgIHN1Y2NlZWQsIGZhaWwsIHVuZGVmaW5lZCwgdGhpcywgdW5kZWZpbmVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChwcm9taXNlLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICBjaGVja0NhbmNlbCh0aGlzKTtcbiAgICAgICAgZXJyb3JPYmouZSA9IHJlYXNvbk9yVmFsdWU7XG4gICAgICAgIHJldHVybiBlcnJvck9iajtcbiAgICB9IGVsc2Uge1xuICAgICAgICBjaGVja0NhbmNlbCh0aGlzKTtcbiAgICAgICAgcmV0dXJuIHJlYXNvbk9yVmFsdWU7XG4gICAgfVxufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5fcGFzc1Rocm91Z2ggPSBmdW5jdGlvbihoYW5kbGVyLCB0eXBlLCBzdWNjZXNzLCBmYWlsKSB7XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiB0aGlzLnRoZW4oKTtcbiAgICByZXR1cm4gdGhpcy5fdGhlbihzdWNjZXNzLFxuICAgICAgICAgICAgICAgICAgICAgIGZhaWwsXG4gICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgIG5ldyBQYXNzVGhyb3VnaEhhbmRsZXJDb250ZXh0KHRoaXMsIHR5cGUsIGhhbmRsZXIpLFxuICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5sYXN0bHkgPVxuUHJvbWlzZS5wcm90b3R5cGVbXCJmaW5hbGx5XCJdID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFzc1Rocm91Z2goaGFuZGxlcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseUhhbmRsZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHlIYW5kbGVyKTtcbn07XG5cblxuUHJvbWlzZS5wcm90b3R5cGUudGFwID0gZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICByZXR1cm4gdGhpcy5fcGFzc1Rocm91Z2goaGFuZGxlciwgMSwgZmluYWxseUhhbmRsZXIpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUudGFwQ2F0Y2ggPSBmdW5jdGlvbiAoaGFuZGxlck9yUHJlZGljYXRlKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgaWYobGVuID09PSAxKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9wYXNzVGhyb3VnaChoYW5kbGVyT3JQcmVkaWNhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluYWxseUhhbmRsZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgICB2YXIgY2F0Y2hJbnN0YW5jZXMgPSBuZXcgQXJyYXkobGVuIC0gMSksXG4gICAgICAgICAgICBqID0gMCwgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbiAtIDE7ICsraSkge1xuICAgICAgICAgICAgdmFyIGl0ZW0gPSBhcmd1bWVudHNbaV07XG4gICAgICAgICAgICBpZiAodXRpbC5pc09iamVjdChpdGVtKSkge1xuICAgICAgICAgICAgICAgIGNhdGNoSW5zdGFuY2VzW2orK10gPSBpdGVtO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgXCJ0YXBDYXRjaCBzdGF0ZW1lbnQgcHJlZGljYXRlOiBcIlxuICAgICAgICAgICAgICAgICAgICArIFwiZXhwZWN0aW5nIGFuIG9iamVjdCBidXQgZ290IFwiICsgdXRpbC5jbGFzc1N0cmluZyhpdGVtKVxuICAgICAgICAgICAgICAgICkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoSW5zdGFuY2VzLmxlbmd0aCA9IGo7XG4gICAgICAgIHZhciBoYW5kbGVyID0gYXJndW1lbnRzW2ldO1xuICAgICAgICByZXR1cm4gdGhpcy5fcGFzc1Rocm91Z2goY2F0Y2hGaWx0ZXIoY2F0Y2hJbnN0YW5jZXMsIGhhbmRsZXIsIHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgMSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHlIYW5kbGVyKTtcbiAgICB9XG5cbn07XG5cbnJldHVybiBQYXNzVGhyb3VnaEhhbmRsZXJDb250ZXh0O1xufTtcblxufSx7XCIuL2NhdGNoX2ZpbHRlclwiOjcsXCIuL3V0aWxcIjozNn1dLDE2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlSZWplY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIElOVEVSTkFMLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0cnlDb252ZXJ0VG9Qcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBQcm94eWFibGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKSB7XG52YXIgZXJyb3JzID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpO1xudmFyIFR5cGVFcnJvciA9IGVycm9ycy5UeXBlRXJyb3I7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbnZhciB5aWVsZEhhbmRsZXJzID0gW107XG5cbmZ1bmN0aW9uIHByb21pc2VGcm9tWWllbGRIYW5kbGVyKHZhbHVlLCB5aWVsZEhhbmRsZXJzLCB0cmFjZVBhcmVudCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeWllbGRIYW5kbGVycy5sZW5ndGg7ICsraSkge1xuICAgICAgICB0cmFjZVBhcmVudC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHJlc3VsdCA9IHRyeUNhdGNoKHlpZWxkSGFuZGxlcnNbaV0pKHZhbHVlKTtcbiAgICAgICAgdHJhY2VQYXJlbnQuX3BvcENvbnRleHQoKTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgICAgIHRyYWNlUGFyZW50Ll9wdXNoQ29udGV4dCgpO1xuICAgICAgICAgICAgdmFyIHJldCA9IFByb21pc2UucmVqZWN0KGVycm9yT2JqLmUpO1xuICAgICAgICAgICAgdHJhY2VQYXJlbnQuX3BvcENvbnRleHQoKTtcbiAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocmVzdWx0LCB0cmFjZVBhcmVudCk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSByZXR1cm4gbWF5YmVQcm9taXNlO1xuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cblxuZnVuY3Rpb24gUHJvbWlzZVNwYXduKGdlbmVyYXRvckZ1bmN0aW9uLCByZWNlaXZlciwgeWllbGRIYW5kbGVyLCBzdGFjaykge1xuICAgIGlmIChkZWJ1Zy5jYW5jZWxsYXRpb24oKSkge1xuICAgICAgICB2YXIgaW50ZXJuYWwgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgICAgIHZhciBfZmluYWxseVByb21pc2UgPSB0aGlzLl9maW5hbGx5UHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZSA9IGludGVybmFsLmxhc3RseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiBfZmluYWxseVByb21pc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpbnRlcm5hbC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICAgICAgaW50ZXJuYWwuX3NldE9uQ2FuY2VsKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgcHJvbWlzZS5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB9XG4gICAgdGhpcy5fc3RhY2sgPSBzdGFjaztcbiAgICB0aGlzLl9nZW5lcmF0b3JGdW5jdGlvbiA9IGdlbmVyYXRvckZ1bmN0aW9uO1xuICAgIHRoaXMuX3JlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgdGhpcy5fZ2VuZXJhdG9yID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3lpZWxkSGFuZGxlcnMgPSB0eXBlb2YgeWllbGRIYW5kbGVyID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgPyBbeWllbGRIYW5kbGVyXS5jb25jYXQoeWllbGRIYW5kbGVycylcbiAgICAgICAgOiB5aWVsZEhhbmRsZXJzO1xuICAgIHRoaXMuX3lpZWxkZWRQcm9taXNlID0gbnVsbDtcbiAgICB0aGlzLl9jYW5jZWxsYXRpb25QaGFzZSA9IGZhbHNlO1xufVxudXRpbC5pbmhlcml0cyhQcm9taXNlU3Bhd24sIFByb3h5YWJsZSk7XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX2lzUmVzb2x2ZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZSA9PT0gbnVsbDtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX2NsZWFudXAgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9wcm9taXNlID0gdGhpcy5fZ2VuZXJhdG9yID0gbnVsbDtcbiAgICBpZiAoZGVidWcuY2FuY2VsbGF0aW9uKCkgJiYgdGhpcy5fZmluYWxseVByb21pc2UgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fZmluYWxseVByb21pc2UuX2Z1bGZpbGwoKTtcbiAgICAgICAgdGhpcy5fZmluYWxseVByb21pc2UgPSBudWxsO1xuICAgIH1cbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX3Byb21pc2VDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpKSByZXR1cm47XG4gICAgdmFyIGltcGxlbWVudHNSZXR1cm4gPSB0eXBlb2YgdGhpcy5fZ2VuZXJhdG9yW1wicmV0dXJuXCJdICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gICAgdmFyIHJlc3VsdDtcbiAgICBpZiAoIWltcGxlbWVudHNSZXR1cm4pIHtcbiAgICAgICAgdmFyIHJlYXNvbiA9IG5ldyBQcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yKFxuICAgICAgICAgICAgXCJnZW5lcmF0b3IgLnJldHVybigpIHNlbnRpbmVsXCIpO1xuICAgICAgICBQcm9taXNlLmNvcm91dGluZS5yZXR1cm5TZW50aW5lbCA9IHJlYXNvbjtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fYXR0YWNoRXh0cmFUcmFjZShyZWFzb24pO1xuICAgICAgICB0aGlzLl9wcm9taXNlLl9wdXNoQ29udGV4dCgpO1xuICAgICAgICByZXN1bHQgPSB0cnlDYXRjaCh0aGlzLl9nZW5lcmF0b3JbXCJ0aHJvd1wiXSkuY2FsbCh0aGlzLl9nZW5lcmF0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFzb24pO1xuICAgICAgICB0aGlzLl9wcm9taXNlLl9wb3BDb250ZXh0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgcmVzdWx0ID0gdHJ5Q2F0Y2godGhpcy5fZ2VuZXJhdG9yW1wicmV0dXJuXCJdKS5jYWxsKHRoaXMuX2dlbmVyYXRvcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQpO1xuICAgICAgICB0aGlzLl9wcm9taXNlLl9wb3BDb250ZXh0KCk7XG4gICAgfVxuICAgIHRoaXMuX2NhbmNlbGxhdGlvblBoYXNlID0gdHJ1ZTtcbiAgICB0aGlzLl95aWVsZGVkUHJvbWlzZSA9IG51bGw7XG4gICAgdGhpcy5fY29udGludWUocmVzdWx0KTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuX3lpZWxkZWRQcm9taXNlID0gbnVsbDtcbiAgICB0aGlzLl9wcm9taXNlLl9wdXNoQ29udGV4dCgpO1xuICAgIHZhciByZXN1bHQgPSB0cnlDYXRjaCh0aGlzLl9nZW5lcmF0b3IubmV4dCkuY2FsbCh0aGlzLl9nZW5lcmF0b3IsIHZhbHVlKTtcbiAgICB0aGlzLl9wcm9taXNlLl9wb3BDb250ZXh0KCk7XG4gICAgdGhpcy5fY29udGludWUocmVzdWx0KTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX3Byb21pc2VSZWplY3RlZCA9IGZ1bmN0aW9uKHJlYXNvbikge1xuICAgIHRoaXMuX3lpZWxkZWRQcm9taXNlID0gbnVsbDtcbiAgICB0aGlzLl9wcm9taXNlLl9hdHRhY2hFeHRyYVRyYWNlKHJlYXNvbik7XG4gICAgdGhpcy5fcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2godGhpcy5fZ2VuZXJhdG9yW1widGhyb3dcIl0pXG4gICAgICAgIC5jYWxsKHRoaXMuX2dlbmVyYXRvciwgcmVhc29uKTtcbiAgICB0aGlzLl9wcm9taXNlLl9wb3BDb250ZXh0KCk7XG4gICAgdGhpcy5fY29udGludWUocmVzdWx0KTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX3Jlc3VsdENhbmNlbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl95aWVsZGVkUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLl95aWVsZGVkUHJvbWlzZTtcbiAgICAgICAgdGhpcy5feWllbGRlZFByb21pc2UgPSBudWxsO1xuICAgICAgICBwcm9taXNlLmNhbmNlbCgpO1xuICAgIH1cbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUucHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX3J1biA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl9nZW5lcmF0b3IgPSB0aGlzLl9nZW5lcmF0b3JGdW5jdGlvbi5jYWxsKHRoaXMuX3JlY2VpdmVyKTtcbiAgICB0aGlzLl9yZWNlaXZlciA9XG4gICAgICAgIHRoaXMuX2dlbmVyYXRvckZ1bmN0aW9uID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3Byb21pc2VGdWxmaWxsZWQodW5kZWZpbmVkKTtcbn07XG5cblByb21pc2VTcGF3bi5wcm90b3R5cGUuX2NvbnRpbnVlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZTtcbiAgICBpZiAocmVzdWx0ID09PSBlcnJvck9iaikge1xuICAgICAgICB0aGlzLl9jbGVhbnVwKCk7XG4gICAgICAgIGlmICh0aGlzLl9jYW5jZWxsYXRpb25QaGFzZSkge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UuY2FuY2VsKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2socmVzdWx0LmUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IHJlc3VsdC52YWx1ZTtcbiAgICBpZiAocmVzdWx0LmRvbmUgPT09IHRydWUpIHtcbiAgICAgICAgdGhpcy5fY2xlYW51cCgpO1xuICAgICAgICBpZiAodGhpcy5fY2FuY2VsbGF0aW9uUGhhc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlLmNhbmNlbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHByb21pc2UuX3Jlc29sdmVDYWxsYmFjayh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZSh2YWx1ZSwgdGhpcy5fcHJvbWlzZSk7XG4gICAgICAgIGlmICghKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPVxuICAgICAgICAgICAgICAgIHByb21pc2VGcm9tWWllbGRIYW5kbGVyKG1heWJlUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl95aWVsZEhhbmRsZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb21pc2UpO1xuICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Byb21pc2VSZWplY3RlZChcbiAgICAgICAgICAgICAgICAgICAgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiQSB2YWx1ZSAlcyB3YXMgeWllbGRlZCB0aGF0IGNvdWxkIG5vdCBiZSB0cmVhdGVkIGFzIGEgcHJvbWlzZVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcdTAwMGFcXHUwMDBhXCIucmVwbGFjZShcIiVzXCIsIFN0cmluZyh2YWx1ZSkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiRnJvbSBjb3JvdXRpbmU6XFx1MDAwYVwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YWNrLnNwbGl0KFwiXFxuXCIpLnNsaWNlKDEsIC03KS5qb2luKFwiXFxuXCIpXG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICB2YXIgYml0RmllbGQgPSBtYXliZVByb21pc2UuX2JpdEZpZWxkO1xuICAgICAgICA7XG4gICAgICAgIGlmICgoKGJpdEZpZWxkICYgNTAzOTcxODQpID09PSAwKSkge1xuICAgICAgICAgICAgdGhpcy5feWllbGRlZFByb21pc2UgPSBtYXliZVByb21pc2U7XG4gICAgICAgICAgICBtYXliZVByb21pc2UuX3Byb3h5KHRoaXMsIG51bGwpO1xuICAgICAgICB9IGVsc2UgaWYgKCgoYml0RmllbGQgJiAzMzU1NDQzMikgIT09IDApKSB7XG4gICAgICAgICAgICBQcm9taXNlLl9hc3luYy5pbnZva2UoXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbWlzZUZ1bGZpbGxlZCwgdGhpcywgbWF5YmVQcm9taXNlLl92YWx1ZSgpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKCgoYml0RmllbGQgJiAxNjc3NzIxNikgIT09IDApKSB7XG4gICAgICAgICAgICBQcm9taXNlLl9hc3luYy5pbnZva2UoXG4gICAgICAgICAgICAgICAgdGhpcy5fcHJvbWlzZVJlamVjdGVkLCB0aGlzLCBtYXliZVByb21pc2UuX3JlYXNvbigpXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcHJvbWlzZUNhbmNlbGxlZCgpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUHJvbWlzZS5jb3JvdXRpbmUgPSBmdW5jdGlvbiAoZ2VuZXJhdG9yRnVuY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGdlbmVyYXRvckZ1bmN0aW9uICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImdlbmVyYXRvckZ1bmN0aW9uIG11c3QgYmUgYSBmdW5jdGlvblxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcdTAwMGFcIik7XG4gICAgfVxuICAgIHZhciB5aWVsZEhhbmRsZXIgPSBPYmplY3Qob3B0aW9ucykueWllbGRIYW5kbGVyO1xuICAgIHZhciBQcm9taXNlU3Bhd24kID0gUHJvbWlzZVNwYXduO1xuICAgIHZhciBzdGFjayA9IG5ldyBFcnJvcigpLnN0YWNrO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBnZW5lcmF0b3IgPSBnZW5lcmF0b3JGdW5jdGlvbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICB2YXIgc3Bhd24gPSBuZXcgUHJvbWlzZVNwYXduJCh1bmRlZmluZWQsIHVuZGVmaW5lZCwgeWllbGRIYW5kbGVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFjayk7XG4gICAgICAgIHZhciByZXQgPSBzcGF3bi5wcm9taXNlKCk7XG4gICAgICAgIHNwYXduLl9nZW5lcmF0b3IgPSBnZW5lcmF0b3I7XG4gICAgICAgIHNwYXduLl9wcm9taXNlRnVsZmlsbGVkKHVuZGVmaW5lZCk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcbn07XG5cblByb21pc2UuY29yb3V0aW5lLmFkZFlpZWxkSGFuZGxlciA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJleHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiICsgdXRpbC5jbGFzc1N0cmluZyhmbikpO1xuICAgIH1cbiAgICB5aWVsZEhhbmRsZXJzLnB1c2goZm4pO1xufTtcblxuUHJvbWlzZS5zcGF3biA9IGZ1bmN0aW9uIChnZW5lcmF0b3JGdW5jdGlvbikge1xuICAgIGRlYnVnLmRlcHJlY2F0ZWQoXCJQcm9taXNlLnNwYXduKClcIiwgXCJQcm9taXNlLmNvcm91dGluZSgpXCIpO1xuICAgIGlmICh0eXBlb2YgZ2VuZXJhdG9yRnVuY3Rpb24gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZ2VuZXJhdG9yRnVuY3Rpb24gbXVzdCBiZSBhIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgdmFyIHNwYXduID0gbmV3IFByb21pc2VTcGF3bihnZW5lcmF0b3JGdW5jdGlvbiwgdGhpcyk7XG4gICAgdmFyIHJldCA9IHNwYXduLnByb21pc2UoKTtcbiAgICBzcGF3bi5fcnVuKFByb21pc2Uuc3Bhd24pO1xuICAgIHJldHVybiByZXQ7XG59O1xufTtcblxufSx7XCIuL2Vycm9yc1wiOjEyLFwiLi91dGlsXCI6MzZ9XSwxNzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID1cbmZ1bmN0aW9uKFByb21pc2UsIFByb21pc2VBcnJheSwgdHJ5Q29udmVydFRvUHJvbWlzZSwgSU5URVJOQUwsIGFzeW5jLFxuICAgICAgICAgZ2V0RG9tYWluKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgY2FuRXZhbHVhdGUgPSB1dGlsLmNhbkV2YWx1YXRlO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbnZhciBlcnJvck9iaiA9IHV0aWwuZXJyb3JPYmo7XG52YXIgcmVqZWN0O1xuXG5pZiAoIXRydWUpIHtcbmlmIChjYW5FdmFsdWF0ZSkge1xuICAgIHZhciB0aGVuQ2FsbGJhY2sgPSBmdW5jdGlvbihpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJ2YWx1ZVwiLCBcImhvbGRlclwiLCBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGhvbGRlci5wSW5kZXggPSB2YWx1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGhvbGRlci5jaGVja0Z1bGZpbGxtZW50KHRoaXMpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIFwiLnJlcGxhY2UoL0luZGV4L2csIGkpKTtcbiAgICB9O1xuXG4gICAgdmFyIHByb21pc2VTZXR0ZXIgPSBmdW5jdGlvbihpKSB7XG4gICAgICAgIHJldHVybiBuZXcgRnVuY3Rpb24oXCJwcm9taXNlXCIsIFwiaG9sZGVyXCIsIFwiICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGhvbGRlci5wSW5kZXggPSBwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIFwiLnJlcGxhY2UoL0luZGV4L2csIGkpKTtcbiAgICB9O1xuXG4gICAgdmFyIGdlbmVyYXRlSG9sZGVyQ2xhc3MgPSBmdW5jdGlvbih0b3RhbCkge1xuICAgICAgICB2YXIgcHJvcHMgPSBuZXcgQXJyYXkodG90YWwpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBwcm9wc1tpXSA9IFwidGhpcy5wXCIgKyAoaSsxKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXNzaWdubWVudCA9IHByb3BzLmpvaW4oXCIgPSBcIikgKyBcIiA9IG51bGw7XCI7XG4gICAgICAgIHZhciBjYW5jZWxsYXRpb25Db2RlPSBcInZhciBwcm9taXNlO1xcblwiICsgcHJvcHMubWFwKGZ1bmN0aW9uKHByb3ApIHtcbiAgICAgICAgICAgIHJldHVybiBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAgICAgcHJvbWlzZSA9IFwiICsgcHJvcCArIFwiOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBpZiAocHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5jYW5jZWwoKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIFwiO1xuICAgICAgICB9KS5qb2luKFwiXFxuXCIpO1xuICAgICAgICB2YXIgcGFzc2VkQXJndW1lbnRzID0gcHJvcHMuam9pbihcIiwgXCIpO1xuICAgICAgICB2YXIgbmFtZSA9IFwiSG9sZGVyJFwiICsgdG90YWw7XG5cblxuICAgICAgICB2YXIgY29kZSA9IFwicmV0dXJuIGZ1bmN0aW9uKHRyeUNhdGNoLCBlcnJvck9iaiwgUHJvbWlzZSwgYXN5bmMpIHsgICAgXFxuXFxcbiAgICAgICAgICAgICd1c2Ugc3RyaWN0JzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGZ1bmN0aW9uIFtUaGVOYW1lXShmbikgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBbVGhlUHJvcGVydGllc10gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB0aGlzLmZuID0gZm47ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB0aGlzLmFzeW5jTmVlZGVkID0gdHJ1ZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB0aGlzLm5vdyA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIFtUaGVOYW1lXS5wcm90b3R5cGUuX2NhbGxGdW5jdGlvbiA9IGZ1bmN0aW9uKHByb21pc2UpIHsgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9wdXNoQ29udGV4dCgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gdHJ5Q2F0Y2godGhpcy5mbikoW1RoZVBhc3NlZEFyZ3VtZW50c10pOyAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9wb3BDb250ZXh0KCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBpZiAocmV0ID09PSBlcnJvck9iaikgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2socmV0LmUsIGZhbHNlKTsgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHJldCk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIFtUaGVOYW1lXS5wcm90b3R5cGUuY2hlY2tGdWxmaWxsbWVudCA9IGZ1bmN0aW9uKHByb21pc2UpIHsgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB2YXIgbm93ID0gKyt0aGlzLm5vdzsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBpZiAobm93ID09PSBbVGhlVG90YWxdKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuYXN5bmNOZWVkZWQpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFzeW5jLmludm9rZSh0aGlzLl9jYWxsRnVuY3Rpb24sIHRoaXMsIHByb21pc2UpOyAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NhbGxGdW5jdGlvbihwcm9taXNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIFtUaGVOYW1lXS5wcm90b3R5cGUuX3Jlc3VsdENhbmNlbGxlZCA9IGZ1bmN0aW9uKCkgeyAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBbQ2FuY2VsbGF0aW9uQ29kZV0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHJldHVybiBbVGhlTmFtZV07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgfSh0cnlDYXRjaCwgZXJyb3JPYmosIFByb21pc2UsIGFzeW5jKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgXCI7XG5cbiAgICAgICAgY29kZSA9IGNvZGUucmVwbGFjZSgvXFxbVGhlTmFtZVxcXS9nLCBuYW1lKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcW1RoZVRvdGFsXFxdL2csIHRvdGFsKVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcW1RoZVBhc3NlZEFyZ3VtZW50c1xcXS9nLCBwYXNzZWRBcmd1bWVudHMpXG4gICAgICAgICAgICAucmVwbGFjZSgvXFxbVGhlUHJvcGVydGllc1xcXS9nLCBhc3NpZ25tZW50KVxuICAgICAgICAgICAgLnJlcGxhY2UoL1xcW0NhbmNlbGxhdGlvbkNvZGVcXF0vZywgY2FuY2VsbGF0aW9uQ29kZSk7XG5cbiAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihcInRyeUNhdGNoXCIsIFwiZXJyb3JPYmpcIiwgXCJQcm9taXNlXCIsIFwiYXN5bmNcIiwgY29kZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICh0cnlDYXRjaCwgZXJyb3JPYmosIFByb21pc2UsIGFzeW5jKTtcbiAgICB9O1xuXG4gICAgdmFyIGhvbGRlckNsYXNzZXMgPSBbXTtcbiAgICB2YXIgdGhlbkNhbGxiYWNrcyA9IFtdO1xuICAgIHZhciBwcm9taXNlU2V0dGVycyA9IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgaG9sZGVyQ2xhc3Nlcy5wdXNoKGdlbmVyYXRlSG9sZGVyQ2xhc3MoaSArIDEpKTtcbiAgICAgICAgdGhlbkNhbGxiYWNrcy5wdXNoKHRoZW5DYWxsYmFjayhpICsgMSkpO1xuICAgICAgICBwcm9taXNlU2V0dGVycy5wdXNoKHByb21pc2VTZXR0ZXIoaSArIDEpKTtcbiAgICB9XG5cbiAgICByZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHRoaXMuX3JlamVjdChyZWFzb24pO1xuICAgIH07XG59fVxuXG5Qcm9taXNlLmpvaW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdmFyIGxhc3QgPSBhcmd1bWVudHMubGVuZ3RoIC0gMTtcbiAgICB2YXIgZm47XG4gICAgaWYgKGxhc3QgPiAwICYmIHR5cGVvZiBhcmd1bWVudHNbbGFzdF0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBmbiA9IGFyZ3VtZW50c1tsYXN0XTtcbiAgICAgICAgaWYgKCF0cnVlKSB7XG4gICAgICAgICAgICBpZiAobGFzdCA8PSA4ICYmIGNhbkV2YWx1YXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgICAgICAgICByZXQuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgICAgICAgICAgICAgdmFyIEhvbGRlckNsYXNzID0gaG9sZGVyQ2xhc3Nlc1tsYXN0IC0gMV07XG4gICAgICAgICAgICAgICAgdmFyIGhvbGRlciA9IG5ldyBIb2xkZXJDbGFzcyhmbik7XG4gICAgICAgICAgICAgICAgdmFyIGNhbGxiYWNrcyA9IHRoZW5DYWxsYmFja3M7XG5cbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3Q7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShhcmd1bWVudHNbaV0sIHJldCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJpdEZpZWxkID0gbWF5YmVQcm9taXNlLl9iaXRGaWVsZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoKGJpdEZpZWxkICYgNTAzOTcxODQpID09PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fdGhlbihjYWxsYmFja3NbaV0sIHJlamVjdCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdW5kZWZpbmVkLCByZXQsIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvbWlzZVNldHRlcnNbaV0obWF5YmVQcm9taXNlLCBob2xkZXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhvbGRlci5hc3luY05lZWRlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgoKGJpdEZpZWxkICYgMzM1NTQ0MzIpICE9PSAwKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrc1tpXS5jYWxsKHJldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXliZVByb21pc2UuX3ZhbHVlKCksIGhvbGRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCgoYml0RmllbGQgJiAxNjc3NzIxNikgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0Ll9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldC5fY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFja3NbaV0uY2FsbChyZXQsIG1heWJlUHJvbWlzZSwgaG9sZGVyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGlmICghcmV0Ll9pc0ZhdGVTZWFsZWQoKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaG9sZGVyLmFzeW5jTmVlZGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZG9tYWluID0gZ2V0RG9tYWluKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZG9tYWluICE9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaG9sZGVyLmZuID0gdXRpbC5kb21haW5CaW5kKGRvbWFpbiwgaG9sZGVyLmZuKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZXQuX3NldEFzeW5jR3VhcmFudGVlZCgpO1xuICAgICAgICAgICAgICAgICAgICByZXQuX3NldE9uQ2FuY2VsKGhvbGRlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIGFyZ3MgPSBbXS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7O1xuICAgIGlmIChmbikgYXJncy5wb3AoKTtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2VBcnJheShhcmdzKS5wcm9taXNlKCk7XG4gICAgcmV0dXJuIGZuICE9PSB1bmRlZmluZWQgPyByZXQuc3ByZWFkKGZuKSA6IHJldDtcbn07XG5cbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwxODpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvbWlzZUFycmF5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBhcGlSZWplY3Rpb24sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRyeUNvbnZlcnRUb1Byb21pc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIElOVEVSTkFMLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBkZWJ1Zykge1xudmFyIGdldERvbWFpbiA9IFByb21pc2UuX2dldERvbWFpbjtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIGFzeW5jID0gUHJvbWlzZS5fYXN5bmM7XG5cbmZ1bmN0aW9uIE1hcHBpbmdQcm9taXNlQXJyYXkocHJvbWlzZXMsIGZuLCBsaW1pdCwgX2ZpbHRlcikge1xuICAgIHRoaXMuY29uc3RydWN0b3IkKHByb21pc2VzKTtcbiAgICB0aGlzLl9wcm9taXNlLl9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgIHZhciBkb21haW4gPSBnZXREb21haW4oKTtcbiAgICB0aGlzLl9jYWxsYmFjayA9IGRvbWFpbiA9PT0gbnVsbCA/IGZuIDogdXRpbC5kb21haW5CaW5kKGRvbWFpbiwgZm4pO1xuICAgIHRoaXMuX3ByZXNlcnZlZFZhbHVlcyA9IF9maWx0ZXIgPT09IElOVEVSTkFMXG4gICAgICAgID8gbmV3IEFycmF5KHRoaXMubGVuZ3RoKCkpXG4gICAgICAgIDogbnVsbDtcbiAgICB0aGlzLl9saW1pdCA9IGxpbWl0O1xuICAgIHRoaXMuX2luRmxpZ2h0ID0gMDtcbiAgICB0aGlzLl9xdWV1ZSA9IFtdO1xuICAgIGFzeW5jLmludm9rZSh0aGlzLl9hc3luY0luaXQsIHRoaXMsIHVuZGVmaW5lZCk7XG59XG51dGlsLmluaGVyaXRzKE1hcHBpbmdQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLl9hc3luY0luaXQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9pbml0JCh1bmRlZmluZWQsIC0yKTtcbn07XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKCkge307XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLl92YWx1ZXM7XG4gICAgdmFyIGxlbmd0aCA9IHRoaXMubGVuZ3RoKCk7XG4gICAgdmFyIHByZXNlcnZlZFZhbHVlcyA9IHRoaXMuX3ByZXNlcnZlZFZhbHVlcztcbiAgICB2YXIgbGltaXQgPSB0aGlzLl9saW1pdDtcblxuICAgIGlmIChpbmRleCA8IDApIHtcbiAgICAgICAgaW5kZXggPSAoaW5kZXggKiAtMSkgLSAxO1xuICAgICAgICB2YWx1ZXNbaW5kZXhdID0gdmFsdWU7XG4gICAgICAgIGlmIChsaW1pdCA+PSAxKSB7XG4gICAgICAgICAgICB0aGlzLl9pbkZsaWdodC0tO1xuICAgICAgICAgICAgdGhpcy5fZHJhaW5RdWV1ZSgpO1xuICAgICAgICAgICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAobGltaXQgPj0gMSAmJiB0aGlzLl9pbkZsaWdodCA+PSBsaW1pdCkge1xuICAgICAgICAgICAgdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgICAgICAgICAgdGhpcy5fcXVldWUucHVzaChpbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByZXNlcnZlZFZhbHVlcyAhPT0gbnVsbCkgcHJlc2VydmVkVmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZTtcbiAgICAgICAgdmFyIGNhbGxiYWNrID0gdGhpcy5fY2FsbGJhY2s7XG4gICAgICAgIHZhciByZWNlaXZlciA9IHByb21pc2UuX2JvdW5kVmFsdWUoKTtcbiAgICAgICAgcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHJldCA9IHRyeUNhdGNoKGNhbGxiYWNrKS5jYWxsKHJlY2VpdmVyLCB2YWx1ZSwgaW5kZXgsIGxlbmd0aCk7XG4gICAgICAgIHZhciBwcm9taXNlQ3JlYXRlZCA9IHByb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICAgICAgZGVidWcuY2hlY2tGb3Jnb3R0ZW5SZXR1cm5zKFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgcHJvbWlzZUNyZWF0ZWQsXG4gICAgICAgICAgICBwcmVzZXJ2ZWRWYWx1ZXMgIT09IG51bGwgPyBcIlByb21pc2UuZmlsdGVyXCIgOiBcIlByb21pc2UubWFwXCIsXG4gICAgICAgICAgICBwcm9taXNlXG4gICAgICAgICk7XG4gICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWplY3QocmV0LmUpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShyZXQsIHRoaXMuX3Byb21pc2UpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gbWF5YmVQcm9taXNlLl90YXJnZXQoKTtcbiAgICAgICAgICAgIHZhciBiaXRGaWVsZCA9IG1heWJlUHJvbWlzZS5fYml0RmllbGQ7XG4gICAgICAgICAgICA7XG4gICAgICAgICAgICBpZiAoKChiaXRGaWVsZCAmIDUwMzk3MTg0KSA9PT0gMCkpIHtcbiAgICAgICAgICAgICAgICBpZiAobGltaXQgPj0gMSkgdGhpcy5faW5GbGlnaHQrKztcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaW5kZXhdID0gbWF5YmVQcm9taXNlO1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fcHJveHkodGhpcywgKGluZGV4ICsgMSkgKiAtMSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIGlmICgoKGJpdEZpZWxkICYgMzM1NTQ0MzIpICE9PSAwKSkge1xuICAgICAgICAgICAgICAgIHJldCA9IG1heWJlUHJvbWlzZS5fdmFsdWUoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKChiaXRGaWVsZCAmIDE2Nzc3MjE2KSAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWplY3QobWF5YmVQcm9taXNlLl9yZWFzb24oKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhbmNlbCgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHZhbHVlc1tpbmRleF0gPSByZXQ7XG4gICAgfVxuICAgIHZhciB0b3RhbFJlc29sdmVkID0gKyt0aGlzLl90b3RhbFJlc29sdmVkO1xuICAgIGlmICh0b3RhbFJlc29sdmVkID49IGxlbmd0aCkge1xuICAgICAgICBpZiAocHJlc2VydmVkVmFsdWVzICE9PSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLl9maWx0ZXIodmFsdWVzLCBwcmVzZXJ2ZWRWYWx1ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVzb2x2ZSh2YWx1ZXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5NYXBwaW5nUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fZHJhaW5RdWV1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcXVldWUgPSB0aGlzLl9xdWV1ZTtcbiAgICB2YXIgbGltaXQgPSB0aGlzLl9saW1pdDtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5fdmFsdWVzO1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwICYmIHRoaXMuX2luRmxpZ2h0IDwgbGltaXQpIHtcbiAgICAgICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkgcmV0dXJuO1xuICAgICAgICB2YXIgaW5kZXggPSBxdWV1ZS5wb3AoKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZUZ1bGZpbGxlZCh2YWx1ZXNbaW5kZXhdLCBpbmRleCk7XG4gICAgfVxufTtcblxuTWFwcGluZ1Byb21pc2VBcnJheS5wcm90b3R5cGUuX2ZpbHRlciA9IGZ1bmN0aW9uIChib29sZWFucywgdmFsdWVzKSB7XG4gICAgdmFyIGxlbiA9IHZhbHVlcy5sZW5ndGg7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShsZW4pO1xuICAgIHZhciBqID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgIGlmIChib29sZWFuc1tpXSkgcmV0W2orK10gPSB2YWx1ZXNbaV07XG4gICAgfVxuICAgIHJldC5sZW5ndGggPSBqO1xuICAgIHRoaXMuX3Jlc29sdmUocmV0KTtcbn07XG5cbk1hcHBpbmdQcm9taXNlQXJyYXkucHJvdG90eXBlLnByZXNlcnZlZFZhbHVlcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJlc2VydmVkVmFsdWVzO1xufTtcblxuZnVuY3Rpb24gbWFwKHByb21pc2VzLCBmbiwgb3B0aW9ucywgX2ZpbHRlcikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIiArIHV0aWwuY2xhc3NTdHJpbmcoZm4pKTtcbiAgICB9XG5cbiAgICB2YXIgbGltaXQgPSAwO1xuICAgIGlmIChvcHRpb25zICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5jb25jdXJyZW5jeSAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChcbiAgICAgICAgICAgICAgICAgICAgbmV3IFR5cGVFcnJvcihcIidjb25jdXJyZW5jeScgbXVzdCBiZSBhIG51bWJlciBidXQgaXQgaXMgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXRpbC5jbGFzc1N0cmluZyhvcHRpb25zLmNvbmN1cnJlbmN5KSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGltaXQgPSBvcHRpb25zLmNvbmN1cnJlbmN5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcHRpb25zIGFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0IGJ1dCBpdCBpcyBcIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY2xhc3NTdHJpbmcob3B0aW9ucykpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBsaW1pdCA9IHR5cGVvZiBsaW1pdCA9PT0gXCJudW1iZXJcIiAmJlxuICAgICAgICBpc0Zpbml0ZShsaW1pdCkgJiYgbGltaXQgPj0gMSA/IGxpbWl0IDogMDtcbiAgICByZXR1cm4gbmV3IE1hcHBpbmdQcm9taXNlQXJyYXkocHJvbWlzZXMsIGZuLCBsaW1pdCwgX2ZpbHRlcikucHJvbWlzZSgpO1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gbWFwKHRoaXMsIGZuLCBvcHRpb25zLCBudWxsKTtcbn07XG5cblByb21pc2UubWFwID0gZnVuY3Rpb24gKHByb21pc2VzLCBmbiwgb3B0aW9ucywgX2ZpbHRlcikge1xuICAgIHJldHVybiBtYXAocHJvbWlzZXMsIGZuLCBvcHRpb25zLCBfZmlsdGVyKTtcbn07XG5cblxufTtcblxufSx7XCIuL3V0aWxcIjozNn1dLDE5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPVxuZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbiwgZGVidWcpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcbnZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG5cblByb21pc2UubWV0aG9kID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRocm93IG5ldyBQcm9taXNlLlR5cGVFcnJvcihcImV4cGVjdGluZyBhIGZ1bmN0aW9uIGJ1dCBnb3QgXCIgKyB1dGlsLmNsYXNzU3RyaW5nKGZuKSk7XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciByZXQgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICAgICAgcmV0Ll9wdXNoQ29udGV4dCgpO1xuICAgICAgICB2YXIgdmFsdWUgPSB0cnlDYXRjaChmbikuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgdmFyIHByb21pc2VDcmVhdGVkID0gcmV0Ll9wb3BDb250ZXh0KCk7XG4gICAgICAgIGRlYnVnLmNoZWNrRm9yZ290dGVuUmV0dXJucyhcbiAgICAgICAgICAgIHZhbHVlLCBwcm9taXNlQ3JlYXRlZCwgXCJQcm9taXNlLm1ldGhvZFwiLCByZXQpO1xuICAgICAgICByZXQuX3Jlc29sdmVGcm9tU3luY1ZhbHVlKHZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufTtcblxuUHJvbWlzZS5hdHRlbXB0ID0gUHJvbWlzZVtcInRyeVwiXSA9IGZ1bmN0aW9uIChmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIiArIHV0aWwuY2xhc3NTdHJpbmcoZm4pKTtcbiAgICB9XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXQuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgcmV0Ll9wdXNoQ29udGV4dCgpO1xuICAgIHZhciB2YWx1ZTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZGVidWcuZGVwcmVjYXRlZChcImNhbGxpbmcgUHJvbWlzZS50cnkgd2l0aCBtb3JlIHRoYW4gMSBhcmd1bWVudFwiKTtcbiAgICAgICAgdmFyIGFyZyA9IGFyZ3VtZW50c1sxXTtcbiAgICAgICAgdmFyIGN0eCA9IGFyZ3VtZW50c1syXTtcbiAgICAgICAgdmFsdWUgPSB1dGlsLmlzQXJyYXkoYXJnKSA/IHRyeUNhdGNoKGZuKS5hcHBseShjdHgsIGFyZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRyeUNhdGNoKGZuKS5jYWxsKGN0eCwgYXJnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IHRyeUNhdGNoKGZuKSgpO1xuICAgIH1cbiAgICB2YXIgcHJvbWlzZUNyZWF0ZWQgPSByZXQuX3BvcENvbnRleHQoKTtcbiAgICBkZWJ1Zy5jaGVja0ZvcmdvdHRlblJldHVybnMoXG4gICAgICAgIHZhbHVlLCBwcm9taXNlQ3JlYXRlZCwgXCJQcm9taXNlLnRyeVwiLCByZXQpO1xuICAgIHJldC5fcmVzb2x2ZUZyb21TeW5jVmFsdWUodmFsdWUpO1xuICAgIHJldHVybiByZXQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fcmVzb2x2ZUZyb21TeW5jVmFsdWUgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgPT09IHV0aWwuZXJyb3JPYmopIHtcbiAgICAgICAgdGhpcy5fcmVqZWN0Q2FsbGJhY2sodmFsdWUuZSwgZmFsc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX3Jlc29sdmVDYWxsYmFjayh2YWx1ZSwgdHJ1ZSk7XG4gICAgfVxufTtcbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwyMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcbnZhciBtYXliZVdyYXBBc0Vycm9yID0gdXRpbC5tYXliZVdyYXBBc0Vycm9yO1xudmFyIGVycm9ycyA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKTtcbnZhciBPcGVyYXRpb25hbEVycm9yID0gZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3I7XG52YXIgZXM1ID0gX2RlcmVxXyhcIi4vZXM1XCIpO1xuXG5mdW5jdGlvbiBpc1VudHlwZWRFcnJvcihvYmopIHtcbiAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRXJyb3IgJiZcbiAgICAgICAgZXM1LmdldFByb3RvdHlwZU9mKG9iaikgPT09IEVycm9yLnByb3RvdHlwZTtcbn1cblxudmFyIHJFcnJvcktleSA9IC9eKD86bmFtZXxtZXNzYWdlfHN0YWNrfGNhdXNlKSQvO1xuZnVuY3Rpb24gd3JhcEFzT3BlcmF0aW9uYWxFcnJvcihvYmopIHtcbiAgICB2YXIgcmV0O1xuICAgIGlmIChpc1VudHlwZWRFcnJvcihvYmopKSB7XG4gICAgICAgIHJldCA9IG5ldyBPcGVyYXRpb25hbEVycm9yKG9iaik7XG4gICAgICAgIHJldC5uYW1lID0gb2JqLm5hbWU7XG4gICAgICAgIHJldC5tZXNzYWdlID0gb2JqLm1lc3NhZ2U7XG4gICAgICAgIHJldC5zdGFjayA9IG9iai5zdGFjaztcbiAgICAgICAgdmFyIGtleXMgPSBlczUua2V5cyhvYmopO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgaWYgKCFyRXJyb3JLZXkudGVzdChrZXkpKSB7XG4gICAgICAgICAgICAgICAgcmV0W2tleV0gPSBvYmpba2V5XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cbiAgICB1dGlsLm1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihvYmopO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlLCBtdWx0aUFyZ3MpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oZXJyLCB2YWx1ZSkge1xuICAgICAgICBpZiAocHJvbWlzZSA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICB2YXIgd3JhcHBlZCA9IHdyYXBBc09wZXJhdGlvbmFsRXJyb3IobWF5YmVXcmFwQXNFcnJvcihlcnIpKTtcbiAgICAgICAgICAgIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2Uod3JhcHBlZCk7XG4gICAgICAgICAgICBwcm9taXNlLl9yZWplY3Qod3JhcHBlZCk7XG4gICAgICAgIH0gZWxzZSBpZiAoIW11bHRpQXJncykge1xuICAgICAgICAgICAgcHJvbWlzZS5fZnVsZmlsbCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKTs7XG4gICAgICAgICAgICBwcm9taXNlLl9mdWxmaWxsKGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9kZWJhY2tGb3JQcm9taXNlO1xuXG59LHtcIi4vZXJyb3JzXCI6MTIsXCIuL2VzNVwiOjEzLFwiLi91dGlsXCI6MzZ9XSwyMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSkge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsXCIpO1xudmFyIGFzeW5jID0gUHJvbWlzZS5fYXN5bmM7XG52YXIgdHJ5Q2F0Y2ggPSB1dGlsLnRyeUNhdGNoO1xudmFyIGVycm9yT2JqID0gdXRpbC5lcnJvck9iajtcblxuZnVuY3Rpb24gc3ByZWFkQWRhcHRlcih2YWwsIG5vZGViYWNrKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIGlmICghdXRpbC5pc0FycmF5KHZhbCkpIHJldHVybiBzdWNjZXNzQWRhcHRlci5jYWxsKHByb21pc2UsIHZhbCwgbm9kZWJhY2spO1xuICAgIHZhciByZXQgPVxuICAgICAgICB0cnlDYXRjaChub2RlYmFjaykuYXBwbHkocHJvbWlzZS5fYm91bmRWYWx1ZSgpLCBbbnVsbF0uY29uY2F0KHZhbCkpO1xuICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIGFzeW5jLnRocm93TGF0ZXIocmV0LmUpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gc3VjY2Vzc0FkYXB0ZXIodmFsLCBub2RlYmFjaykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcztcbiAgICB2YXIgcmVjZWl2ZXIgPSBwcm9taXNlLl9ib3VuZFZhbHVlKCk7XG4gICAgdmFyIHJldCA9IHZhbCA9PT0gdW5kZWZpbmVkXG4gICAgICAgID8gdHJ5Q2F0Y2gobm9kZWJhY2spLmNhbGwocmVjZWl2ZXIsIG51bGwpXG4gICAgICAgIDogdHJ5Q2F0Y2gobm9kZWJhY2spLmNhbGwocmVjZWl2ZXIsIG51bGwsIHZhbCk7XG4gICAgaWYgKHJldCA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgYXN5bmMudGhyb3dMYXRlcihyZXQuZSk7XG4gICAgfVxufVxuZnVuY3Rpb24gZXJyb3JBZGFwdGVyKHJlYXNvbiwgbm9kZWJhY2spIHtcbiAgICB2YXIgcHJvbWlzZSA9IHRoaXM7XG4gICAgaWYgKCFyZWFzb24pIHtcbiAgICAgICAgdmFyIG5ld1JlYXNvbiA9IG5ldyBFcnJvcihyZWFzb24gKyBcIlwiKTtcbiAgICAgICAgbmV3UmVhc29uLmNhdXNlID0gcmVhc29uO1xuICAgICAgICByZWFzb24gPSBuZXdSZWFzb247XG4gICAgfVxuICAgIHZhciByZXQgPSB0cnlDYXRjaChub2RlYmFjaykuY2FsbChwcm9taXNlLl9ib3VuZFZhbHVlKCksIHJlYXNvbik7XG4gICAgaWYgKHJldCA9PT0gZXJyb3JPYmopIHtcbiAgICAgICAgYXN5bmMudGhyb3dMYXRlcihyZXQuZSk7XG4gICAgfVxufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5hc0NhbGxiYWNrID0gUHJvbWlzZS5wcm90b3R5cGUubm9kZWlmeSA9IGZ1bmN0aW9uIChub2RlYmFjayxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG5vZGViYWNrID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB2YXIgYWRhcHRlciA9IHN1Y2Nlc3NBZGFwdGVyO1xuICAgICAgICBpZiAob3B0aW9ucyAhPT0gdW5kZWZpbmVkICYmIE9iamVjdChvcHRpb25zKS5zcHJlYWQpIHtcbiAgICAgICAgICAgIGFkYXB0ZXIgPSBzcHJlYWRBZGFwdGVyO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3RoZW4oXG4gICAgICAgICAgICBhZGFwdGVyLFxuICAgICAgICAgICAgZXJyb3JBZGFwdGVyLFxuICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIG5vZGViYWNrXG4gICAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwyMjpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG52YXIgbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJjaXJjdWxhciBwcm9taXNlIHJlc29sdXRpb24gY2hhaW5cXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXHUwMDBhXCIpO1xufTtcbnZhciByZWZsZWN0SGFuZGxlciA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbih0aGlzLl90YXJnZXQoKSk7XG59O1xudmFyIGFwaVJlamVjdGlvbiA9IGZ1bmN0aW9uKG1zZykge1xuICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKG1zZykpO1xufTtcbmZ1bmN0aW9uIFByb3h5YWJsZSgpIHt9XG52YXIgVU5ERUZJTkVEX0JJTkRJTkcgPSB7fTtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcblxudmFyIGdldERvbWFpbjtcbmlmICh1dGlsLmlzTm9kZSkge1xuICAgIGdldERvbWFpbiA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgcmV0ID0gcHJvY2Vzcy5kb21haW47XG4gICAgICAgIGlmIChyZXQgPT09IHVuZGVmaW5lZCkgcmV0ID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufSBlbHNlIHtcbiAgICBnZXREb21haW4gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbn1cbnV0aWwubm90RW51bWVyYWJsZVByb3AoUHJvbWlzZSwgXCJfZ2V0RG9tYWluXCIsIGdldERvbWFpbik7XG5cbnZhciBlczUgPSBfZGVyZXFfKFwiLi9lczVcIik7XG52YXIgQXN5bmMgPSBfZGVyZXFfKFwiLi9hc3luY1wiKTtcbnZhciBhc3luYyA9IG5ldyBBc3luYygpO1xuZXM1LmRlZmluZVByb3BlcnR5KFByb21pc2UsIFwiX2FzeW5jXCIsIHt2YWx1ZTogYXN5bmN9KTtcbnZhciBlcnJvcnMgPSBfZGVyZXFfKFwiLi9lcnJvcnNcIik7XG52YXIgVHlwZUVycm9yID0gUHJvbWlzZS5UeXBlRXJyb3IgPSBlcnJvcnMuVHlwZUVycm9yO1xuUHJvbWlzZS5SYW5nZUVycm9yID0gZXJyb3JzLlJhbmdlRXJyb3I7XG52YXIgQ2FuY2VsbGF0aW9uRXJyb3IgPSBQcm9taXNlLkNhbmNlbGxhdGlvbkVycm9yID0gZXJyb3JzLkNhbmNlbGxhdGlvbkVycm9yO1xuUHJvbWlzZS5UaW1lb3V0RXJyb3IgPSBlcnJvcnMuVGltZW91dEVycm9yO1xuUHJvbWlzZS5PcGVyYXRpb25hbEVycm9yID0gZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3I7XG5Qcm9taXNlLlJlamVjdGlvbkVycm9yID0gZXJyb3JzLk9wZXJhdGlvbmFsRXJyb3I7XG5Qcm9taXNlLkFnZ3JlZ2F0ZUVycm9yID0gZXJyb3JzLkFnZ3JlZ2F0ZUVycm9yO1xudmFyIElOVEVSTkFMID0gZnVuY3Rpb24oKXt9O1xudmFyIEFQUExZID0ge307XG52YXIgTkVYVF9GSUxURVIgPSB7fTtcbnZhciB0cnlDb252ZXJ0VG9Qcm9taXNlID0gX2RlcmVxXyhcIi4vdGhlbmFibGVzXCIpKFByb21pc2UsIElOVEVSTkFMKTtcbnZhciBQcm9taXNlQXJyYXkgPVxuICAgIF9kZXJlcV8oXCIuL3Byb21pc2VfYXJyYXlcIikoUHJvbWlzZSwgSU5URVJOQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uLCBQcm94eWFibGUpO1xudmFyIENvbnRleHQgPSBfZGVyZXFfKFwiLi9jb250ZXh0XCIpKFByb21pc2UpO1xuIC8qanNoaW50IHVudXNlZDpmYWxzZSovXG52YXIgY3JlYXRlQ29udGV4dCA9IENvbnRleHQuY3JlYXRlO1xudmFyIGRlYnVnID0gX2RlcmVxXyhcIi4vZGVidWdnYWJpbGl0eVwiKShQcm9taXNlLCBDb250ZXh0KTtcbnZhciBDYXB0dXJlZFRyYWNlID0gZGVidWcuQ2FwdHVyZWRUcmFjZTtcbnZhciBQYXNzVGhyb3VnaEhhbmRsZXJDb250ZXh0ID1cbiAgICBfZGVyZXFfKFwiLi9maW5hbGx5XCIpKFByb21pc2UsIHRyeUNvbnZlcnRUb1Byb21pc2UsIE5FWFRfRklMVEVSKTtcbnZhciBjYXRjaEZpbHRlciA9IF9kZXJlcV8oXCIuL2NhdGNoX2ZpbHRlclwiKShORVhUX0ZJTFRFUik7XG52YXIgbm9kZWJhY2tGb3JQcm9taXNlID0gX2RlcmVxXyhcIi4vbm9kZWJhY2tcIik7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcbmZ1bmN0aW9uIGNoZWNrKHNlbGYsIGV4ZWN1dG9yKSB7XG4gICAgaWYgKHNlbGYgPT0gbnVsbCB8fCBzZWxmLmNvbnN0cnVjdG9yICE9PSBQcm9taXNlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJ0aGUgcHJvbWlzZSBjb25zdHJ1Y3RvciBjYW5ub3QgYmUgaW52b2tlZCBkaXJlY3RseVxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcdTAwMGFcIik7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZXhlY3V0b3IgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIiArIHV0aWwuY2xhc3NTdHJpbmcoZXhlY3V0b3IpKTtcbiAgICB9XG5cbn1cblxuZnVuY3Rpb24gUHJvbWlzZShleGVjdXRvcikge1xuICAgIGlmIChleGVjdXRvciAhPT0gSU5URVJOQUwpIHtcbiAgICAgICAgY2hlY2sodGhpcywgZXhlY3V0b3IpO1xuICAgIH1cbiAgICB0aGlzLl9iaXRGaWVsZCA9IDA7XG4gICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9wcm9taXNlMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9yZWNlaXZlcjAgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5fcmVzb2x2ZUZyb21FeGVjdXRvcihleGVjdXRvcik7XG4gICAgdGhpcy5fcHJvbWlzZUNyZWF0ZWQoKTtcbiAgICB0aGlzLl9maXJlRXZlbnQoXCJwcm9taXNlQ3JlYXRlZFwiLCB0aGlzKTtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFwiW29iamVjdCBQcm9taXNlXVwiO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuY2F1Z2h0ID0gUHJvbWlzZS5wcm90b3R5cGVbXCJjYXRjaFwiXSA9IGZ1bmN0aW9uIChmbikge1xuICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgIGlmIChsZW4gPiAxKSB7XG4gICAgICAgIHZhciBjYXRjaEluc3RhbmNlcyA9IG5ldyBBcnJheShsZW4gLSAxKSxcbiAgICAgICAgICAgIGogPSAwLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbGVuIC0gMTsgKytpKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgICAgIGlmICh1dGlsLmlzT2JqZWN0KGl0ZW0pKSB7XG4gICAgICAgICAgICAgICAgY2F0Y2hJbnN0YW5jZXNbaisrXSA9IGl0ZW07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJDYXRjaCBzdGF0ZW1lbnQgcHJlZGljYXRlOiBcIiArXG4gICAgICAgICAgICAgICAgICAgIFwiZXhwZWN0aW5nIGFuIG9iamVjdCBidXQgZ290IFwiICsgdXRpbC5jbGFzc1N0cmluZyhpdGVtKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2hJbnN0YW5jZXMubGVuZ3RoID0gajtcbiAgICAgICAgZm4gPSBhcmd1bWVudHNbaV07XG4gICAgICAgIHJldHVybiB0aGlzLnRoZW4odW5kZWZpbmVkLCBjYXRjaEZpbHRlcihjYXRjaEluc3RhbmNlcywgZm4sIHRoaXMpKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMudGhlbih1bmRlZmluZWQsIGZuKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnJlZmxlY3QgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3RoZW4ocmVmbGVjdEhhbmRsZXIsXG4gICAgICAgIHJlZmxlY3RIYW5kbGVyLCB1bmRlZmluZWQsIHRoaXMsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS50aGVuID0gZnVuY3Rpb24gKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCkge1xuICAgIGlmIChkZWJ1Zy53YXJuaW5ncygpICYmIGFyZ3VtZW50cy5sZW5ndGggPiAwICYmXG4gICAgICAgIHR5cGVvZiBkaWRGdWxmaWxsICE9PSBcImZ1bmN0aW9uXCIgJiZcbiAgICAgICAgdHlwZW9mIGRpZFJlamVjdCAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHZhciBtc2cgPSBcIi50aGVuKCkgb25seSBhY2NlcHRzIGZ1bmN0aW9ucyBidXQgd2FzIHBhc3NlZDogXCIgK1xuICAgICAgICAgICAgICAgIHV0aWwuY2xhc3NTdHJpbmcoZGlkRnVsZmlsbCk7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgbXNnICs9IFwiLCBcIiArIHV0aWwuY2xhc3NTdHJpbmcoZGlkUmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl93YXJuKG1zZyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl90aGVuKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5kb25lID0gZnVuY3Rpb24gKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCkge1xuICAgIHZhciBwcm9taXNlID1cbiAgICAgICAgdGhpcy5fdGhlbihkaWRGdWxmaWxsLCBkaWRSZWplY3QsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgIHByb21pc2UuX3NldElzRmluYWwoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNwcmVhZCA9IGZ1bmN0aW9uIChmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZXhwZWN0aW5nIGEgZnVuY3Rpb24gYnV0IGdvdCBcIiArIHV0aWwuY2xhc3NTdHJpbmcoZm4pKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuYWxsKCkuX3RoZW4oZm4sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBBUFBMWSwgdW5kZWZpbmVkKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgcmV0ID0ge1xuICAgICAgICBpc0Z1bGZpbGxlZDogZmFsc2UsXG4gICAgICAgIGlzUmVqZWN0ZWQ6IGZhbHNlLFxuICAgICAgICBmdWxmaWxsbWVudFZhbHVlOiB1bmRlZmluZWQsXG4gICAgICAgIHJlamVjdGlvblJlYXNvbjogdW5kZWZpbmVkXG4gICAgfTtcbiAgICBpZiAodGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgIHJldC5mdWxmaWxsbWVudFZhbHVlID0gdGhpcy52YWx1ZSgpO1xuICAgICAgICByZXQuaXNGdWxmaWxsZWQgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5pc1JlamVjdGVkKCkpIHtcbiAgICAgICAgcmV0LnJlamVjdGlvblJlYXNvbiA9IHRoaXMucmVhc29uKCk7XG4gICAgICAgIHJldC5pc1JlamVjdGVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmFsbCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5fd2FybihcIi5hbGwoKSB3YXMgcGFzc2VkIGFyZ3VtZW50cyBidXQgaXQgZG9lcyBub3QgdGFrZSBhbnlcIik7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZUFycmF5KHRoaXMpLnByb21pc2UoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgcmV0dXJuIHRoaXMuY2F1Z2h0KHV0aWwub3JpZ2luYXRlc0Zyb21SZWplY3Rpb24sIGZuKTtcbn07XG5cblByb21pc2UuZ2V0TmV3TGlicmFyeUNvcHkgPSBtb2R1bGUuZXhwb3J0cztcblxuUHJvbWlzZS5pcyA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICByZXR1cm4gdmFsIGluc3RhbmNlb2YgUHJvbWlzZTtcbn07XG5cblByb21pc2UuZnJvbU5vZGUgPSBQcm9taXNlLmZyb21DYWxsYmFjayA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICByZXQuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgdmFyIG11bHRpQXJncyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxID8gISFPYmplY3QoYXJndW1lbnRzWzFdKS5tdWx0aUFyZ3NcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBmYWxzZTtcbiAgICB2YXIgcmVzdWx0ID0gdHJ5Q2F0Y2goZm4pKG5vZGViYWNrRm9yUHJvbWlzZShyZXQsIG11bHRpQXJncykpO1xuICAgIGlmIChyZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIHJldC5fcmVqZWN0Q2FsbGJhY2socmVzdWx0LmUsIHRydWUpO1xuICAgIH1cbiAgICBpZiAoIXJldC5faXNGYXRlU2VhbGVkKCkpIHJldC5fc2V0QXN5bmNHdWFyYW50ZWVkKCk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UuYWxsID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlQXJyYXkocHJvbWlzZXMpLnByb21pc2UoKTtcbn07XG5cblByb21pc2UuY2FzdCA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICB2YXIgcmV0ID0gdHJ5Q29udmVydFRvUHJvbWlzZShvYmopO1xuICAgIGlmICghKHJldCBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAgIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgcmV0Ll9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgICAgICByZXQuX3NldEZ1bGZpbGxlZCgpO1xuICAgICAgICByZXQuX3JlamVjdGlvbkhhbmRsZXIwID0gb2JqO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5yZXNvbHZlID0gUHJvbWlzZS5mdWxmaWxsZWQgPSBQcm9taXNlLmNhc3Q7XG5cblByb21pc2UucmVqZWN0ID0gUHJvbWlzZS5yZWplY3RlZCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICByZXQuX3JlamVjdENhbGxiYWNrKHJlYXNvbiwgdHJ1ZSk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2Uuc2V0U2NoZWR1bGVyID0gZnVuY3Rpb24oZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImV4cGVjdGluZyBhIGZ1bmN0aW9uIGJ1dCBnb3QgXCIgKyB1dGlsLmNsYXNzU3RyaW5nKGZuKSk7XG4gICAgfVxuICAgIHJldHVybiBhc3luYy5zZXRTY2hlZHVsZXIoZm4pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3RoZW4gPSBmdW5jdGlvbiAoXG4gICAgZGlkRnVsZmlsbCxcbiAgICBkaWRSZWplY3QsXG4gICAgXywgICAgcmVjZWl2ZXIsXG4gICAgaW50ZXJuYWxEYXRhXG4pIHtcbiAgICB2YXIgaGF2ZUludGVybmFsRGF0YSA9IGludGVybmFsRGF0YSAhPT0gdW5kZWZpbmVkO1xuICAgIHZhciBwcm9taXNlID0gaGF2ZUludGVybmFsRGF0YSA/IGludGVybmFsRGF0YSA6IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcy5fdGFyZ2V0KCk7XG4gICAgdmFyIGJpdEZpZWxkID0gdGFyZ2V0Ll9iaXRGaWVsZDtcblxuICAgIGlmICghaGF2ZUludGVybmFsRGF0YSkge1xuICAgICAgICBwcm9taXNlLl9wcm9wYWdhdGVGcm9tKHRoaXMsIDMpO1xuICAgICAgICBwcm9taXNlLl9jYXB0dXJlU3RhY2tUcmFjZSgpO1xuICAgICAgICBpZiAocmVjZWl2ZXIgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgKCh0aGlzLl9iaXRGaWVsZCAmIDIwOTcxNTIpICE9PSAwKSkge1xuICAgICAgICAgICAgaWYgKCEoKGJpdEZpZWxkICYgNTAzOTcxODQpID09PSAwKSkge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyID0gdGhpcy5fYm91bmRWYWx1ZSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlciA9IHRhcmdldCA9PT0gdGhpcyA/IHVuZGVmaW5lZCA6IHRoaXMuX2JvdW5kVG87XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZmlyZUV2ZW50KFwicHJvbWlzZUNoYWluZWRcIiwgdGhpcywgcHJvbWlzZSk7XG4gICAgfVxuXG4gICAgdmFyIGRvbWFpbiA9IGdldERvbWFpbigpO1xuICAgIGlmICghKChiaXRGaWVsZCAmIDUwMzk3MTg0KSA9PT0gMCkpIHtcbiAgICAgICAgdmFyIGhhbmRsZXIsIHZhbHVlLCBzZXR0bGVyID0gdGFyZ2V0Ll9zZXR0bGVQcm9taXNlQ3R4O1xuICAgICAgICBpZiAoKChiaXRGaWVsZCAmIDMzNTU0NDMyKSAhPT0gMCkpIHtcbiAgICAgICAgICAgIHZhbHVlID0gdGFyZ2V0Ll9yZWplY3Rpb25IYW5kbGVyMDtcbiAgICAgICAgICAgIGhhbmRsZXIgPSBkaWRGdWxmaWxsO1xuICAgICAgICB9IGVsc2UgaWYgKCgoYml0RmllbGQgJiAxNjc3NzIxNikgIT09IDApKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IHRhcmdldC5fZnVsZmlsbG1lbnRIYW5kbGVyMDtcbiAgICAgICAgICAgIGhhbmRsZXIgPSBkaWRSZWplY3Q7XG4gICAgICAgICAgICB0YXJnZXQuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNldHRsZXIgPSB0YXJnZXQuX3NldHRsZVByb21pc2VMYXRlQ2FuY2VsbGF0aW9uT2JzZXJ2ZXI7XG4gICAgICAgICAgICB2YWx1ZSA9IG5ldyBDYW5jZWxsYXRpb25FcnJvcihcImxhdGUgY2FuY2VsbGF0aW9uIG9ic2VydmVyXCIpO1xuICAgICAgICAgICAgdGFyZ2V0Ll9hdHRhY2hFeHRyYVRyYWNlKHZhbHVlKTtcbiAgICAgICAgICAgIGhhbmRsZXIgPSBkaWRSZWplY3Q7XG4gICAgICAgIH1cblxuICAgICAgICBhc3luYy5pbnZva2Uoc2V0dGxlciwgdGFyZ2V0LCB7XG4gICAgICAgICAgICBoYW5kbGVyOiBkb21haW4gPT09IG51bGwgPyBoYW5kbGVyXG4gICAgICAgICAgICAgICAgOiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgICAgICAgICB1dGlsLmRvbWFpbkJpbmQoZG9tYWluLCBoYW5kbGVyKSksXG4gICAgICAgICAgICBwcm9taXNlOiBwcm9taXNlLFxuICAgICAgICAgICAgcmVjZWl2ZXI6IHJlY2VpdmVyLFxuICAgICAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldC5fYWRkQ2FsbGJhY2tzKGRpZEZ1bGZpbGwsIGRpZFJlamVjdCwgcHJvbWlzZSwgcmVjZWl2ZXIsIGRvbWFpbik7XG4gICAgfVxuXG4gICAgcmV0dXJuIHByb21pc2U7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbGVuZ3RoID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl9iaXRGaWVsZCAmIDY1NTM1O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRmF0ZVNlYWxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMTE3NTA2MDQ4KSAhPT0gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0ZvbGxvd2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgNjcxMDg4NjQpID09PSA2NzEwODg2NDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRMZW5ndGggPSBmdW5jdGlvbiAobGVuKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSAodGhpcy5fYml0RmllbGQgJiAtNjU1MzYpIHxcbiAgICAgICAgKGxlbiAmIDY1NTM1KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRGdWxmaWxsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDMzNTU0NDMyO1xuICAgIHRoaXMuX2ZpcmVFdmVudChcInByb21pc2VGdWxmaWxsZWRcIiwgdGhpcyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0UmVqZWN0ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDE2Nzc3MjE2O1xuICAgIHRoaXMuX2ZpcmVFdmVudChcInByb21pc2VSZWplY3RlZFwiLCB0aGlzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRGb2xsb3dpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDY3MTA4ODY0O1xuICAgIHRoaXMuX2ZpcmVFdmVudChcInByb21pc2VSZXNvbHZlZFwiLCB0aGlzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRJc0ZpbmFsID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgfCA0MTk0MzA0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2lzRmluYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDQxOTQzMDQpID4gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl91bnNldENhbmNlbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2JpdEZpZWxkID0gdGhpcy5fYml0RmllbGQgJiAofjY1NTM2KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgNjU1MzY7XG4gICAgdGhpcy5fZmlyZUV2ZW50KFwicHJvbWlzZUNhbmNlbGxlZFwiLCB0aGlzKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRXaWxsQmVDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgODM4ODYwODtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRBc3luY0d1YXJhbnRlZWQgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAoYXN5bmMuaGFzQ3VzdG9tU2NoZWR1bGVyKCkpIHJldHVybjtcbiAgICB0aGlzLl9iaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkIHwgMTM0MjE3NzI4O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlY2VpdmVyQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICB2YXIgcmV0ID0gaW5kZXggPT09IDAgPyB0aGlzLl9yZWNlaXZlcjAgOiB0aGlzW1xuICAgICAgICAgICAgaW5kZXggKiA0IC0gNCArIDNdO1xuICAgIGlmIChyZXQgPT09IFVOREVGSU5FRF9CSU5ESU5HKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfSBlbHNlIGlmIChyZXQgPT09IHVuZGVmaW5lZCAmJiB0aGlzLl9pc0JvdW5kKCkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JvdW5kVmFsdWUoKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm9taXNlQXQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpc1tcbiAgICAgICAgICAgIGluZGV4ICogNCAtIDQgKyAyXTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mdWxmaWxsbWVudEhhbmRsZXJBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiB0aGlzW1xuICAgICAgICAgICAgaW5kZXggKiA0IC0gNCArIDBdO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdGlvbkhhbmRsZXJBdCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgIHJldHVybiB0aGlzW1xuICAgICAgICAgICAgaW5kZXggKiA0IC0gNCArIDFdO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2JvdW5kVmFsdWUgPSBmdW5jdGlvbigpIHt9O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fbWlncmF0ZUNhbGxiYWNrMCA9IGZ1bmN0aW9uIChmb2xsb3dlcikge1xuICAgIHZhciBiaXRGaWVsZCA9IGZvbGxvd2VyLl9iaXRGaWVsZDtcbiAgICB2YXIgZnVsZmlsbCA9IGZvbGxvd2VyLl9mdWxmaWxsbWVudEhhbmRsZXIwO1xuICAgIHZhciByZWplY3QgPSBmb2xsb3dlci5fcmVqZWN0aW9uSGFuZGxlcjA7XG4gICAgdmFyIHByb21pc2UgPSBmb2xsb3dlci5fcHJvbWlzZTA7XG4gICAgdmFyIHJlY2VpdmVyID0gZm9sbG93ZXIuX3JlY2VpdmVyQXQoMCk7XG4gICAgaWYgKHJlY2VpdmVyID09PSB1bmRlZmluZWQpIHJlY2VpdmVyID0gVU5ERUZJTkVEX0JJTkRJTkc7XG4gICAgdGhpcy5fYWRkQ2FsbGJhY2tzKGZ1bGZpbGwsIHJlamVjdCwgcHJvbWlzZSwgcmVjZWl2ZXIsIG51bGwpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX21pZ3JhdGVDYWxsYmFja0F0ID0gZnVuY3Rpb24gKGZvbGxvd2VyLCBpbmRleCkge1xuICAgIHZhciBmdWxmaWxsID0gZm9sbG93ZXIuX2Z1bGZpbGxtZW50SGFuZGxlckF0KGluZGV4KTtcbiAgICB2YXIgcmVqZWN0ID0gZm9sbG93ZXIuX3JlamVjdGlvbkhhbmRsZXJBdChpbmRleCk7XG4gICAgdmFyIHByb21pc2UgPSBmb2xsb3dlci5fcHJvbWlzZUF0KGluZGV4KTtcbiAgICB2YXIgcmVjZWl2ZXIgPSBmb2xsb3dlci5fcmVjZWl2ZXJBdChpbmRleCk7XG4gICAgaWYgKHJlY2VpdmVyID09PSB1bmRlZmluZWQpIHJlY2VpdmVyID0gVU5ERUZJTkVEX0JJTkRJTkc7XG4gICAgdGhpcy5fYWRkQ2FsbGJhY2tzKGZ1bGZpbGwsIHJlamVjdCwgcHJvbWlzZSwgcmVjZWl2ZXIsIG51bGwpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX2FkZENhbGxiYWNrcyA9IGZ1bmN0aW9uIChcbiAgICBmdWxmaWxsLFxuICAgIHJlamVjdCxcbiAgICBwcm9taXNlLFxuICAgIHJlY2VpdmVyLFxuICAgIGRvbWFpblxuKSB7XG4gICAgdmFyIGluZGV4ID0gdGhpcy5fbGVuZ3RoKCk7XG5cbiAgICBpZiAoaW5kZXggPj0gNjU1MzUgLSA0KSB7XG4gICAgICAgIGluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5fc2V0TGVuZ3RoKDApO1xuICAgIH1cblxuICAgIGlmIChpbmRleCA9PT0gMCkge1xuICAgICAgICB0aGlzLl9wcm9taXNlMCA9IHByb21pc2U7XG4gICAgICAgIHRoaXMuX3JlY2VpdmVyMCA9IHJlY2VpdmVyO1xuICAgICAgICBpZiAodHlwZW9mIGZ1bGZpbGwgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgdGhpcy5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9XG4gICAgICAgICAgICAgICAgZG9tYWluID09PSBudWxsID8gZnVsZmlsbCA6IHV0aWwuZG9tYWluQmluZChkb21haW4sIGZ1bGZpbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVqZWN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdGlvbkhhbmRsZXIwID1cbiAgICAgICAgICAgICAgICBkb21haW4gPT09IG51bGwgPyByZWplY3QgOiB1dGlsLmRvbWFpbkJpbmQoZG9tYWluLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGJhc2UgPSBpbmRleCAqIDQgLSA0O1xuICAgICAgICB0aGlzW2Jhc2UgKyAyXSA9IHByb21pc2U7XG4gICAgICAgIHRoaXNbYmFzZSArIDNdID0gcmVjZWl2ZXI7XG4gICAgICAgIGlmICh0eXBlb2YgZnVsZmlsbCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzW2Jhc2UgKyAwXSA9XG4gICAgICAgICAgICAgICAgZG9tYWluID09PSBudWxsID8gZnVsZmlsbCA6IHV0aWwuZG9tYWluQmluZChkb21haW4sIGZ1bGZpbGwpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVqZWN0ID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHRoaXNbYmFzZSArIDFdID1cbiAgICAgICAgICAgICAgICBkb21haW4gPT09IG51bGwgPyByZWplY3QgOiB1dGlsLmRvbWFpbkJpbmQoZG9tYWluLCByZWplY3QpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHRoaXMuX3NldExlbmd0aChpbmRleCArIDEpO1xuICAgIHJldHVybiBpbmRleDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9wcm94eSA9IGZ1bmN0aW9uIChwcm94eWFibGUsIGFyZykge1xuICAgIHRoaXMuX2FkZENhbGxiYWNrcyh1bmRlZmluZWQsIHVuZGVmaW5lZCwgYXJnLCBwcm94eWFibGUsIG51bGwpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Jlc29sdmVDYWxsYmFjayA9IGZ1bmN0aW9uKHZhbHVlLCBzaG91bGRCaW5kKSB7XG4gICAgaWYgKCgodGhpcy5fYml0RmllbGQgJiAxMTc1MDYwNDgpICE9PSAwKSkgcmV0dXJuO1xuICAgIGlmICh2YWx1ZSA9PT0gdGhpcylcbiAgICAgICAgcmV0dXJuIHRoaXMuX3JlamVjdENhbGxiYWNrKG1ha2VTZWxmUmVzb2x1dGlvbkVycm9yKCksIGZhbHNlKTtcbiAgICB2YXIgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZSh2YWx1ZSwgdGhpcyk7XG4gICAgaWYgKCEobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHJldHVybiB0aGlzLl9mdWxmaWxsKHZhbHVlKTtcblxuICAgIGlmIChzaG91bGRCaW5kKSB0aGlzLl9wcm9wYWdhdGVGcm9tKG1heWJlUHJvbWlzZSwgMik7XG5cbiAgICB2YXIgcHJvbWlzZSA9IG1heWJlUHJvbWlzZS5fdGFyZ2V0KCk7XG5cbiAgICBpZiAocHJvbWlzZSA9PT0gdGhpcykge1xuICAgICAgICB0aGlzLl9yZWplY3QobWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IoKSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgYml0RmllbGQgPSBwcm9taXNlLl9iaXRGaWVsZDtcbiAgICBpZiAoKChiaXRGaWVsZCAmIDUwMzk3MTg0KSA9PT0gMCkpIHtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMuX2xlbmd0aCgpO1xuICAgICAgICBpZiAobGVuID4gMCkgcHJvbWlzZS5fbWlncmF0ZUNhbGxiYWNrMCh0aGlzKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgcHJvbWlzZS5fbWlncmF0ZUNhbGxiYWNrQXQodGhpcywgaSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fc2V0Rm9sbG93aW5nKCk7XG4gICAgICAgIHRoaXMuX3NldExlbmd0aCgwKTtcbiAgICAgICAgdGhpcy5fc2V0Rm9sbG93ZWUocHJvbWlzZSk7XG4gICAgfSBlbHNlIGlmICgoKGJpdEZpZWxkICYgMzM1NTQ0MzIpICE9PSAwKSkge1xuICAgICAgICB0aGlzLl9mdWxmaWxsKHByb21pc2UuX3ZhbHVlKCkpO1xuICAgIH0gZWxzZSBpZiAoKChiaXRGaWVsZCAmIDE2Nzc3MjE2KSAhPT0gMCkpIHtcbiAgICAgICAgdGhpcy5fcmVqZWN0KHByb21pc2UuX3JlYXNvbigpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgcmVhc29uID0gbmV3IENhbmNlbGxhdGlvbkVycm9yKFwibGF0ZSBjYW5jZWxsYXRpb24gb2JzZXJ2ZXJcIik7XG4gICAgICAgIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UocmVhc29uKTtcbiAgICAgICAgdGhpcy5fcmVqZWN0KHJlYXNvbik7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3JlamVjdENhbGxiYWNrID1cbmZ1bmN0aW9uKHJlYXNvbiwgc3luY2hyb25vdXMsIGlnbm9yZU5vbkVycm9yV2FybmluZ3MpIHtcbiAgICB2YXIgdHJhY2UgPSB1dGlsLmVuc3VyZUVycm9yT2JqZWN0KHJlYXNvbik7XG4gICAgdmFyIGhhc1N0YWNrID0gdHJhY2UgPT09IHJlYXNvbjtcbiAgICBpZiAoIWhhc1N0YWNrICYmICFpZ25vcmVOb25FcnJvcldhcm5pbmdzICYmIGRlYnVnLndhcm5pbmdzKCkpIHtcbiAgICAgICAgdmFyIG1lc3NhZ2UgPSBcImEgcHJvbWlzZSB3YXMgcmVqZWN0ZWQgd2l0aCBhIG5vbi1lcnJvcjogXCIgK1xuICAgICAgICAgICAgdXRpbC5jbGFzc1N0cmluZyhyZWFzb24pO1xuICAgICAgICB0aGlzLl93YXJuKG1lc3NhZ2UsIHRydWUpO1xuICAgIH1cbiAgICB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKHRyYWNlLCBzeW5jaHJvbm91cyA/IGhhc1N0YWNrIDogZmFsc2UpO1xuICAgIHRoaXMuX3JlamVjdChyZWFzb24pO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3Jlc29sdmVGcm9tRXhlY3V0b3IgPSBmdW5jdGlvbiAoZXhlY3V0b3IpIHtcbiAgICBpZiAoZXhlY3V0b3IgPT09IElOVEVSTkFMKSByZXR1cm47XG4gICAgdmFyIHByb21pc2UgPSB0aGlzO1xuICAgIHRoaXMuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgdGhpcy5fcHVzaENvbnRleHQoKTtcbiAgICB2YXIgc3luY2hyb25vdXMgPSB0cnVlO1xuICAgIHZhciByID0gdGhpcy5fZXhlY3V0ZShleGVjdXRvciwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbiAgICB9LCBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKHJlYXNvbiwgc3luY2hyb25vdXMpO1xuICAgIH0pO1xuICAgIHN5bmNocm9ub3VzID0gZmFsc2U7XG4gICAgdGhpcy5fcG9wQ29udGV4dCgpO1xuXG4gICAgaWYgKHIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhyLCB0cnVlKTtcbiAgICB9XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0dGxlUHJvbWlzZUZyb21IYW5kbGVyID0gZnVuY3Rpb24gKFxuICAgIGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSwgcHJvbWlzZVxuKSB7XG4gICAgdmFyIGJpdEZpZWxkID0gcHJvbWlzZS5fYml0RmllbGQ7XG4gICAgaWYgKCgoYml0RmllbGQgJiA2NTUzNikgIT09IDApKSByZXR1cm47XG4gICAgcHJvbWlzZS5fcHVzaENvbnRleHQoKTtcbiAgICB2YXIgeDtcbiAgICBpZiAocmVjZWl2ZXIgPT09IEFQUExZKSB7XG4gICAgICAgIGlmICghdmFsdWUgfHwgdHlwZW9mIHZhbHVlLmxlbmd0aCAhPT0gXCJudW1iZXJcIikge1xuICAgICAgICAgICAgeCA9IGVycm9yT2JqO1xuICAgICAgICAgICAgeC5lID0gbmV3IFR5cGVFcnJvcihcImNhbm5vdCAuc3ByZWFkKCkgYSBub24tYXJyYXk6IFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHV0aWwuY2xhc3NTdHJpbmcodmFsdWUpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSB0cnlDYXRjaChoYW5kbGVyKS5hcHBseSh0aGlzLl9ib3VuZFZhbHVlKCksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHggPSB0cnlDYXRjaChoYW5kbGVyKS5jYWxsKHJlY2VpdmVyLCB2YWx1ZSk7XG4gICAgfVxuICAgIHZhciBwcm9taXNlQ3JlYXRlZCA9IHByb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICBiaXRGaWVsZCA9IHByb21pc2UuX2JpdEZpZWxkO1xuICAgIGlmICgoKGJpdEZpZWxkICYgNjU1MzYpICE9PSAwKSkgcmV0dXJuO1xuXG4gICAgaWYgKHggPT09IE5FWFRfRklMVEVSKSB7XG4gICAgICAgIHByb21pc2UuX3JlamVjdCh2YWx1ZSk7XG4gICAgfSBlbHNlIGlmICh4ID09PSBlcnJvck9iaikge1xuICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayh4LmUsIGZhbHNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBkZWJ1Zy5jaGVja0ZvcmdvdHRlblJldHVybnMoeCwgcHJvbWlzZUNyZWF0ZWQsIFwiXCIsICBwcm9taXNlLCB0aGlzKTtcbiAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl90YXJnZXQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgcmV0ID0gdGhpcztcbiAgICB3aGlsZSAocmV0Ll9pc0ZvbGxvd2luZygpKSByZXQgPSByZXQuX2ZvbGxvd2VlKCk7XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mb2xsb3dlZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9zZXRGb2xsb3dlZSA9IGZ1bmN0aW9uKHByb21pc2UpIHtcbiAgICB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMCA9IHByb21pc2U7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0dGxlUHJvbWlzZSA9IGZ1bmN0aW9uKHByb21pc2UsIGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSkge1xuICAgIHZhciBpc1Byb21pc2UgPSBwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZTtcbiAgICB2YXIgYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZDtcbiAgICB2YXIgYXN5bmNHdWFyYW50ZWVkID0gKChiaXRGaWVsZCAmIDEzNDIxNzcyOCkgIT09IDApO1xuICAgIGlmICgoKGJpdEZpZWxkICYgNjU1MzYpICE9PSAwKSkge1xuICAgICAgICBpZiAoaXNQcm9taXNlKSBwcm9taXNlLl9pbnZva2VJbnRlcm5hbE9uQ2FuY2VsKCk7XG5cbiAgICAgICAgaWYgKHJlY2VpdmVyIGluc3RhbmNlb2YgUGFzc1Rocm91Z2hIYW5kbGVyQ29udGV4dCAmJlxuICAgICAgICAgICAgcmVjZWl2ZXIuaXNGaW5hbGx5SGFuZGxlcigpKSB7XG4gICAgICAgICAgICByZWNlaXZlci5jYW5jZWxQcm9taXNlID0gcHJvbWlzZTtcbiAgICAgICAgICAgIGlmICh0cnlDYXRjaChoYW5kbGVyKS5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgPT09IGVycm9yT2JqKSB7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS5fcmVqZWN0KGVycm9yT2JqLmUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGhhbmRsZXIgPT09IHJlZmxlY3RIYW5kbGVyKSB7XG4gICAgICAgICAgICBwcm9taXNlLl9mdWxmaWxsKHJlZmxlY3RIYW5kbGVyLmNhbGwocmVjZWl2ZXIpKTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWNlaXZlciBpbnN0YW5jZW9mIFByb3h5YWJsZSkge1xuICAgICAgICAgICAgcmVjZWl2ZXIuX3Byb21pc2VDYW5jZWxsZWQocHJvbWlzZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlIHx8IHByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlQXJyYXkpIHtcbiAgICAgICAgICAgIHByb21pc2UuX2NhbmNlbCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVjZWl2ZXIuY2FuY2VsKCk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBoYW5kbGVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgaWYgKCFpc1Byb21pc2UpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuY2FsbChyZWNlaXZlciwgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGFzeW5jR3VhcmFudGVlZCkgcHJvbWlzZS5fc2V0QXN5bmNHdWFyYW50ZWVkKCk7XG4gICAgICAgICAgICB0aGlzLl9zZXR0bGVQcm9taXNlRnJvbUhhbmRsZXIoaGFuZGxlciwgcmVjZWl2ZXIsIHZhbHVlLCBwcm9taXNlKTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSBpZiAocmVjZWl2ZXIgaW5zdGFuY2VvZiBQcm94eWFibGUpIHtcbiAgICAgICAgaWYgKCFyZWNlaXZlci5faXNSZXNvbHZlZCgpKSB7XG4gICAgICAgICAgICBpZiAoKChiaXRGaWVsZCAmIDMzNTU0NDMyKSAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICByZWNlaXZlci5fcHJvbWlzZUZ1bGZpbGxlZCh2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlY2VpdmVyLl9wcm9taXNlUmVqZWN0ZWQodmFsdWUsIHByb21pc2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1Byb21pc2UpIHtcbiAgICAgICAgaWYgKGFzeW5jR3VhcmFudGVlZCkgcHJvbWlzZS5fc2V0QXN5bmNHdWFyYW50ZWVkKCk7XG4gICAgICAgIGlmICgoKGJpdEZpZWxkICYgMzM1NTQ0MzIpICE9PSAwKSkge1xuICAgICAgICAgICAgcHJvbWlzZS5fZnVsZmlsbCh2YWx1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwcm9taXNlLl9yZWplY3QodmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VMYXRlQ2FuY2VsbGF0aW9uT2JzZXJ2ZXIgPSBmdW5jdGlvbihjdHgpIHtcbiAgICB2YXIgaGFuZGxlciA9IGN0eC5oYW5kbGVyO1xuICAgIHZhciBwcm9taXNlID0gY3R4LnByb21pc2U7XG4gICAgdmFyIHJlY2VpdmVyID0gY3R4LnJlY2VpdmVyO1xuICAgIHZhciB2YWx1ZSA9IGN0eC52YWx1ZTtcbiAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAoIShwcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkpIHtcbiAgICAgICAgICAgIGhhbmRsZXIuY2FsbChyZWNlaXZlciwgdmFsdWUsIHByb21pc2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fc2V0dGxlUHJvbWlzZUZyb21IYW5kbGVyKGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSwgcHJvbWlzZSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHByb21pc2UuX3JlamVjdCh2YWx1ZSk7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VDdHggPSBmdW5jdGlvbihjdHgpIHtcbiAgICB0aGlzLl9zZXR0bGVQcm9taXNlKGN0eC5wcm9taXNlLCBjdHguaGFuZGxlciwgY3R4LnJlY2VpdmVyLCBjdHgudmFsdWUpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2UwID0gZnVuY3Rpb24oaGFuZGxlciwgdmFsdWUsIGJpdEZpZWxkKSB7XG4gICAgdmFyIHByb21pc2UgPSB0aGlzLl9wcm9taXNlMDtcbiAgICB2YXIgcmVjZWl2ZXIgPSB0aGlzLl9yZWNlaXZlckF0KDApO1xuICAgIHRoaXMuX3Byb21pc2UwID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuX3JlY2VpdmVyMCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9zZXR0bGVQcm9taXNlKHByb21pc2UsIGhhbmRsZXIsIHJlY2VpdmVyLCB2YWx1ZSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fY2xlYXJDYWxsYmFja0RhdGFBdEluZGV4ID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICB2YXIgYmFzZSA9IGluZGV4ICogNCAtIDQ7XG4gICAgdGhpc1tiYXNlICsgMl0gPVxuICAgIHRoaXNbYmFzZSArIDNdID1cbiAgICB0aGlzW2Jhc2UgKyAwXSA9XG4gICAgdGhpc1tiYXNlICsgMV0gPSB1bmRlZmluZWQ7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fZnVsZmlsbCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHZhciBiaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkO1xuICAgIGlmICgoKGJpdEZpZWxkICYgMTE3NTA2MDQ4KSA+Pj4gMTYpKSByZXR1cm47XG4gICAgaWYgKHZhbHVlID09PSB0aGlzKSB7XG4gICAgICAgIHZhciBlcnIgPSBtYWtlU2VsZlJlc29sdXRpb25FcnJvcigpO1xuICAgICAgICB0aGlzLl9hdHRhY2hFeHRyYVRyYWNlKGVycik7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWplY3QoZXJyKTtcbiAgICB9XG4gICAgdGhpcy5fc2V0RnVsZmlsbGVkKCk7XG4gICAgdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAgPSB2YWx1ZTtcblxuICAgIGlmICgoYml0RmllbGQgJiA2NTUzNSkgPiAwKSB7XG4gICAgICAgIGlmICgoKGJpdEZpZWxkICYgMTM0MjE3NzI4KSAhPT0gMCkpIHtcbiAgICAgICAgICAgIHRoaXMuX3NldHRsZVByb21pc2VzKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhc3luYy5zZXR0bGVQcm9taXNlcyh0aGlzKTtcbiAgICAgICAgfVxuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWplY3QgPSBmdW5jdGlvbiAocmVhc29uKSB7XG4gICAgdmFyIGJpdEZpZWxkID0gdGhpcy5fYml0RmllbGQ7XG4gICAgaWYgKCgoYml0RmllbGQgJiAxMTc1MDYwNDgpID4+PiAxNikpIHJldHVybjtcbiAgICB0aGlzLl9zZXRSZWplY3RlZCgpO1xuICAgIHRoaXMuX2Z1bGZpbGxtZW50SGFuZGxlcjAgPSByZWFzb247XG5cbiAgICBpZiAodGhpcy5faXNGaW5hbCgpKSB7XG4gICAgICAgIHJldHVybiBhc3luYy5mYXRhbEVycm9yKHJlYXNvbiwgdXRpbC5pc05vZGUpO1xuICAgIH1cblxuICAgIGlmICgoYml0RmllbGQgJiA2NTUzNSkgPiAwKSB7XG4gICAgICAgIGFzeW5jLnNldHRsZVByb21pc2VzKHRoaXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2Vuc3VyZVBvc3NpYmxlUmVqZWN0aW9uSGFuZGxlZCgpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9mdWxmaWxsUHJvbWlzZXMgPSBmdW5jdGlvbiAobGVuLCB2YWx1ZSkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXJBdChpKTtcbiAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLl9wcm9taXNlQXQoaSk7XG4gICAgICAgIHZhciByZWNlaXZlciA9IHRoaXMuX3JlY2VpdmVyQXQoaSk7XG4gICAgICAgIHRoaXMuX2NsZWFyQ2FsbGJhY2tEYXRhQXRJbmRleChpKTtcbiAgICAgICAgdGhpcy5fc2V0dGxlUHJvbWlzZShwcm9taXNlLCBoYW5kbGVyLCByZWNlaXZlciwgdmFsdWUpO1xuICAgIH1cbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWplY3RQcm9taXNlcyA9IGZ1bmN0aW9uIChsZW4sIHJlYXNvbikge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgICAgdmFyIGhhbmRsZXIgPSB0aGlzLl9yZWplY3Rpb25IYW5kbGVyQXQoaSk7XG4gICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZUF0KGkpO1xuICAgICAgICB2YXIgcmVjZWl2ZXIgPSB0aGlzLl9yZWNlaXZlckF0KGkpO1xuICAgICAgICB0aGlzLl9jbGVhckNhbGxiYWNrRGF0YUF0SW5kZXgoaSk7XG4gICAgICAgIHRoaXMuX3NldHRsZVByb21pc2UocHJvbWlzZSwgaGFuZGxlciwgcmVjZWl2ZXIsIHJlYXNvbik7XG4gICAgfVxufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuX3NldHRsZVByb21pc2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZhciBiaXRGaWVsZCA9IHRoaXMuX2JpdEZpZWxkO1xuICAgIHZhciBsZW4gPSAoYml0RmllbGQgJiA2NTUzNSk7XG5cbiAgICBpZiAobGVuID4gMCkge1xuICAgICAgICBpZiAoKChiaXRGaWVsZCAmIDE2ODQyNzUyKSAhPT0gMCkpIHtcbiAgICAgICAgICAgIHZhciByZWFzb24gPSB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwO1xuICAgICAgICAgICAgdGhpcy5fc2V0dGxlUHJvbWlzZTAodGhpcy5fcmVqZWN0aW9uSGFuZGxlcjAsIHJlYXNvbiwgYml0RmllbGQpO1xuICAgICAgICAgICAgdGhpcy5fcmVqZWN0UHJvbWlzZXMobGVuLCByZWFzb24pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fcmVqZWN0aW9uSGFuZGxlcjA7XG4gICAgICAgICAgICB0aGlzLl9zZXR0bGVQcm9taXNlMCh0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwLCB2YWx1ZSwgYml0RmllbGQpO1xuICAgICAgICAgICAgdGhpcy5fZnVsZmlsbFByb21pc2VzKGxlbiwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3NldExlbmd0aCgwKTtcbiAgICB9XG4gICAgdGhpcy5fY2xlYXJDYW5jZWxsYXRpb25EYXRhKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5fc2V0dGxlZFZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIGJpdEZpZWxkID0gdGhpcy5fYml0RmllbGQ7XG4gICAgaWYgKCgoYml0RmllbGQgJiAzMzU1NDQzMikgIT09IDApKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9yZWplY3Rpb25IYW5kbGVyMDtcbiAgICB9IGVsc2UgaWYgKCgoYml0RmllbGQgJiAxNjc3NzIxNikgIT09IDApKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9mdWxmaWxsbWVudEhhbmRsZXIwO1xuICAgIH1cbn07XG5cbmZ1bmN0aW9uIGRlZmVyUmVzb2x2ZSh2KSB7dGhpcy5wcm9taXNlLl9yZXNvbHZlQ2FsbGJhY2sodik7fVxuZnVuY3Rpb24gZGVmZXJSZWplY3Qodikge3RoaXMucHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2sodiwgZmFsc2UpO31cblxuUHJvbWlzZS5kZWZlciA9IFByb21pc2UucGVuZGluZyA9IGZ1bmN0aW9uKCkge1xuICAgIGRlYnVnLmRlcHJlY2F0ZWQoXCJQcm9taXNlLmRlZmVyXCIsIFwibmV3IFByb21pc2VcIik7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcHJvbWlzZTogcHJvbWlzZSxcbiAgICAgICAgcmVzb2x2ZTogZGVmZXJSZXNvbHZlLFxuICAgICAgICByZWplY3Q6IGRlZmVyUmVqZWN0XG4gICAgfTtcbn07XG5cbnV0aWwubm90RW51bWVyYWJsZVByb3AoUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgXCJfbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgbWFrZVNlbGZSZXNvbHV0aW9uRXJyb3IpO1xuXG5fZGVyZXFfKFwiLi9tZXRob2RcIikoUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbixcbiAgICBkZWJ1Zyk7XG5fZGVyZXFfKFwiLi9iaW5kXCIpKFByb21pc2UsIElOVEVSTkFMLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBkZWJ1Zyk7XG5fZGVyZXFfKFwiLi9jYW5jZWxcIikoUHJvbWlzZSwgUHJvbWlzZUFycmF5LCBhcGlSZWplY3Rpb24sIGRlYnVnKTtcbl9kZXJlcV8oXCIuL2RpcmVjdF9yZXNvbHZlXCIpKFByb21pc2UpO1xuX2RlcmVxXyhcIi4vc3luY2hyb25vdXNfaW5zcGVjdGlvblwiKShQcm9taXNlKTtcbl9kZXJlcV8oXCIuL2pvaW5cIikoXG4gICAgUHJvbWlzZSwgUHJvbWlzZUFycmF5LCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBJTlRFUk5BTCwgYXN5bmMsIGdldERvbWFpbik7XG5Qcm9taXNlLlByb21pc2UgPSBQcm9taXNlO1xuUHJvbWlzZS52ZXJzaW9uID0gXCIzLjUuMFwiO1xuX2RlcmVxXygnLi9tYXAuanMnKShQcm9taXNlLCBQcm9taXNlQXJyYXksIGFwaVJlamVjdGlvbiwgdHJ5Q29udmVydFRvUHJvbWlzZSwgSU5URVJOQUwsIGRlYnVnKTtcbl9kZXJlcV8oJy4vY2FsbF9nZXQuanMnKShQcm9taXNlKTtcbl9kZXJlcV8oJy4vdXNpbmcuanMnKShQcm9taXNlLCBhcGlSZWplY3Rpb24sIHRyeUNvbnZlcnRUb1Byb21pc2UsIGNyZWF0ZUNvbnRleHQsIElOVEVSTkFMLCBkZWJ1Zyk7XG5fZGVyZXFfKCcuL3RpbWVycy5qcycpKFByb21pc2UsIElOVEVSTkFMLCBkZWJ1Zyk7XG5fZGVyZXFfKCcuL2dlbmVyYXRvcnMuanMnKShQcm9taXNlLCBhcGlSZWplY3Rpb24sIElOVEVSTkFMLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBQcm94eWFibGUsIGRlYnVnKTtcbl9kZXJlcV8oJy4vbm9kZWlmeS5qcycpKFByb21pc2UpO1xuX2RlcmVxXygnLi9wcm9taXNpZnkuanMnKShQcm9taXNlLCBJTlRFUk5BTCk7XG5fZGVyZXFfKCcuL3Byb3BzLmpzJykoUHJvbWlzZSwgUHJvbWlzZUFycmF5LCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBhcGlSZWplY3Rpb24pO1xuX2RlcmVxXygnLi9yYWNlLmpzJykoUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbik7XG5fZGVyZXFfKCcuL3JlZHVjZS5qcycpKFByb21pc2UsIFByb21pc2VBcnJheSwgYXBpUmVqZWN0aW9uLCB0cnlDb252ZXJ0VG9Qcm9taXNlLCBJTlRFUk5BTCwgZGVidWcpO1xuX2RlcmVxXygnLi9zZXR0bGUuanMnKShQcm9taXNlLCBQcm9taXNlQXJyYXksIGRlYnVnKTtcbl9kZXJlcV8oJy4vc29tZS5qcycpKFByb21pc2UsIFByb21pc2VBcnJheSwgYXBpUmVqZWN0aW9uKTtcbl9kZXJlcV8oJy4vZmlsdGVyLmpzJykoUHJvbWlzZSwgSU5URVJOQUwpO1xuX2RlcmVxXygnLi9lYWNoLmpzJykoUHJvbWlzZSwgSU5URVJOQUwpO1xuX2RlcmVxXygnLi9hbnkuanMnKShQcm9taXNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIHV0aWwudG9GYXN0UHJvcGVydGllcyhQcm9taXNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICB1dGlsLnRvRmFzdFByb3BlcnRpZXMoUHJvbWlzZS5wcm90b3R5cGUpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZnVuY3Rpb24gZmlsbFR5cGVzKHZhbHVlKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICB2YXIgcCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgcC5fZnVsZmlsbG1lbnRIYW5kbGVyMCA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgIHAuX3JlamVjdGlvbkhhbmRsZXIwID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICBwLl9wcm9taXNlMCA9IHZhbHVlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgcC5fcmVjZWl2ZXIwID0gdmFsdWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIC8vIENvbXBsZXRlIHNsYWNrIHRyYWNraW5nLCBvcHQgb3V0IG9mIGZpZWxkLXR5cGUgdHJhY2tpbmcgYW5kICAgICAgICAgICBcbiAgICAvLyBzdGFiaWxpemUgbWFwICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKHthOiAxfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcyh7YjogMn0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXMoe2M6IDN9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKDEpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcyhmdW5jdGlvbigpe30pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBmaWxsVHlwZXModW5kZWZpbmVkKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgZmlsbFR5cGVzKGZhbHNlKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgIGZpbGxUeXBlcyhuZXcgUHJvbWlzZShJTlRFUk5BTCkpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICBkZWJ1Zy5zZXRCb3VuZHMoQXN5bmMuZmlyc3RMaW5lRXJyb3IsIHV0aWwubGFzdExpbmVFcnJvcik7ICAgICAgICAgICAgICAgXG4gICAgcmV0dXJuIFByb21pc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuXG59O1xuXG59LHtcIi4vYW55LmpzXCI6MSxcIi4vYXN5bmNcIjoyLFwiLi9iaW5kXCI6MyxcIi4vY2FsbF9nZXQuanNcIjo1LFwiLi9jYW5jZWxcIjo2LFwiLi9jYXRjaF9maWx0ZXJcIjo3LFwiLi9jb250ZXh0XCI6OCxcIi4vZGVidWdnYWJpbGl0eVwiOjksXCIuL2RpcmVjdF9yZXNvbHZlXCI6MTAsXCIuL2VhY2guanNcIjoxMSxcIi4vZXJyb3JzXCI6MTIsXCIuL2VzNVwiOjEzLFwiLi9maWx0ZXIuanNcIjoxNCxcIi4vZmluYWxseVwiOjE1LFwiLi9nZW5lcmF0b3JzLmpzXCI6MTYsXCIuL2pvaW5cIjoxNyxcIi4vbWFwLmpzXCI6MTgsXCIuL21ldGhvZFwiOjE5LFwiLi9ub2RlYmFja1wiOjIwLFwiLi9ub2RlaWZ5LmpzXCI6MjEsXCIuL3Byb21pc2VfYXJyYXlcIjoyMyxcIi4vcHJvbWlzaWZ5LmpzXCI6MjQsXCIuL3Byb3BzLmpzXCI6MjUsXCIuL3JhY2UuanNcIjoyNyxcIi4vcmVkdWNlLmpzXCI6MjgsXCIuL3NldHRsZS5qc1wiOjMwLFwiLi9zb21lLmpzXCI6MzEsXCIuL3N5bmNocm9ub3VzX2luc3BlY3Rpb25cIjozMixcIi4vdGhlbmFibGVzXCI6MzMsXCIuL3RpbWVycy5qc1wiOjM0LFwiLi91c2luZy5qc1wiOjM1LFwiLi91dGlsXCI6MzZ9XSwyMzpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwsIHRyeUNvbnZlcnRUb1Byb21pc2UsXG4gICAgYXBpUmVqZWN0aW9uLCBQcm94eWFibGUpIHtcbnZhciB1dGlsID0gX2RlcmVxXyhcIi4vdXRpbFwiKTtcbnZhciBpc0FycmF5ID0gdXRpbC5pc0FycmF5O1xuXG5mdW5jdGlvbiB0b1Jlc29sdXRpb25WYWx1ZSh2YWwpIHtcbiAgICBzd2l0Y2godmFsKSB7XG4gICAgY2FzZSAtMjogcmV0dXJuIFtdO1xuICAgIGNhc2UgLTM6IHJldHVybiB7fTtcbiAgICBjYXNlIC02OiByZXR1cm4gbmV3IE1hcCgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gUHJvbWlzZUFycmF5KHZhbHVlcykge1xuICAgIHZhciBwcm9taXNlID0gdGhpcy5fcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICBpZiAodmFsdWVzIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICBwcm9taXNlLl9wcm9wYWdhdGVGcm9tKHZhbHVlcywgMyk7XG4gICAgfVxuICAgIHByb21pc2UuX3NldE9uQ2FuY2VsKHRoaXMpO1xuICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlcztcbiAgICB0aGlzLl9sZW5ndGggPSAwO1xuICAgIHRoaXMuX3RvdGFsUmVzb2x2ZWQgPSAwO1xuICAgIHRoaXMuX2luaXQodW5kZWZpbmVkLCAtMik7XG59XG51dGlsLmluaGVyaXRzKFByb21pc2VBcnJheSwgUHJveHlhYmxlKTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUucHJvbWlzZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiBpbml0KF8sIHJlc29sdmVWYWx1ZUlmRW1wdHkpIHtcbiAgICB2YXIgdmFsdWVzID0gdHJ5Q29udmVydFRvUHJvbWlzZSh0aGlzLl92YWx1ZXMsIHRoaXMuX3Byb21pc2UpO1xuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHZhbHVlcyA9IHZhbHVlcy5fdGFyZ2V0KCk7XG4gICAgICAgIHZhciBiaXRGaWVsZCA9IHZhbHVlcy5fYml0RmllbGQ7XG4gICAgICAgIDtcbiAgICAgICAgdGhpcy5fdmFsdWVzID0gdmFsdWVzO1xuXG4gICAgICAgIGlmICgoKGJpdEZpZWxkICYgNTAzOTcxODQpID09PSAwKSkge1xuICAgICAgICAgICAgdGhpcy5fcHJvbWlzZS5fc2V0QXN5bmNHdWFyYW50ZWVkKCk7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWVzLl90aGVuKFxuICAgICAgICAgICAgICAgIGluaXQsXG4gICAgICAgICAgICAgICAgdGhpcy5fcmVqZWN0LFxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgICAgIHJlc29sdmVWYWx1ZUlmRW1wdHlcbiAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIGlmICgoKGJpdEZpZWxkICYgMzM1NTQ0MzIpICE9PSAwKSkge1xuICAgICAgICAgICAgdmFsdWVzID0gdmFsdWVzLl92YWx1ZSgpO1xuICAgICAgICB9IGVsc2UgaWYgKCgoYml0RmllbGQgJiAxNjc3NzIxNikgIT09IDApKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVqZWN0KHZhbHVlcy5fcmVhc29uKCkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2NhbmNlbCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhbHVlcyA9IHV0aWwuYXNBcnJheSh2YWx1ZXMpO1xuICAgIGlmICh2YWx1ZXMgPT09IG51bGwpIHtcbiAgICAgICAgdmFyIGVyciA9IGFwaVJlamVjdGlvbihcbiAgICAgICAgICAgIFwiZXhwZWN0aW5nIGFuIGFycmF5IG9yIGFuIGl0ZXJhYmxlIG9iamVjdCBidXQgZ290IFwiICsgdXRpbC5jbGFzc1N0cmluZyh2YWx1ZXMpKS5yZWFzb24oKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2soZXJyLCBmYWxzZSk7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodmFsdWVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAocmVzb2x2ZVZhbHVlSWZFbXB0eSA9PT0gLTUpIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmVFbXB0eUFycmF5KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9yZXNvbHZlKHRvUmVzb2x1dGlvblZhbHVlKHJlc29sdmVWYWx1ZUlmRW1wdHkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRoaXMuX2l0ZXJhdGUodmFsdWVzKTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX2l0ZXJhdGUgPSBmdW5jdGlvbih2YWx1ZXMpIHtcbiAgICB2YXIgbGVuID0gdGhpcy5nZXRBY3R1YWxMZW5ndGgodmFsdWVzLmxlbmd0aCk7XG4gICAgdGhpcy5fbGVuZ3RoID0gbGVuO1xuICAgIHRoaXMuX3ZhbHVlcyA9IHRoaXMuc2hvdWxkQ29weVZhbHVlcygpID8gbmV3IEFycmF5KGxlbikgOiB0aGlzLl92YWx1ZXM7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuX3Byb21pc2U7XG4gICAgdmFyIGlzUmVzb2x2ZWQgPSBmYWxzZTtcbiAgICB2YXIgYml0RmllbGQgPSBudWxsO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodmFsdWVzW2ldLCByZXN1bHQpO1xuXG4gICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICBtYXliZVByb21pc2UgPSBtYXliZVByb21pc2UuX3RhcmdldCgpO1xuICAgICAgICAgICAgYml0RmllbGQgPSBtYXliZVByb21pc2UuX2JpdEZpZWxkO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYml0RmllbGQgPSBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzUmVzb2x2ZWQpIHtcbiAgICAgICAgICAgIGlmIChiaXRGaWVsZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5zdXBwcmVzc1VuaGFuZGxlZFJlamVjdGlvbnMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChiaXRGaWVsZCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgaWYgKCgoYml0RmllbGQgJiA1MDM5NzE4NCkgPT09IDApKSB7XG4gICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlLl9wcm94eSh0aGlzLCBpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl92YWx1ZXNbaV0gPSBtYXliZVByb21pc2U7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCgoYml0RmllbGQgJiAzMzU1NDQzMikgIT09IDApKSB7XG4gICAgICAgICAgICAgICAgaXNSZXNvbHZlZCA9IHRoaXMuX3Byb21pc2VGdWxmaWxsZWQobWF5YmVQcm9taXNlLl92YWx1ZSgpLCBpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKChiaXRGaWVsZCAmIDE2Nzc3MjE2KSAhPT0gMCkpIHtcbiAgICAgICAgICAgICAgICBpc1Jlc29sdmVkID0gdGhpcy5fcHJvbWlzZVJlamVjdGVkKG1heWJlUHJvbWlzZS5fcmVhc29uKCksIGkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpc1Jlc29sdmVkID0gdGhpcy5fcHJvbWlzZUNhbmNlbGxlZChpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzUmVzb2x2ZWQgPSB0aGlzLl9wcm9taXNlRnVsZmlsbGVkKG1heWJlUHJvbWlzZSwgaSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFpc1Jlc29sdmVkKSByZXN1bHQuX3NldEFzeW5jR3VhcmFudGVlZCgpO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5faXNSZXNvbHZlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5fdmFsdWVzID09PSBudWxsO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fcHJvbWlzZS5fZnVsZmlsbCh2YWx1ZSk7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9jYW5jZWwgPSBmdW5jdGlvbigpIHtcbiAgICBpZiAodGhpcy5faXNSZXNvbHZlZCgpIHx8ICF0aGlzLl9wcm9taXNlLl9pc0NhbmNlbGxhYmxlKCkpIHJldHVybjtcbiAgICB0aGlzLl92YWx1ZXMgPSBudWxsO1xuICAgIHRoaXMuX3Byb21pc2UuX2NhbmNlbCgpO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVqZWN0ID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRoaXMuX3ZhbHVlcyA9IG51bGw7XG4gICAgdGhpcy5fcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2socmVhc29uLCBmYWxzZSk7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlRnVsZmlsbGVkID0gZnVuY3Rpb24gKHZhbHVlLCBpbmRleCkge1xuICAgIHRoaXMuX3ZhbHVlc1tpbmRleF0gPSB2YWx1ZTtcbiAgICB2YXIgdG90YWxSZXNvbHZlZCA9ICsrdGhpcy5fdG90YWxSZXNvbHZlZDtcbiAgICBpZiAodG90YWxSZXNvbHZlZCA+PSB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZUNhbmNlbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMuX2NhbmNlbCgpO1xuICAgIHJldHVybiB0cnVlO1xufTtcblxuUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID0gZnVuY3Rpb24gKHJlYXNvbikge1xuICAgIHRoaXMuX3RvdGFsUmVzb2x2ZWQrKztcbiAgICB0aGlzLl9yZWplY3QocmVhc29uKTtcbiAgICByZXR1cm4gdHJ1ZTtcbn07XG5cblByb21pc2VBcnJheS5wcm90b3R5cGUuX3Jlc3VsdENhbmNlbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHJldHVybjtcbiAgICB2YXIgdmFsdWVzID0gdGhpcy5fdmFsdWVzO1xuICAgIHRoaXMuX2NhbmNlbCgpO1xuICAgIGlmICh2YWx1ZXMgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHZhbHVlcy5jYW5jZWwoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlc1tpXSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZXNbaV0uY2FuY2VsKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLnNob3VsZENvcHlWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG59O1xuXG5Qcm9taXNlQXJyYXkucHJvdG90eXBlLmdldEFjdHVhbExlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgICByZXR1cm4gbGVuO1xufTtcblxucmV0dXJuIFByb21pc2VBcnJheTtcbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwyNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwpIHtcbnZhciBUSElTID0ge307XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgbm9kZWJhY2tGb3JQcm9taXNlID0gX2RlcmVxXyhcIi4vbm9kZWJhY2tcIik7XG52YXIgd2l0aEFwcGVuZGVkID0gdXRpbC53aXRoQXBwZW5kZWQ7XG52YXIgbWF5YmVXcmFwQXNFcnJvciA9IHV0aWwubWF5YmVXcmFwQXNFcnJvcjtcbnZhciBjYW5FdmFsdWF0ZSA9IHV0aWwuY2FuRXZhbHVhdGU7XG52YXIgVHlwZUVycm9yID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpLlR5cGVFcnJvcjtcbnZhciBkZWZhdWx0U3VmZml4ID0gXCJBc3luY1wiO1xudmFyIGRlZmF1bHRQcm9taXNpZmllZCA9IHtfX2lzUHJvbWlzaWZpZWRfXzogdHJ1ZX07XG52YXIgbm9Db3B5UHJvcHMgPSBbXG4gICAgXCJhcml0eVwiLCAgICBcImxlbmd0aFwiLFxuICAgIFwibmFtZVwiLFxuICAgIFwiYXJndW1lbnRzXCIsXG4gICAgXCJjYWxsZXJcIixcbiAgICBcImNhbGxlZVwiLFxuICAgIFwicHJvdG90eXBlXCIsXG4gICAgXCJfX2lzUHJvbWlzaWZpZWRfX1wiXG5dO1xudmFyIG5vQ29weVByb3BzUGF0dGVybiA9IG5ldyBSZWdFeHAoXCJeKD86XCIgKyBub0NvcHlQcm9wcy5qb2luKFwifFwiKSArIFwiKSRcIik7XG5cbnZhciBkZWZhdWx0RmlsdGVyID0gZnVuY3Rpb24obmFtZSkge1xuICAgIHJldHVybiB1dGlsLmlzSWRlbnRpZmllcihuYW1lKSAmJlxuICAgICAgICBuYW1lLmNoYXJBdCgwKSAhPT0gXCJfXCIgJiZcbiAgICAgICAgbmFtZSAhPT0gXCJjb25zdHJ1Y3RvclwiO1xufTtcblxuZnVuY3Rpb24gcHJvcHNGaWx0ZXIoa2V5KSB7XG4gICAgcmV0dXJuICFub0NvcHlQcm9wc1BhdHRlcm4udGVzdChrZXkpO1xufVxuXG5mdW5jdGlvbiBpc1Byb21pc2lmaWVkKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZuLl9faXNQcm9taXNpZmllZF9fID09PSB0cnVlO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBoYXNQcm9taXNpZmllZChvYmosIGtleSwgc3VmZml4KSB7XG4gICAgdmFyIHZhbCA9IHV0aWwuZ2V0RGF0YVByb3BlcnR5T3JEZWZhdWx0KG9iaiwga2V5ICsgc3VmZml4LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0UHJvbWlzaWZpZWQpO1xuICAgIHJldHVybiB2YWwgPyBpc1Byb21pc2lmaWVkKHZhbCkgOiBmYWxzZTtcbn1cbmZ1bmN0aW9uIGNoZWNrVmFsaWQocmV0LCBzdWZmaXgsIHN1ZmZpeFJlZ2V4cCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmV0Lmxlbmd0aDsgaSArPSAyKSB7XG4gICAgICAgIHZhciBrZXkgPSByZXRbaV07XG4gICAgICAgIGlmIChzdWZmaXhSZWdleHAudGVzdChrZXkpKSB7XG4gICAgICAgICAgICB2YXIga2V5V2l0aG91dEFzeW5jU3VmZml4ID0ga2V5LnJlcGxhY2Uoc3VmZml4UmVnZXhwLCBcIlwiKTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgcmV0Lmxlbmd0aDsgaiArPSAyKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJldFtqXSA9PT0ga2V5V2l0aG91dEFzeW5jU3VmZml4KSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgcHJvbWlzaWZ5IGFuIEFQSSB0aGF0IGhhcyBub3JtYWwgbWV0aG9kcyB3aXRoICclcyctc3VmZml4XFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFx1MDAwYVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZShcIiVzXCIsIHN1ZmZpeCkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZnVuY3Rpb24gcHJvbWlzaWZpYWJsZU1ldGhvZHMob2JqLCBzdWZmaXgsIHN1ZmZpeFJlZ2V4cCwgZmlsdGVyKSB7XG4gICAgdmFyIGtleXMgPSB1dGlsLmluaGVyaXRlZERhdGFLZXlzKG9iaik7XG4gICAgdmFyIHJldCA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgdmFyIHZhbHVlID0gb2JqW2tleV07XG4gICAgICAgIHZhciBwYXNzZXNEZWZhdWx0RmlsdGVyID0gZmlsdGVyID09PSBkZWZhdWx0RmlsdGVyXG4gICAgICAgICAgICA/IHRydWUgOiBkZWZhdWx0RmlsdGVyKGtleSwgdmFsdWUsIG9iaik7XG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgIWlzUHJvbWlzaWZpZWQodmFsdWUpICYmXG4gICAgICAgICAgICAhaGFzUHJvbWlzaWZpZWQob2JqLCBrZXksIHN1ZmZpeCkgJiZcbiAgICAgICAgICAgIGZpbHRlcihrZXksIHZhbHVlLCBvYmosIHBhc3Nlc0RlZmF1bHRGaWx0ZXIpKSB7XG4gICAgICAgICAgICByZXQucHVzaChrZXksIHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBjaGVja1ZhbGlkKHJldCwgc3VmZml4LCBzdWZmaXhSZWdleHApO1xuICAgIHJldHVybiByZXQ7XG59XG5cbnZhciBlc2NhcGVJZGVudFJlZ2V4ID0gZnVuY3Rpb24oc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oWyRdKS8sIFwiXFxcXCRcIik7XG59O1xuXG52YXIgbWFrZU5vZGVQcm9taXNpZmllZEV2YWw7XG5pZiAoIXRydWUpIHtcbnZhciBzd2l0Y2hDYXNlQXJndW1lbnRPcmRlciA9IGZ1bmN0aW9uKGxpa2VseUFyZ3VtZW50Q291bnQpIHtcbiAgICB2YXIgcmV0ID0gW2xpa2VseUFyZ3VtZW50Q291bnRdO1xuICAgIHZhciBtaW4gPSBNYXRoLm1heCgwLCBsaWtlbHlBcmd1bWVudENvdW50IC0gMSAtIDMpO1xuICAgIGZvcih2YXIgaSA9IGxpa2VseUFyZ3VtZW50Q291bnQgLSAxOyBpID49IG1pbjsgLS1pKSB7XG4gICAgICAgIHJldC5wdXNoKGkpO1xuICAgIH1cbiAgICBmb3IodmFyIGkgPSBsaWtlbHlBcmd1bWVudENvdW50ICsgMTsgaSA8PSAzOyArK2kpIHtcbiAgICAgICAgcmV0LnB1c2goaSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG52YXIgYXJndW1lbnRTZXF1ZW5jZSA9IGZ1bmN0aW9uKGFyZ3VtZW50Q291bnQpIHtcbiAgICByZXR1cm4gdXRpbC5maWxsZWRSYW5nZShhcmd1bWVudENvdW50LCBcIl9hcmdcIiwgXCJcIik7XG59O1xuXG52YXIgcGFyYW1ldGVyRGVjbGFyYXRpb24gPSBmdW5jdGlvbihwYXJhbWV0ZXJDb3VudCkge1xuICAgIHJldHVybiB1dGlsLmZpbGxlZFJhbmdlKFxuICAgICAgICBNYXRoLm1heChwYXJhbWV0ZXJDb3VudCwgMyksIFwiX2FyZ1wiLCBcIlwiKTtcbn07XG5cbnZhciBwYXJhbWV0ZXJDb3VudCA9IGZ1bmN0aW9uKGZuKSB7XG4gICAgaWYgKHR5cGVvZiBmbi5sZW5ndGggPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KE1hdGgubWluKGZuLmxlbmd0aCwgMTAyMyArIDEpLCAwKTtcbiAgICB9XG4gICAgcmV0dXJuIDA7XG59O1xuXG5tYWtlTm9kZVByb21pc2lmaWVkRXZhbCA9XG5mdW5jdGlvbihjYWxsYmFjaywgcmVjZWl2ZXIsIG9yaWdpbmFsTmFtZSwgZm4sIF8sIG11bHRpQXJncykge1xuICAgIHZhciBuZXdQYXJhbWV0ZXJDb3VudCA9IE1hdGgubWF4KDAsIHBhcmFtZXRlckNvdW50KGZuKSAtIDEpO1xuICAgIHZhciBhcmd1bWVudE9yZGVyID0gc3dpdGNoQ2FzZUFyZ3VtZW50T3JkZXIobmV3UGFyYW1ldGVyQ291bnQpO1xuICAgIHZhciBzaG91bGRQcm94eVRoaXMgPSB0eXBlb2YgY2FsbGJhY2sgPT09IFwic3RyaW5nXCIgfHwgcmVjZWl2ZXIgPT09IFRISVM7XG5cbiAgICBmdW5jdGlvbiBnZW5lcmF0ZUNhbGxGb3JBcmd1bWVudENvdW50KGNvdW50KSB7XG4gICAgICAgIHZhciBhcmdzID0gYXJndW1lbnRTZXF1ZW5jZShjb3VudCkuam9pbihcIiwgXCIpO1xuICAgICAgICB2YXIgY29tbWEgPSBjb3VudCA+IDAgPyBcIiwgXCIgOiBcIlwiO1xuICAgICAgICB2YXIgcmV0O1xuICAgICAgICBpZiAoc2hvdWxkUHJveHlUaGlzKSB7XG4gICAgICAgICAgICByZXQgPSBcInJldCA9IGNhbGxiYWNrLmNhbGwodGhpcywge3thcmdzfX0sIG5vZGViYWNrKTsgYnJlYWs7XFxuXCI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXQgPSByZWNlaXZlciA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgPyBcInJldCA9IGNhbGxiYWNrKHt7YXJnc319LCBub2RlYmFjayk7IGJyZWFrO1xcblwiXG4gICAgICAgICAgICAgICAgOiBcInJldCA9IGNhbGxiYWNrLmNhbGwocmVjZWl2ZXIsIHt7YXJnc319LCBub2RlYmFjayk7IGJyZWFrO1xcblwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQucmVwbGFjZShcInt7YXJnc319XCIsIGFyZ3MpLnJlcGxhY2UoXCIsIFwiLCBjb21tYSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2VuZXJhdGVBcmd1bWVudFN3aXRjaENhc2UoKSB7XG4gICAgICAgIHZhciByZXQgPSBcIlwiO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50T3JkZXIubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHJldCArPSBcImNhc2UgXCIgKyBhcmd1bWVudE9yZGVyW2ldICtcIjpcIiArXG4gICAgICAgICAgICAgICAgZ2VuZXJhdGVDYWxsRm9yQXJndW1lbnRDb3VudChhcmd1bWVudE9yZGVyW2ldKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldCArPSBcIiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICBkZWZhdWx0OiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgdmFyIGFyZ3MgPSBuZXcgQXJyYXkobGVuICsgMSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgdmFyIGkgPSAwOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgICAgYXJnc1tpXSA9IGFyZ3VtZW50c1tpXTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgYXJnc1tpXSA9IG5vZGViYWNrOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgW0NvZGVGb3JDYWxsXSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICAgICAgYnJlYWs7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcXG5cXFxuICAgICAgICBcIi5yZXBsYWNlKFwiW0NvZGVGb3JDYWxsXVwiLCAoc2hvdWxkUHJveHlUaGlzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gXCJyZXQgPSBjYWxsYmFjay5hcHBseSh0aGlzLCBhcmdzKTtcXG5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwicmV0ID0gY2FsbGJhY2suYXBwbHkocmVjZWl2ZXIsIGFyZ3MpO1xcblwiKSk7XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfVxuXG4gICAgdmFyIGdldEZ1bmN0aW9uQ29kZSA9IHR5cGVvZiBjYWxsYmFjayA9PT0gXCJzdHJpbmdcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IChcInRoaXMgIT0gbnVsbCA/IHRoaXNbJ1wiK2NhbGxiYWNrK1wiJ10gOiBmblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IFwiZm5cIjtcbiAgICB2YXIgYm9keSA9IFwiJ3VzZSBzdHJpY3QnOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgIHZhciByZXQgPSBmdW5jdGlvbiAoUGFyYW1ldGVycykgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICAndXNlIHN0cmljdCc7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICBwcm9taXNlLl9jYXB0dXJlU3RhY2tUcmFjZSgpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxcblxcXG4gICAgICAgICAgICB2YXIgbm9kZWJhY2sgPSBub2RlYmFja0ZvclByb21pc2UocHJvbWlzZSwgXCIgKyBtdWx0aUFyZ3MgKyBcIik7ICAgXFxuXFxcbiAgICAgICAgICAgIHZhciByZXQ7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHZhciBjYWxsYmFjayA9IHRyeUNhdGNoKFtHZXRGdW5jdGlvbkNvZGVdKTsgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIHN3aXRjaChsZW4pIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBbQ29kZUZvclN3aXRjaENhc2VdICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGlmIChyZXQgPT09IGVycm9yT2JqKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgICAgICBwcm9taXNlLl9yZWplY3RDYWxsYmFjayhtYXliZVdyYXBBc0Vycm9yKHJldC5lKSwgdHJ1ZSwgdHJ1ZSk7XFxuXFxcbiAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgICAgIGlmICghcHJvbWlzZS5faXNGYXRlU2VhbGVkKCkpIHByb21pc2UuX3NldEFzeW5jR3VhcmFudGVlZCgpOyAgICAgXFxuXFxcbiAgICAgICAgICAgIHJldHVybiBwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgbm90RW51bWVyYWJsZVByb3AocmV0LCAnX19pc1Byb21pc2lmaWVkX18nLCB0cnVlKTsgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICAgICAgcmV0dXJuIHJldDsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXFxuXFxcbiAgICBcIi5yZXBsYWNlKFwiW0NvZGVGb3JTd2l0Y2hDYXNlXVwiLCBnZW5lcmF0ZUFyZ3VtZW50U3dpdGNoQ2FzZSgpKVxuICAgICAgICAucmVwbGFjZShcIltHZXRGdW5jdGlvbkNvZGVdXCIsIGdldEZ1bmN0aW9uQ29kZSk7XG4gICAgYm9keSA9IGJvZHkucmVwbGFjZShcIlBhcmFtZXRlcnNcIiwgcGFyYW1ldGVyRGVjbGFyYXRpb24obmV3UGFyYW1ldGVyQ291bnQpKTtcbiAgICByZXR1cm4gbmV3IEZ1bmN0aW9uKFwiUHJvbWlzZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmblwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyZWNlaXZlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aXRoQXBwZW5kZWRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWF5YmVXcmFwQXNFcnJvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJub2RlYmFja0ZvclByb21pc2VcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidHJ5Q2F0Y2hcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZXJyb3JPYmpcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibm90RW51bWVyYWJsZVByb3BcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiSU5URVJOQUxcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvZHkpKFxuICAgICAgICAgICAgICAgICAgICBQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICBmbixcbiAgICAgICAgICAgICAgICAgICAgcmVjZWl2ZXIsXG4gICAgICAgICAgICAgICAgICAgIHdpdGhBcHBlbmRlZCxcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVXcmFwQXNFcnJvcixcbiAgICAgICAgICAgICAgICAgICAgbm9kZWJhY2tGb3JQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICB1dGlsLnRyeUNhdGNoLFxuICAgICAgICAgICAgICAgICAgICB1dGlsLmVycm9yT2JqLFxuICAgICAgICAgICAgICAgICAgICB1dGlsLm5vdEVudW1lcmFibGVQcm9wLFxuICAgICAgICAgICAgICAgICAgICBJTlRFUk5BTCk7XG59O1xufVxuXG5mdW5jdGlvbiBtYWtlTm9kZVByb21pc2lmaWVkQ2xvc3VyZShjYWxsYmFjaywgcmVjZWl2ZXIsIF8sIGZuLCBfXywgbXVsdGlBcmdzKSB7XG4gICAgdmFyIGRlZmF1bHRUaGlzID0gKGZ1bmN0aW9uKCkge3JldHVybiB0aGlzO30pKCk7XG4gICAgdmFyIG1ldGhvZCA9IGNhbGxiYWNrO1xuICAgIGlmICh0eXBlb2YgbWV0aG9kID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGNhbGxiYWNrID0gZm47XG4gICAgfVxuICAgIGZ1bmN0aW9uIHByb21pc2lmaWVkKCkge1xuICAgICAgICB2YXIgX3JlY2VpdmVyID0gcmVjZWl2ZXI7XG4gICAgICAgIGlmIChyZWNlaXZlciA9PT0gVEhJUykgX3JlY2VpdmVyID0gdGhpcztcbiAgICAgICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgICAgIHByb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgICAgIHZhciBjYiA9IHR5cGVvZiBtZXRob2QgPT09IFwic3RyaW5nXCIgJiYgdGhpcyAhPT0gZGVmYXVsdFRoaXNcbiAgICAgICAgICAgID8gdGhpc1ttZXRob2RdIDogY2FsbGJhY2s7XG4gICAgICAgIHZhciBmbiA9IG5vZGViYWNrRm9yUHJvbWlzZShwcm9taXNlLCBtdWx0aUFyZ3MpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgY2IuYXBwbHkoX3JlY2VpdmVyLCB3aXRoQXBwZW5kZWQoYXJndW1lbnRzLCBmbikpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKG1heWJlV3JhcEFzRXJyb3IoZSksIHRydWUsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghcHJvbWlzZS5faXNGYXRlU2VhbGVkKCkpIHByb21pc2UuX3NldEFzeW5jR3VhcmFudGVlZCgpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gICAgdXRpbC5ub3RFbnVtZXJhYmxlUHJvcChwcm9taXNpZmllZCwgXCJfX2lzUHJvbWlzaWZpZWRfX1wiLCB0cnVlKTtcbiAgICByZXR1cm4gcHJvbWlzaWZpZWQ7XG59XG5cbnZhciBtYWtlTm9kZVByb21pc2lmaWVkID0gY2FuRXZhbHVhdGVcbiAgICA/IG1ha2VOb2RlUHJvbWlzaWZpZWRFdmFsXG4gICAgOiBtYWtlTm9kZVByb21pc2lmaWVkQ2xvc3VyZTtcblxuZnVuY3Rpb24gcHJvbWlzaWZ5QWxsKG9iaiwgc3VmZml4LCBmaWx0ZXIsIHByb21pc2lmaWVyLCBtdWx0aUFyZ3MpIHtcbiAgICB2YXIgc3VmZml4UmVnZXhwID0gbmV3IFJlZ0V4cChlc2NhcGVJZGVudFJlZ2V4KHN1ZmZpeCkgKyBcIiRcIik7XG4gICAgdmFyIG1ldGhvZHMgPVxuICAgICAgICBwcm9taXNpZmlhYmxlTWV0aG9kcyhvYmosIHN1ZmZpeCwgc3VmZml4UmVnZXhwLCBmaWx0ZXIpO1xuXG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IG1ldGhvZHMubGVuZ3RoOyBpIDwgbGVuOyBpKz0gMikge1xuICAgICAgICB2YXIga2V5ID0gbWV0aG9kc1tpXTtcbiAgICAgICAgdmFyIGZuID0gbWV0aG9kc1tpKzFdO1xuICAgICAgICB2YXIgcHJvbWlzaWZpZWRLZXkgPSBrZXkgKyBzdWZmaXg7XG4gICAgICAgIGlmIChwcm9taXNpZmllciA9PT0gbWFrZU5vZGVQcm9taXNpZmllZCkge1xuICAgICAgICAgICAgb2JqW3Byb21pc2lmaWVkS2V5XSA9XG4gICAgICAgICAgICAgICAgbWFrZU5vZGVQcm9taXNpZmllZChrZXksIFRISVMsIGtleSwgZm4sIHN1ZmZpeCwgbXVsdGlBcmdzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBwcm9taXNpZmllZCA9IHByb21pc2lmaWVyKGZuLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFrZU5vZGVQcm9taXNpZmllZChrZXksIFRISVMsIGtleSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbiwgc3VmZml4LCBtdWx0aUFyZ3MpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB1dGlsLm5vdEVudW1lcmFibGVQcm9wKHByb21pc2lmaWVkLCBcIl9faXNQcm9taXNpZmllZF9fXCIsIHRydWUpO1xuICAgICAgICAgICAgb2JqW3Byb21pc2lmaWVkS2V5XSA9IHByb21pc2lmaWVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIHV0aWwudG9GYXN0UHJvcGVydGllcyhvYmopO1xuICAgIHJldHVybiBvYmo7XG59XG5cbmZ1bmN0aW9uIHByb21pc2lmeShjYWxsYmFjaywgcmVjZWl2ZXIsIG11bHRpQXJncykge1xuICAgIHJldHVybiBtYWtlTm9kZVByb21pc2lmaWVkKGNhbGxiYWNrLCByZWNlaXZlciwgdW5kZWZpbmVkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjaywgbnVsbCwgbXVsdGlBcmdzKTtcbn1cblxuUHJvbWlzZS5wcm9taXNpZnkgPSBmdW5jdGlvbiAoZm4sIG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImV4cGVjdGluZyBhIGZ1bmN0aW9uIGJ1dCBnb3QgXCIgKyB1dGlsLmNsYXNzU3RyaW5nKGZuKSk7XG4gICAgfVxuICAgIGlmIChpc1Byb21pc2lmaWVkKGZuKSkge1xuICAgICAgICByZXR1cm4gZm47XG4gICAgfVxuICAgIG9wdGlvbnMgPSBPYmplY3Qob3B0aW9ucyk7XG4gICAgdmFyIHJlY2VpdmVyID0gb3B0aW9ucy5jb250ZXh0ID09PSB1bmRlZmluZWQgPyBUSElTIDogb3B0aW9ucy5jb250ZXh0O1xuICAgIHZhciBtdWx0aUFyZ3MgPSAhIW9wdGlvbnMubXVsdGlBcmdzO1xuICAgIHZhciByZXQgPSBwcm9taXNpZnkoZm4sIHJlY2VpdmVyLCBtdWx0aUFyZ3MpO1xuICAgIHV0aWwuY29weURlc2NyaXB0b3JzKGZuLCByZXQsIHByb3BzRmlsdGVyKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm9taXNpZnlBbGwgPSBmdW5jdGlvbiAodGFyZ2V0LCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJ0aGUgdGFyZ2V0IG9mIHByb21pc2lmeUFsbCBtdXN0IGJlIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFx1MDAwYVwiKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IE9iamVjdChvcHRpb25zKTtcbiAgICB2YXIgbXVsdGlBcmdzID0gISFvcHRpb25zLm11bHRpQXJncztcbiAgICB2YXIgc3VmZml4ID0gb3B0aW9ucy5zdWZmaXg7XG4gICAgaWYgKHR5cGVvZiBzdWZmaXggIT09IFwic3RyaW5nXCIpIHN1ZmZpeCA9IGRlZmF1bHRTdWZmaXg7XG4gICAgdmFyIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgIGlmICh0eXBlb2YgZmlsdGVyICE9PSBcImZ1bmN0aW9uXCIpIGZpbHRlciA9IGRlZmF1bHRGaWx0ZXI7XG4gICAgdmFyIHByb21pc2lmaWVyID0gb3B0aW9ucy5wcm9taXNpZmllcjtcbiAgICBpZiAodHlwZW9mIHByb21pc2lmaWVyICE9PSBcImZ1bmN0aW9uXCIpIHByb21pc2lmaWVyID0gbWFrZU5vZGVQcm9taXNpZmllZDtcblxuICAgIGlmICghdXRpbC5pc0lkZW50aWZpZXIoc3VmZml4KSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcInN1ZmZpeCBtdXN0IGJlIGEgdmFsaWQgaWRlbnRpZmllclxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcdTAwMGFcIik7XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSB1dGlsLmluaGVyaXRlZERhdGFLZXlzKHRhcmdldCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRhcmdldFtrZXlzW2ldXTtcbiAgICAgICAgaWYgKGtleXNbaV0gIT09IFwiY29uc3RydWN0b3JcIiAmJlxuICAgICAgICAgICAgdXRpbC5pc0NsYXNzKHZhbHVlKSkge1xuICAgICAgICAgICAgcHJvbWlzaWZ5QWxsKHZhbHVlLnByb3RvdHlwZSwgc3VmZml4LCBmaWx0ZXIsIHByb21pc2lmaWVyLFxuICAgICAgICAgICAgICAgIG11bHRpQXJncyk7XG4gICAgICAgICAgICBwcm9taXNpZnlBbGwodmFsdWUsIHN1ZmZpeCwgZmlsdGVyLCBwcm9taXNpZmllciwgbXVsdGlBcmdzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9taXNpZnlBbGwodGFyZ2V0LCBzdWZmaXgsIGZpbHRlciwgcHJvbWlzaWZpZXIsIG11bHRpQXJncyk7XG59O1xufTtcblxuXG59LHtcIi4vZXJyb3JzXCI6MTIsXCIuL25vZGViYWNrXCI6MjAsXCIuL3V0aWxcIjozNn1dLDI1OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgICBQcm9taXNlLCBQcm9taXNlQXJyYXksIHRyeUNvbnZlcnRUb1Byb21pc2UsIGFwaVJlamVjdGlvbikge1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsXCIpO1xudmFyIGlzT2JqZWN0ID0gdXRpbC5pc09iamVjdDtcbnZhciBlczUgPSBfZGVyZXFfKFwiLi9lczVcIik7XG52YXIgRXM2TWFwO1xuaWYgKHR5cGVvZiBNYXAgPT09IFwiZnVuY3Rpb25cIikgRXM2TWFwID0gTWFwO1xuXG52YXIgbWFwVG9FbnRyaWVzID0gKGZ1bmN0aW9uKCkge1xuICAgIHZhciBpbmRleCA9IDA7XG4gICAgdmFyIHNpemUgPSAwO1xuXG4gICAgZnVuY3Rpb24gZXh0cmFjdEVudHJ5KHZhbHVlLCBrZXkpIHtcbiAgICAgICAgdGhpc1tpbmRleF0gPSB2YWx1ZTtcbiAgICAgICAgdGhpc1tpbmRleCArIHNpemVdID0ga2V5O1xuICAgICAgICBpbmRleCsrO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBtYXBUb0VudHJpZXMobWFwKSB7XG4gICAgICAgIHNpemUgPSBtYXAuc2l6ZTtcbiAgICAgICAgaW5kZXggPSAwO1xuICAgICAgICB2YXIgcmV0ID0gbmV3IEFycmF5KG1hcC5zaXplICogMik7XG4gICAgICAgIG1hcC5mb3JFYWNoKGV4dHJhY3RFbnRyeSwgcmV0KTtcbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9O1xufSkoKTtcblxudmFyIGVudHJpZXNUb01hcCA9IGZ1bmN0aW9uKGVudHJpZXMpIHtcbiAgICB2YXIgcmV0ID0gbmV3IEVzNk1hcCgpO1xuICAgIHZhciBsZW5ndGggPSBlbnRyaWVzLmxlbmd0aCAvIDIgfCAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IGVudHJpZXNbbGVuZ3RoICsgaV07XG4gICAgICAgIHZhciB2YWx1ZSA9IGVudHJpZXNbaV07XG4gICAgICAgIHJldC5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5KG9iaikge1xuICAgIHZhciBpc01hcCA9IGZhbHNlO1xuICAgIHZhciBlbnRyaWVzO1xuICAgIGlmIChFczZNYXAgIT09IHVuZGVmaW5lZCAmJiBvYmogaW5zdGFuY2VvZiBFczZNYXApIHtcbiAgICAgICAgZW50cmllcyA9IG1hcFRvRW50cmllcyhvYmopO1xuICAgICAgICBpc01hcCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGtleXMgPSBlczUua2V5cyhvYmopO1xuICAgICAgICB2YXIgbGVuID0ga2V5cy5sZW5ndGg7XG4gICAgICAgIGVudHJpZXMgPSBuZXcgQXJyYXkobGVuICogMik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICAgICAgZW50cmllc1tpXSA9IG9ialtrZXldO1xuICAgICAgICAgICAgZW50cmllc1tpICsgbGVuXSA9IGtleTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLmNvbnN0cnVjdG9yJChlbnRyaWVzKTtcbiAgICB0aGlzLl9pc01hcCA9IGlzTWFwO1xuICAgIHRoaXMuX2luaXQkKHVuZGVmaW5lZCwgaXNNYXAgPyAtNiA6IC0zKTtcbn1cbnV0aWwuaW5oZXJpdHMoUHJvcGVydGllc1Byb21pc2VBcnJheSwgUHJvbWlzZUFycmF5KTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoKSB7fTtcblxuUHJvcGVydGllc1Byb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgdGhpcy5fdmFsdWVzW2luZGV4XSA9IHZhbHVlO1xuICAgIHZhciB0b3RhbFJlc29sdmVkID0gKyt0aGlzLl90b3RhbFJlc29sdmVkO1xuICAgIGlmICh0b3RhbFJlc29sdmVkID49IHRoaXMuX2xlbmd0aCkge1xuICAgICAgICB2YXIgdmFsO1xuICAgICAgICBpZiAodGhpcy5faXNNYXApIHtcbiAgICAgICAgICAgIHZhbCA9IGVudHJpZXNUb01hcCh0aGlzLl92YWx1ZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFsID0ge307XG4gICAgICAgICAgICB2YXIga2V5T2Zmc2V0ID0gdGhpcy5sZW5ndGgoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSB0aGlzLmxlbmd0aCgpOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YWxbdGhpcy5fdmFsdWVzW2kgKyBrZXlPZmZzZXRdXSA9IHRoaXMuX3ZhbHVlc1tpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9yZXNvbHZlKHZhbCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5Qcm9wZXJ0aWVzUHJvbWlzZUFycmF5LnByb3RvdHlwZS5zaG91bGRDb3B5VmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBmYWxzZTtcbn07XG5cblByb3BlcnRpZXNQcm9taXNlQXJyYXkucHJvdG90eXBlLmdldEFjdHVhbExlbmd0aCA9IGZ1bmN0aW9uIChsZW4pIHtcbiAgICByZXR1cm4gbGVuID4+IDE7XG59O1xuXG5mdW5jdGlvbiBwcm9wcyhwcm9taXNlcykge1xuICAgIHZhciByZXQ7XG4gICAgdmFyIGNhc3RWYWx1ZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocHJvbWlzZXMpO1xuXG4gICAgaWYgKCFpc09iamVjdChjYXN0VmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJjYW5ub3QgYXdhaXQgcHJvcGVydGllcyBvZiBhIG5vbi1vYmplY3RcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXHUwMDBhXCIpO1xuICAgIH0gZWxzZSBpZiAoY2FzdFZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICByZXQgPSBjYXN0VmFsdWUuX3RoZW4oXG4gICAgICAgICAgICBQcm9taXNlLnByb3BzLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldCA9IG5ldyBQcm9wZXJ0aWVzUHJvbWlzZUFycmF5KGNhc3RWYWx1ZSkucHJvbWlzZSgpO1xuICAgIH1cblxuICAgIGlmIChjYXN0VmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHJldC5fcHJvcGFnYXRlRnJvbShjYXN0VmFsdWUsIDIpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5Qcm9taXNlLnByb3RvdHlwZS5wcm9wcyA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcHJvcHModGhpcyk7XG59O1xuXG5Qcm9taXNlLnByb3BzID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgcmV0dXJuIHByb3BzKHByb21pc2VzKTtcbn07XG59O1xuXG59LHtcIi4vZXM1XCI6MTMsXCIuL3V0aWxcIjozNn1dLDI2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xuZnVuY3Rpb24gYXJyYXlNb3ZlKHNyYywgc3JjSW5kZXgsIGRzdCwgZHN0SW5kZXgsIGxlbikge1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbGVuOyArK2opIHtcbiAgICAgICAgZHN0W2ogKyBkc3RJbmRleF0gPSBzcmNbaiArIHNyY0luZGV4XTtcbiAgICAgICAgc3JjW2ogKyBzcmNJbmRleF0gPSB2b2lkIDA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBRdWV1ZShjYXBhY2l0eSkge1xuICAgIHRoaXMuX2NhcGFjaXR5ID0gY2FwYWNpdHk7XG4gICAgdGhpcy5fbGVuZ3RoID0gMDtcbiAgICB0aGlzLl9mcm9udCA9IDA7XG59XG5cblF1ZXVlLnByb3RvdHlwZS5fd2lsbEJlT3ZlckNhcGFjaXR5ID0gZnVuY3Rpb24gKHNpemUpIHtcbiAgICByZXR1cm4gdGhpcy5fY2FwYWNpdHkgPCBzaXplO1xufTtcblxuUXVldWUucHJvdG90eXBlLl9wdXNoT25lID0gZnVuY3Rpb24gKGFyZykge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCgpO1xuICAgIHRoaXMuX2NoZWNrQ2FwYWNpdHkobGVuZ3RoICsgMSk7XG4gICAgdmFyIGkgPSAodGhpcy5fZnJvbnQgKyBsZW5ndGgpICYgKHRoaXMuX2NhcGFjaXR5IC0gMSk7XG4gICAgdGhpc1tpXSA9IGFyZztcbiAgICB0aGlzLl9sZW5ndGggPSBsZW5ndGggKyAxO1xufTtcblxuUXVldWUucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoZm4sIHJlY2VpdmVyLCBhcmcpIHtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5sZW5ndGgoKSArIDM7XG4gICAgaWYgKHRoaXMuX3dpbGxCZU92ZXJDYXBhY2l0eShsZW5ndGgpKSB7XG4gICAgICAgIHRoaXMuX3B1c2hPbmUoZm4pO1xuICAgICAgICB0aGlzLl9wdXNoT25lKHJlY2VpdmVyKTtcbiAgICAgICAgdGhpcy5fcHVzaE9uZShhcmcpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciBqID0gdGhpcy5fZnJvbnQgKyBsZW5ndGggLSAzO1xuICAgIHRoaXMuX2NoZWNrQ2FwYWNpdHkobGVuZ3RoKTtcbiAgICB2YXIgd3JhcE1hc2sgPSB0aGlzLl9jYXBhY2l0eSAtIDE7XG4gICAgdGhpc1soaiArIDApICYgd3JhcE1hc2tdID0gZm47XG4gICAgdGhpc1soaiArIDEpICYgd3JhcE1hc2tdID0gcmVjZWl2ZXI7XG4gICAgdGhpc1soaiArIDIpICYgd3JhcE1hc2tdID0gYXJnO1xuICAgIHRoaXMuX2xlbmd0aCA9IGxlbmd0aDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udCxcbiAgICAgICAgcmV0ID0gdGhpc1tmcm9udF07XG5cbiAgICB0aGlzW2Zyb250XSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLl9mcm9udCA9IChmcm9udCArIDEpICYgKHRoaXMuX2NhcGFjaXR5IC0gMSk7XG4gICAgdGhpcy5fbGVuZ3RoLS07XG4gICAgcmV0dXJuIHJldDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5sZW5ndGggPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2xlbmd0aDtcbn07XG5cblF1ZXVlLnByb3RvdHlwZS5fY2hlY2tDYXBhY2l0eSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gICAgaWYgKHRoaXMuX2NhcGFjaXR5IDwgc2l6ZSkge1xuICAgICAgICB0aGlzLl9yZXNpemVUbyh0aGlzLl9jYXBhY2l0eSA8PCAxKTtcbiAgICB9XG59O1xuXG5RdWV1ZS5wcm90b3R5cGUuX3Jlc2l6ZVRvID0gZnVuY3Rpb24gKGNhcGFjaXR5KSB7XG4gICAgdmFyIG9sZENhcGFjaXR5ID0gdGhpcy5fY2FwYWNpdHk7XG4gICAgdGhpcy5fY2FwYWNpdHkgPSBjYXBhY2l0eTtcbiAgICB2YXIgZnJvbnQgPSB0aGlzLl9mcm9udDtcbiAgICB2YXIgbGVuZ3RoID0gdGhpcy5fbGVuZ3RoO1xuICAgIHZhciBtb3ZlSXRlbXNDb3VudCA9IChmcm9udCArIGxlbmd0aCkgJiAob2xkQ2FwYWNpdHkgLSAxKTtcbiAgICBhcnJheU1vdmUodGhpcywgMCwgdGhpcywgb2xkQ2FwYWNpdHksIG1vdmVJdGVtc0NvdW50KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gUXVldWU7XG5cbn0se31dLDI3OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihcbiAgICBQcm9taXNlLCBJTlRFUk5BTCwgdHJ5Q29udmVydFRvUHJvbWlzZSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG5cbnZhciByYWNlTGF0ZXIgPSBmdW5jdGlvbiAocHJvbWlzZSkge1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24oYXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIHJhY2UoYXJyYXksIHByb21pc2UpO1xuICAgIH0pO1xufTtcblxuZnVuY3Rpb24gcmFjZShwcm9taXNlcywgcGFyZW50KSB7XG4gICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UocHJvbWlzZXMpO1xuXG4gICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgcmV0dXJuIHJhY2VMYXRlcihtYXliZVByb21pc2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHByb21pc2VzID0gdXRpbC5hc0FycmF5KHByb21pc2VzKTtcbiAgICAgICAgaWYgKHByb21pc2VzID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhbiBhcnJheSBvciBhbiBpdGVyYWJsZSBvYmplY3QgYnV0IGdvdCBcIiArIHV0aWwuY2xhc3NTdHJpbmcocHJvbWlzZXMpKTtcbiAgICB9XG5cbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgIGlmIChwYXJlbnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXQuX3Byb3BhZ2F0ZUZyb20ocGFyZW50LCAzKTtcbiAgICB9XG4gICAgdmFyIGZ1bGZpbGwgPSByZXQuX2Z1bGZpbGw7XG4gICAgdmFyIHJlamVjdCA9IHJldC5fcmVqZWN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBwcm9taXNlcy5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgICAgICB2YXIgdmFsID0gcHJvbWlzZXNbaV07XG5cbiAgICAgICAgaWYgKHZhbCA9PT0gdW5kZWZpbmVkICYmICEoaSBpbiBwcm9taXNlcykpIHtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgUHJvbWlzZS5jYXN0KHZhbCkuX3RoZW4oZnVsZmlsbCwgcmVqZWN0LCB1bmRlZmluZWQsIHJldCwgbnVsbCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG59XG5cblByb21pc2UucmFjZSA9IGZ1bmN0aW9uIChwcm9taXNlcykge1xuICAgIHJldHVybiByYWNlKHByb21pc2VzLCB1bmRlZmluZWQpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUucmFjZSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gcmFjZSh0aGlzLCB1bmRlZmluZWQpO1xufTtcblxufTtcblxufSx7XCIuL3V0aWxcIjozNn1dLDI4OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9taXNlQXJyYXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGFwaVJlamVjdGlvbixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHJ5Q29udmVydFRvUHJvbWlzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgSU5URVJOQUwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKSB7XG52YXIgZ2V0RG9tYWluID0gUHJvbWlzZS5fZ2V0RG9tYWluO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsXCIpO1xudmFyIHRyeUNhdGNoID0gdXRpbC50cnlDYXRjaDtcblxuZnVuY3Rpb24gUmVkdWN0aW9uUHJvbWlzZUFycmF5KHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCBfZWFjaCkge1xuICAgIHRoaXMuY29uc3RydWN0b3IkKHByb21pc2VzKTtcbiAgICB2YXIgZG9tYWluID0gZ2V0RG9tYWluKCk7XG4gICAgdGhpcy5fZm4gPSBkb21haW4gPT09IG51bGwgPyBmbiA6IHV0aWwuZG9tYWluQmluZChkb21haW4sIGZuKTtcbiAgICBpZiAoaW5pdGlhbFZhbHVlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgaW5pdGlhbFZhbHVlID0gUHJvbWlzZS5yZXNvbHZlKGluaXRpYWxWYWx1ZSk7XG4gICAgICAgIGluaXRpYWxWYWx1ZS5fYXR0YWNoQ2FuY2VsbGF0aW9uQ2FsbGJhY2sodGhpcyk7XG4gICAgfVxuICAgIHRoaXMuX2luaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZTtcbiAgICB0aGlzLl9jdXJyZW50Q2FuY2VsbGFibGUgPSBudWxsO1xuICAgIGlmKF9lYWNoID09PSBJTlRFUk5BTCkge1xuICAgICAgICB0aGlzLl9lYWNoVmFsdWVzID0gQXJyYXkodGhpcy5fbGVuZ3RoKTtcbiAgICB9IGVsc2UgaWYgKF9lYWNoID09PSAwKSB7XG4gICAgICAgIHRoaXMuX2VhY2hWYWx1ZXMgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2VhY2hWYWx1ZXMgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIHRoaXMuX3Byb21pc2UuX2NhcHR1cmVTdGFja1RyYWNlKCk7XG4gICAgdGhpcy5faW5pdCQodW5kZWZpbmVkLCAtNSk7XG59XG51dGlsLmluaGVyaXRzKFJlZHVjdGlvblByb21pc2VBcnJheSwgUHJvbWlzZUFycmF5KTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fZ290QWNjdW0gPSBmdW5jdGlvbihhY2N1bSkge1xuICAgIGlmICh0aGlzLl9lYWNoVmFsdWVzICE9PSB1bmRlZmluZWQgJiYgXG4gICAgICAgIHRoaXMuX2VhY2hWYWx1ZXMgIT09IG51bGwgJiYgXG4gICAgICAgIGFjY3VtICE9PSBJTlRFUk5BTCkge1xuICAgICAgICB0aGlzLl9lYWNoVmFsdWVzLnB1c2goYWNjdW0pO1xuICAgIH1cbn07XG5cblJlZHVjdGlvblByb21pc2VBcnJheS5wcm90b3R5cGUuX2VhY2hDb21wbGV0ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKHRoaXMuX2VhY2hWYWx1ZXMgIT09IG51bGwpIHtcbiAgICAgICAgdGhpcy5fZWFjaFZhbHVlcy5wdXNoKHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX2VhY2hWYWx1ZXM7XG59O1xuXG5SZWR1Y3Rpb25Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24oKSB7fTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVzb2x2ZUVtcHR5QXJyYXkgPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl9yZXNvbHZlKHRoaXMuX2VhY2hWYWx1ZXMgIT09IHVuZGVmaW5lZCA/IHRoaXMuX2VhY2hWYWx1ZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IHRoaXMuX2luaXRpYWxWYWx1ZSk7XG59O1xuXG5SZWR1Y3Rpb25Qcm9taXNlQXJyYXkucHJvdG90eXBlLnNob3VsZENvcHlWYWx1ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVzb2x2ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5fcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbiAgICB0aGlzLl92YWx1ZXMgPSBudWxsO1xufTtcblxuUmVkdWN0aW9uUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcmVzdWx0Q2FuY2VsbGVkID0gZnVuY3Rpb24oc2VuZGVyKSB7XG4gICAgaWYgKHNlbmRlciA9PT0gdGhpcy5faW5pdGlhbFZhbHVlKSByZXR1cm4gdGhpcy5fY2FuY2VsKCk7XG4gICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkgcmV0dXJuO1xuICAgIHRoaXMuX3Jlc3VsdENhbmNlbGxlZCQoKTtcbiAgICBpZiAodGhpcy5fY3VycmVudENhbmNlbGxhYmxlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB0aGlzLl9jdXJyZW50Q2FuY2VsbGFibGUuY2FuY2VsKCk7XG4gICAgfVxuICAgIGlmICh0aGlzLl9pbml0aWFsVmFsdWUgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIHRoaXMuX2luaXRpYWxWYWx1ZS5jYW5jZWwoKTtcbiAgICB9XG59O1xuXG5SZWR1Y3Rpb25Qcm9taXNlQXJyYXkucHJvdG90eXBlLl9pdGVyYXRlID0gZnVuY3Rpb24gKHZhbHVlcykge1xuICAgIHRoaXMuX3ZhbHVlcyA9IHZhbHVlcztcbiAgICB2YXIgdmFsdWU7XG4gICAgdmFyIGk7XG4gICAgdmFyIGxlbmd0aCA9IHZhbHVlcy5sZW5ndGg7XG4gICAgaWYgKHRoaXMuX2luaXRpYWxWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlID0gdGhpcy5faW5pdGlhbFZhbHVlO1xuICAgICAgICBpID0gMDtcbiAgICB9IGVsc2Uge1xuICAgICAgICB2YWx1ZSA9IFByb21pc2UucmVzb2x2ZSh2YWx1ZXNbMF0pO1xuICAgICAgICBpID0gMTtcbiAgICB9XG5cbiAgICB0aGlzLl9jdXJyZW50Q2FuY2VsbGFibGUgPSB2YWx1ZTtcblxuICAgIGlmICghdmFsdWUuaXNSZWplY3RlZCgpKSB7XG4gICAgICAgIGZvciAoOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIHZhciBjdHggPSB7XG4gICAgICAgICAgICAgICAgYWNjdW06IG51bGwsXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlc1tpXSxcbiAgICAgICAgICAgICAgICBpbmRleDogaSxcbiAgICAgICAgICAgICAgICBsZW5ndGg6IGxlbmd0aCxcbiAgICAgICAgICAgICAgICBhcnJheTogdGhpc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHZhbHVlID0gdmFsdWUuX3RoZW4oZ290QWNjdW0sIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjdHgsIHVuZGVmaW5lZCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodGhpcy5fZWFjaFZhbHVlcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIC5fdGhlbih0aGlzLl9lYWNoQ29tcGxldGUsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB0aGlzLCB1bmRlZmluZWQpO1xuICAgIH1cbiAgICB2YWx1ZS5fdGhlbihjb21wbGV0ZWQsIGNvbXBsZXRlZCwgdW5kZWZpbmVkLCB2YWx1ZSwgdGhpcyk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5yZWR1Y2UgPSBmdW5jdGlvbiAoZm4sIGluaXRpYWxWYWx1ZSkge1xuICAgIHJldHVybiByZWR1Y2UodGhpcywgZm4sIGluaXRpYWxWYWx1ZSwgbnVsbCk7XG59O1xuXG5Qcm9taXNlLnJlZHVjZSA9IGZ1bmN0aW9uIChwcm9taXNlcywgZm4sIGluaXRpYWxWYWx1ZSwgX2VhY2gpIHtcbiAgICByZXR1cm4gcmVkdWNlKHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCBfZWFjaCk7XG59O1xuXG5mdW5jdGlvbiBjb21wbGV0ZWQodmFsdWVPclJlYXNvbiwgYXJyYXkpIHtcbiAgICBpZiAodGhpcy5pc0Z1bGZpbGxlZCgpKSB7XG4gICAgICAgIGFycmF5Ll9yZXNvbHZlKHZhbHVlT3JSZWFzb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIGFycmF5Ll9yZWplY3QodmFsdWVPclJlYXNvbik7XG4gICAgfVxufVxuXG5mdW5jdGlvbiByZWR1Y2UocHJvbWlzZXMsIGZuLCBpbml0aWFsVmFsdWUsIF9lYWNoKSB7XG4gICAgaWYgKHR5cGVvZiBmbiAhPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHJldHVybiBhcGlSZWplY3Rpb24oXCJleHBlY3RpbmcgYSBmdW5jdGlvbiBidXQgZ290IFwiICsgdXRpbC5jbGFzc1N0cmluZyhmbikpO1xuICAgIH1cbiAgICB2YXIgYXJyYXkgPSBuZXcgUmVkdWN0aW9uUHJvbWlzZUFycmF5KHByb21pc2VzLCBmbiwgaW5pdGlhbFZhbHVlLCBfZWFjaCk7XG4gICAgcmV0dXJuIGFycmF5LnByb21pc2UoKTtcbn1cblxuZnVuY3Rpb24gZ290QWNjdW0oYWNjdW0pIHtcbiAgICB0aGlzLmFjY3VtID0gYWNjdW07XG4gICAgdGhpcy5hcnJheS5fZ290QWNjdW0oYWNjdW0pO1xuICAgIHZhciB2YWx1ZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodGhpcy52YWx1ZSwgdGhpcy5hcnJheS5fcHJvbWlzZSk7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICB0aGlzLmFycmF5Ll9jdXJyZW50Q2FuY2VsbGFibGUgPSB2YWx1ZTtcbiAgICAgICAgcmV0dXJuIHZhbHVlLl90aGVuKGdvdFZhbHVlLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdGhpcywgdW5kZWZpbmVkKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZ290VmFsdWUuY2FsbCh0aGlzLCB2YWx1ZSk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnb3RWYWx1ZSh2YWx1ZSkge1xuICAgIHZhciBhcnJheSA9IHRoaXMuYXJyYXk7XG4gICAgdmFyIHByb21pc2UgPSBhcnJheS5fcHJvbWlzZTtcbiAgICB2YXIgZm4gPSB0cnlDYXRjaChhcnJheS5fZm4pO1xuICAgIHByb21pc2UuX3B1c2hDb250ZXh0KCk7XG4gICAgdmFyIHJldDtcbiAgICBpZiAoYXJyYXkuX2VhY2hWYWx1ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXQgPSBmbi5jYWxsKHByb21pc2UuX2JvdW5kVmFsdWUoKSwgdmFsdWUsIHRoaXMuaW5kZXgsIHRoaXMubGVuZ3RoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXQgPSBmbi5jYWxsKHByb21pc2UuX2JvdW5kVmFsdWUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuYWNjdW0sIHZhbHVlLCB0aGlzLmluZGV4LCB0aGlzLmxlbmd0aCk7XG4gICAgfVxuICAgIGlmIChyZXQgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgIGFycmF5Ll9jdXJyZW50Q2FuY2VsbGFibGUgPSByZXQ7XG4gICAgfVxuICAgIHZhciBwcm9taXNlQ3JlYXRlZCA9IHByb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICBkZWJ1Zy5jaGVja0ZvcmdvdHRlblJldHVybnMoXG4gICAgICAgIHJldCxcbiAgICAgICAgcHJvbWlzZUNyZWF0ZWQsXG4gICAgICAgIGFycmF5Ll9lYWNoVmFsdWVzICE9PSB1bmRlZmluZWQgPyBcIlByb21pc2UuZWFjaFwiIDogXCJQcm9taXNlLnJlZHVjZVwiLFxuICAgICAgICBwcm9taXNlXG4gICAgKTtcbiAgICByZXR1cm4gcmV0O1xufVxufTtcblxufSx7XCIuL3V0aWxcIjozNn1dLDI5OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsXCIpO1xudmFyIHNjaGVkdWxlO1xudmFyIG5vQXN5bmNTY2hlZHVsZXIgPSBmdW5jdGlvbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBhc3luYyBzY2hlZHVsZXIgYXZhaWxhYmxlXFx1MDAwYVxcdTAwMGEgICAgU2VlIGh0dHA6Ly9nb28uZ2wvTXFyRm1YXFx1MDAwYVwiKTtcbn07XG52YXIgTmF0aXZlUHJvbWlzZSA9IHV0aWwuZ2V0TmF0aXZlUHJvbWlzZSgpO1xuaWYgKHV0aWwuaXNOb2RlICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIEdsb2JhbFNldEltbWVkaWF0ZSA9IGdsb2JhbC5zZXRJbW1lZGlhdGU7XG4gICAgdmFyIFByb2Nlc3NOZXh0VGljayA9IHByb2Nlc3MubmV4dFRpY2s7XG4gICAgc2NoZWR1bGUgPSB1dGlsLmlzUmVjZW50Tm9kZVxuICAgICAgICAgICAgICAgID8gZnVuY3Rpb24oZm4pIHsgR2xvYmFsU2V0SW1tZWRpYXRlLmNhbGwoZ2xvYmFsLCBmbik7IH1cbiAgICAgICAgICAgICAgICA6IGZ1bmN0aW9uKGZuKSB7IFByb2Nlc3NOZXh0VGljay5jYWxsKHByb2Nlc3MsIGZuKTsgfTtcbn0gZWxzZSBpZiAodHlwZW9mIE5hdGl2ZVByb21pc2UgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICB0eXBlb2YgTmF0aXZlUHJvbWlzZS5yZXNvbHZlID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICB2YXIgbmF0aXZlUHJvbWlzZSA9IE5hdGl2ZVByb21pc2UucmVzb2x2ZSgpO1xuICAgIHNjaGVkdWxlID0gZnVuY3Rpb24oZm4pIHtcbiAgICAgICAgbmF0aXZlUHJvbWlzZS50aGVuKGZuKTtcbiAgICB9O1xufSBlbHNlIGlmICgodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09IFwidW5kZWZpbmVkXCIpICYmXG4gICAgICAgICAgISh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgICAgICAgICB3aW5kb3cubmF2aWdhdG9yICYmXG4gICAgICAgICAgICAod2luZG93Lm5hdmlnYXRvci5zdGFuZGFsb25lIHx8IHdpbmRvdy5jb3Jkb3ZhKSkpIHtcbiAgICBzY2hlZHVsZSA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGRpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gICAgICAgIHZhciBvcHRzID0ge2F0dHJpYnV0ZXM6IHRydWV9O1xuICAgICAgICB2YXIgdG9nZ2xlU2NoZWR1bGVkID0gZmFsc2U7XG4gICAgICAgIHZhciBkaXYyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgdmFyIG8yID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkaXYuY2xhc3NMaXN0LnRvZ2dsZShcImZvb1wiKTtcbiAgICAgICAgICAgIHRvZ2dsZVNjaGVkdWxlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICAgICAgbzIub2JzZXJ2ZShkaXYyLCBvcHRzKTtcblxuICAgICAgICB2YXIgc2NoZWR1bGVUb2dnbGUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGlmICh0b2dnbGVTY2hlZHVsZWQpIHJldHVybjtcbiAgICAgICAgICAgIHRvZ2dsZVNjaGVkdWxlZCA9IHRydWU7XG4gICAgICAgICAgICBkaXYyLmNsYXNzTGlzdC50b2dnbGUoXCJmb29cIik7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIHNjaGVkdWxlKGZuKSB7XG4gICAgICAgICAgICB2YXIgbyA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIG8uZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIGZuKCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIG8ub2JzZXJ2ZShkaXYsIG9wdHMpO1xuICAgICAgICAgICAgc2NoZWR1bGVUb2dnbGUoKTtcbiAgICAgICAgfTtcbiAgICB9KSgpO1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgc2NoZWR1bGUgPSBmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgc2V0SW1tZWRpYXRlKGZuKTtcbiAgICB9O1xufSBlbHNlIGlmICh0eXBlb2Ygc2V0VGltZW91dCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHNjaGVkdWxlID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIHNldFRpbWVvdXQoZm4sIDApO1xuICAgIH07XG59IGVsc2Uge1xuICAgIHNjaGVkdWxlID0gbm9Bc3luY1NjaGVkdWxlcjtcbn1cbm1vZHVsZS5leHBvcnRzID0gc2NoZWR1bGU7XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwzMDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID1cbiAgICBmdW5jdGlvbihQcm9taXNlLCBQcm9taXNlQXJyYXksIGRlYnVnKSB7XG52YXIgUHJvbWlzZUluc3BlY3Rpb24gPSBQcm9taXNlLlByb21pc2VJbnNwZWN0aW9uO1xudmFyIHV0aWwgPSBfZGVyZXFfKFwiLi91dGlsXCIpO1xuXG5mdW5jdGlvbiBTZXR0bGVkUHJvbWlzZUFycmF5KHZhbHVlcykge1xuICAgIHRoaXMuY29uc3RydWN0b3IkKHZhbHVlcyk7XG59XG51dGlsLmluaGVyaXRzKFNldHRsZWRQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cblNldHRsZWRQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlUmVzb2x2ZWQgPSBmdW5jdGlvbiAoaW5kZXgsIGluc3BlY3Rpb24pIHtcbiAgICB0aGlzLl92YWx1ZXNbaW5kZXhdID0gaW5zcGVjdGlvbjtcbiAgICB2YXIgdG90YWxSZXNvbHZlZCA9ICsrdGhpcy5fdG90YWxSZXNvbHZlZDtcbiAgICBpZiAodG90YWxSZXNvbHZlZCA+PSB0aGlzLl9sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5fcmVzb2x2ZSh0aGlzLl92YWx1ZXMpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufTtcblxuU2V0dGxlZFByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VGdWxmaWxsZWQgPSBmdW5jdGlvbiAodmFsdWUsIGluZGV4KSB7XG4gICAgdmFyIHJldCA9IG5ldyBQcm9taXNlSW5zcGVjdGlvbigpO1xuICAgIHJldC5fYml0RmllbGQgPSAzMzU1NDQzMjtcbiAgICByZXQuX3NldHRsZWRWYWx1ZUZpZWxkID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2VSZXNvbHZlZChpbmRleCwgcmV0KTtcbn07XG5TZXR0bGVkUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZVJlamVjdGVkID0gZnVuY3Rpb24gKHJlYXNvbiwgaW5kZXgpIHtcbiAgICB2YXIgcmV0ID0gbmV3IFByb21pc2VJbnNwZWN0aW9uKCk7XG4gICAgcmV0Ll9iaXRGaWVsZCA9IDE2Nzc3MjE2O1xuICAgIHJldC5fc2V0dGxlZFZhbHVlRmllbGQgPSByZWFzb247XG4gICAgcmV0dXJuIHRoaXMuX3Byb21pc2VSZXNvbHZlZChpbmRleCwgcmV0KTtcbn07XG5cblByb21pc2Uuc2V0dGxlID0gZnVuY3Rpb24gKHByb21pc2VzKSB7XG4gICAgZGVidWcuZGVwcmVjYXRlZChcIi5zZXR0bGUoKVwiLCBcIi5yZWZsZWN0KClcIik7XG4gICAgcmV0dXJuIG5ldyBTZXR0bGVkUHJvbWlzZUFycmF5KHByb21pc2VzKS5wcm9taXNlKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5zZXR0bGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIFByb21pc2Uuc2V0dGxlKHRoaXMpO1xufTtcbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwzMTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID1cbmZ1bmN0aW9uKFByb21pc2UsIFByb21pc2VBcnJheSwgYXBpUmVqZWN0aW9uKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgUmFuZ2VFcnJvciA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKS5SYW5nZUVycm9yO1xudmFyIEFnZ3JlZ2F0ZUVycm9yID0gX2RlcmVxXyhcIi4vZXJyb3JzXCIpLkFnZ3JlZ2F0ZUVycm9yO1xudmFyIGlzQXJyYXkgPSB1dGlsLmlzQXJyYXk7XG52YXIgQ0FOQ0VMTEFUSU9OID0ge307XG5cblxuZnVuY3Rpb24gU29tZVByb21pc2VBcnJheSh2YWx1ZXMpIHtcbiAgICB0aGlzLmNvbnN0cnVjdG9yJCh2YWx1ZXMpO1xuICAgIHRoaXMuX2hvd01hbnkgPSAwO1xuICAgIHRoaXMuX3Vud3JhcCA9IGZhbHNlO1xuICAgIHRoaXMuX2luaXRpYWxpemVkID0gZmFsc2U7XG59XG51dGlsLmluaGVyaXRzKFNvbWVQcm9taXNlQXJyYXksIFByb21pc2VBcnJheSk7XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdGhpcy5faW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5faG93TWFueSA9PT0gMCkge1xuICAgICAgICB0aGlzLl9yZXNvbHZlKFtdKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLl9pbml0JCh1bmRlZmluZWQsIC01KTtcbiAgICB2YXIgaXNBcnJheVJlc29sdmVkID0gaXNBcnJheSh0aGlzLl92YWx1ZXMpO1xuICAgIGlmICghdGhpcy5faXNSZXNvbHZlZCgpICYmXG4gICAgICAgIGlzQXJyYXlSZXNvbHZlZCAmJlxuICAgICAgICB0aGlzLl9ob3dNYW55ID4gdGhpcy5fY2FuUG9zc2libHlGdWxmaWxsKCkpIHtcbiAgICAgICAgdGhpcy5fcmVqZWN0KHRoaXMuX2dldFJhbmdlRXJyb3IodGhpcy5sZW5ndGgoKSkpO1xuICAgIH1cbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5faW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2luaXQoKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLnNldFVud3JhcCA9IGZ1bmN0aW9uICgpIHtcbiAgICB0aGlzLl91bndyYXAgPSB0cnVlO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuaG93TWFueSA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcy5faG93TWFueTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLnNldEhvd01hbnkgPSBmdW5jdGlvbiAoY291bnQpIHtcbiAgICB0aGlzLl9ob3dNYW55ID0gY291bnQ7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fcHJvbWlzZUZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuX2FkZEZ1bGZpbGxlZCh2YWx1ZSk7XG4gICAgaWYgKHRoaXMuX2Z1bGZpbGxlZCgpID09PSB0aGlzLmhvd01hbnkoKSkge1xuICAgICAgICB0aGlzLl92YWx1ZXMubGVuZ3RoID0gdGhpcy5ob3dNYW55KCk7XG4gICAgICAgIGlmICh0aGlzLmhvd01hbnkoKSA9PT0gMSAmJiB0aGlzLl91bndyYXApIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUodGhpcy5fdmFsdWVzWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3Jlc29sdmUodGhpcy5fdmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuXG59O1xuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3Byb21pc2VSZWplY3RlZCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB0aGlzLl9hZGRSZWplY3RlZChyZWFzb24pO1xuICAgIHJldHVybiB0aGlzLl9jaGVja091dGNvbWUoKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9wcm9taXNlQ2FuY2VsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLl92YWx1ZXMgaW5zdGFuY2VvZiBQcm9taXNlIHx8IHRoaXMuX3ZhbHVlcyA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYW5jZWwoKTtcbiAgICB9XG4gICAgdGhpcy5fYWRkUmVqZWN0ZWQoQ0FOQ0VMTEFUSU9OKTtcbiAgICByZXR1cm4gdGhpcy5fY2hlY2tPdXRjb21lKCk7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fY2hlY2tPdXRjb21lID0gZnVuY3Rpb24oKSB7XG4gICAgaWYgKHRoaXMuaG93TWFueSgpID4gdGhpcy5fY2FuUG9zc2libHlGdWxmaWxsKCkpIHtcbiAgICAgICAgdmFyIGUgPSBuZXcgQWdncmVnYXRlRXJyb3IoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHRoaXMubGVuZ3RoKCk7IGkgPCB0aGlzLl92YWx1ZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl92YWx1ZXNbaV0gIT09IENBTkNFTExBVElPTikge1xuICAgICAgICAgICAgICAgIGUucHVzaCh0aGlzLl92YWx1ZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuX3JlamVjdChlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2NhbmNlbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fZnVsZmlsbGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl90b3RhbFJlc29sdmVkO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3JlamVjdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLl92YWx1ZXMubGVuZ3RoIC0gdGhpcy5sZW5ndGgoKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9hZGRSZWplY3RlZCA9IGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICB0aGlzLl92YWx1ZXMucHVzaChyZWFzb24pO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX2FkZEZ1bGZpbGxlZCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgIHRoaXMuX3ZhbHVlc1t0aGlzLl90b3RhbFJlc29sdmVkKytdID0gdmFsdWU7XG59O1xuXG5Tb21lUHJvbWlzZUFycmF5LnByb3RvdHlwZS5fY2FuUG9zc2libHlGdWxmaWxsID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0aGlzLmxlbmd0aCgpIC0gdGhpcy5fcmVqZWN0ZWQoKTtcbn07XG5cblNvbWVQcm9taXNlQXJyYXkucHJvdG90eXBlLl9nZXRSYW5nZUVycm9yID0gZnVuY3Rpb24gKGNvdW50KSB7XG4gICAgdmFyIG1lc3NhZ2UgPSBcIklucHV0IGFycmF5IG11c3QgY29udGFpbiBhdCBsZWFzdCBcIiArXG4gICAgICAgICAgICB0aGlzLl9ob3dNYW55ICsgXCIgaXRlbXMgYnV0IGNvbnRhaW5zIG9ubHkgXCIgKyBjb3VudCArIFwiIGl0ZW1zXCI7XG4gICAgcmV0dXJuIG5ldyBSYW5nZUVycm9yKG1lc3NhZ2UpO1xufTtcblxuU29tZVByb21pc2VBcnJheS5wcm90b3R5cGUuX3Jlc29sdmVFbXB0eUFycmF5ID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuX3JlamVjdCh0aGlzLl9nZXRSYW5nZUVycm9yKDApKTtcbn07XG5cbmZ1bmN0aW9uIHNvbWUocHJvbWlzZXMsIGhvd01hbnkpIHtcbiAgICBpZiAoKGhvd01hbnkgfCAwKSAhPT0gaG93TWFueSB8fCBob3dNYW55IDwgMCkge1xuICAgICAgICByZXR1cm4gYXBpUmVqZWN0aW9uKFwiZXhwZWN0aW5nIGEgcG9zaXRpdmUgaW50ZWdlclxcdTAwMGFcXHUwMDBhICAgIFNlZSBodHRwOi8vZ29vLmdsL01xckZtWFxcdTAwMGFcIik7XG4gICAgfVxuICAgIHZhciByZXQgPSBuZXcgU29tZVByb21pc2VBcnJheShwcm9taXNlcyk7XG4gICAgdmFyIHByb21pc2UgPSByZXQucHJvbWlzZSgpO1xuICAgIHJldC5zZXRIb3dNYW55KGhvd01hbnkpO1xuICAgIHJldC5pbml0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG59XG5cblByb21pc2Uuc29tZSA9IGZ1bmN0aW9uIChwcm9taXNlcywgaG93TWFueSkge1xuICAgIHJldHVybiBzb21lKHByb21pc2VzLCBob3dNYW55KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnNvbWUgPSBmdW5jdGlvbiAoaG93TWFueSkge1xuICAgIHJldHVybiBzb21lKHRoaXMsIGhvd01hbnkpO1xufTtcblxuUHJvbWlzZS5fU29tZVByb21pc2VBcnJheSA9IFNvbWVQcm9taXNlQXJyYXk7XG59O1xuXG59LHtcIi4vZXJyb3JzXCI6MTIsXCIuL3V0aWxcIjozNn1dLDMyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihQcm9taXNlKSB7XG5mdW5jdGlvbiBQcm9taXNlSW5zcGVjdGlvbihwcm9taXNlKSB7XG4gICAgaWYgKHByb21pc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBwcm9taXNlID0gcHJvbWlzZS5fdGFyZ2V0KCk7XG4gICAgICAgIHRoaXMuX2JpdEZpZWxkID0gcHJvbWlzZS5fYml0RmllbGQ7XG4gICAgICAgIHRoaXMuX3NldHRsZWRWYWx1ZUZpZWxkID0gcHJvbWlzZS5faXNGYXRlU2VhbGVkKClcbiAgICAgICAgICAgID8gcHJvbWlzZS5fc2V0dGxlZFZhbHVlKCkgOiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0aGlzLl9iaXRGaWVsZCA9IDA7XG4gICAgICAgIHRoaXMuX3NldHRsZWRWYWx1ZUZpZWxkID0gdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLl9zZXR0bGVkVmFsdWUgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0dGxlZFZhbHVlRmllbGQ7XG59O1xuXG52YXIgdmFsdWUgPSBQcm9taXNlSW5zcGVjdGlvbi5wcm90b3R5cGUudmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImNhbm5vdCBnZXQgZnVsZmlsbG1lbnQgdmFsdWUgb2YgYSBub24tZnVsZmlsbGVkIHByb21pc2VcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXHUwMDBhXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2V0dGxlZFZhbHVlKCk7XG59O1xuXG52YXIgcmVhc29uID0gUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLmVycm9yID1cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5yZWFzb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF0aGlzLmlzUmVqZWN0ZWQoKSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiY2Fubm90IGdldCByZWplY3Rpb24gcmVhc29uIG9mIGEgbm9uLXJlamVjdGVkIHByb21pc2VcXHUwMDBhXFx1MDAwYSAgICBTZWUgaHR0cDovL2dvby5nbC9NcXJGbVhcXHUwMDBhXCIpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5fc2V0dGxlZFZhbHVlKCk7XG59O1xuXG52YXIgaXNGdWxmaWxsZWQgPSBQcm9taXNlSW5zcGVjdGlvbi5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMzM1NTQ0MzIpICE9PSAwO1xufTtcblxudmFyIGlzUmVqZWN0ZWQgPSBQcm9taXNlSW5zcGVjdGlvbi5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgMTY3NzcyMTYpICE9PSAwO1xufTtcblxudmFyIGlzUGVuZGluZyA9IFByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc1BlbmRpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDUwMzk3MTg0KSA9PT0gMDtcbn07XG5cbnZhciBpc1Jlc29sdmVkID0gUHJvbWlzZUluc3BlY3Rpb24ucHJvdG90eXBlLmlzUmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDUwMzMxNjQ4KSAhPT0gMDtcbn07XG5cblByb21pc2VJbnNwZWN0aW9uLnByb3RvdHlwZS5pc0NhbmNlbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5fYml0RmllbGQgJiA4NDU0MTQ0KSAhPT0gMDtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9faXNDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gKHRoaXMuX2JpdEZpZWxkICYgNjU1MzYpID09PSA2NTUzNjtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9pc0NhbmNlbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl90YXJnZXQoKS5fX2lzQ2FuY2VsbGVkKCk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5pc0NhbmNlbGxlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiAodGhpcy5fdGFyZ2V0KCkuX2JpdEZpZWxkICYgODQ1NDE0NCkgIT09IDA7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5pc1BlbmRpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaXNQZW5kaW5nLmNhbGwodGhpcy5fdGFyZ2V0KCkpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuaXNSZWplY3RlZCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBpc1JlamVjdGVkLmNhbGwodGhpcy5fdGFyZ2V0KCkpO1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuaXNGdWxmaWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gaXNGdWxmaWxsZWQuY2FsbCh0aGlzLl90YXJnZXQoKSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS5pc1Jlc29sdmVkID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGlzUmVzb2x2ZWQuY2FsbCh0aGlzLl90YXJnZXQoKSk7XG59O1xuXG5Qcm9taXNlLnByb3RvdHlwZS52YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB2YWx1ZS5jYWxsKHRoaXMuX3RhcmdldCgpKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLnJlYXNvbiA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciB0YXJnZXQgPSB0aGlzLl90YXJnZXQoKTtcbiAgICB0YXJnZXQuX3Vuc2V0UmVqZWN0aW9uSXNVbmhhbmRsZWQoKTtcbiAgICByZXR1cm4gcmVhc29uLmNhbGwodGFyZ2V0KTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl92YWx1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLl9zZXR0bGVkVmFsdWUoKTtcbn07XG5cblByb21pc2UucHJvdG90eXBlLl9yZWFzb24gPSBmdW5jdGlvbigpIHtcbiAgICB0aGlzLl91bnNldFJlamVjdGlvbklzVW5oYW5kbGVkKCk7XG4gICAgcmV0dXJuIHRoaXMuX3NldHRsZWRWYWx1ZSgpO1xufTtcblxuUHJvbWlzZS5Qcm9taXNlSW5zcGVjdGlvbiA9IFByb21pc2VJbnNwZWN0aW9uO1xufTtcblxufSx7fV0sMzM6W2Z1bmN0aW9uKF9kZXJlcV8sbW9kdWxlLGV4cG9ydHMpe1xuXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKFByb21pc2UsIElOVEVSTkFMKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xudmFyIGlzT2JqZWN0ID0gdXRpbC5pc09iamVjdDtcblxuZnVuY3Rpb24gdHJ5Q29udmVydFRvUHJvbWlzZShvYmosIGNvbnRleHQpIHtcbiAgICBpZiAoaXNPYmplY3Qob2JqKSkge1xuICAgICAgICBpZiAob2JqIGluc3RhbmNlb2YgUHJvbWlzZSkgcmV0dXJuIG9iajtcbiAgICAgICAgdmFyIHRoZW4gPSBnZXRUaGVuKG9iaik7XG4gICAgICAgIGlmICh0aGVuID09PSBlcnJvck9iaikge1xuICAgICAgICAgICAgaWYgKGNvbnRleHQpIGNvbnRleHQuX3B1c2hDb250ZXh0KCk7XG4gICAgICAgICAgICB2YXIgcmV0ID0gUHJvbWlzZS5yZWplY3QodGhlbi5lKTtcbiAgICAgICAgICAgIGlmIChjb250ZXh0KSBjb250ZXh0Ll9wb3BDb250ZXh0KCk7XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGVuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIGlmIChpc0FueUJsdWViaXJkUHJvbWlzZShvYmopKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgICAgICAgICBvYmouX3RoZW4oXG4gICAgICAgICAgICAgICAgICAgIHJldC5fZnVsZmlsbCxcbiAgICAgICAgICAgICAgICAgICAgcmV0Ll9yZWplY3QsXG4gICAgICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGRvVGhlbmFibGUob2JqLCB0aGVuLCBjb250ZXh0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBkb0dldFRoZW4ob2JqKSB7XG4gICAgcmV0dXJuIG9iai50aGVuO1xufVxuXG5mdW5jdGlvbiBnZXRUaGVuKG9iaikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBkb0dldFRoZW4ob2JqKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGVycm9yT2JqLmUgPSBlO1xuICAgICAgICByZXR1cm4gZXJyb3JPYmo7XG4gICAgfVxufVxuXG52YXIgaGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gaXNBbnlCbHVlYmlyZFByb21pc2Uob2JqKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGhhc1Byb3AuY2FsbChvYmosIFwiX3Byb21pc2UwXCIpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZG9UaGVuYWJsZSh4LCB0aGVuLCBjb250ZXh0KSB7XG4gICAgdmFyIHByb21pc2UgPSBuZXcgUHJvbWlzZShJTlRFUk5BTCk7XG4gICAgdmFyIHJldCA9IHByb21pc2U7XG4gICAgaWYgKGNvbnRleHQpIGNvbnRleHQuX3B1c2hDb250ZXh0KCk7XG4gICAgcHJvbWlzZS5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICBpZiAoY29udGV4dCkgY29udGV4dC5fcG9wQ29udGV4dCgpO1xuICAgIHZhciBzeW5jaHJvbm91cyA9IHRydWU7XG4gICAgdmFyIHJlc3VsdCA9IHV0aWwudHJ5Q2F0Y2godGhlbikuY2FsbCh4LCByZXNvbHZlLCByZWplY3QpO1xuICAgIHN5bmNocm9ub3VzID0gZmFsc2U7XG5cbiAgICBpZiAocHJvbWlzZSAmJiByZXN1bHQgPT09IGVycm9yT2JqKSB7XG4gICAgICAgIHByb21pc2UuX3JlamVjdENhbGxiYWNrKHJlc3VsdC5lLCB0cnVlLCB0cnVlKTtcbiAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVzb2x2ZSh2YWx1ZSkge1xuICAgICAgICBpZiAoIXByb21pc2UpIHJldHVybjtcbiAgICAgICAgcHJvbWlzZS5fcmVzb2x2ZUNhbGxiYWNrKHZhbHVlKTtcbiAgICAgICAgcHJvbWlzZSA9IG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVqZWN0KHJlYXNvbikge1xuICAgICAgICBpZiAoIXByb21pc2UpIHJldHVybjtcbiAgICAgICAgcHJvbWlzZS5fcmVqZWN0Q2FsbGJhY2socmVhc29uLCBzeW5jaHJvbm91cywgdHJ1ZSk7XG4gICAgICAgIHByb21pc2UgPSBudWxsO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xufVxuXG5yZXR1cm4gdHJ5Q29udmVydFRvUHJvbWlzZTtcbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwzNDpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oUHJvbWlzZSwgSU5URVJOQUwsIGRlYnVnKSB7XG52YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG52YXIgVGltZW91dEVycm9yID0gUHJvbWlzZS5UaW1lb3V0RXJyb3I7XG5cbmZ1bmN0aW9uIEhhbmRsZVdyYXBwZXIoaGFuZGxlKSAge1xuICAgIHRoaXMuaGFuZGxlID0gaGFuZGxlO1xufVxuXG5IYW5kbGVXcmFwcGVyLnByb3RvdHlwZS5fcmVzdWx0Q2FuY2VsbGVkID0gZnVuY3Rpb24oKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGFuZGxlKTtcbn07XG5cbnZhciBhZnRlclZhbHVlID0gZnVuY3Rpb24odmFsdWUpIHsgcmV0dXJuIGRlbGF5KCt0aGlzKS50aGVuUmV0dXJuKHZhbHVlKTsgfTtcbnZhciBkZWxheSA9IFByb21pc2UuZGVsYXkgPSBmdW5jdGlvbiAobXMsIHZhbHVlKSB7XG4gICAgdmFyIHJldDtcbiAgICB2YXIgaGFuZGxlO1xuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldCA9IFByb21pc2UucmVzb2x2ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICAuX3RoZW4oYWZ0ZXJWYWx1ZSwgbnVsbCwgbnVsbCwgbXMsIHVuZGVmaW5lZCk7XG4gICAgICAgIGlmIChkZWJ1Zy5jYW5jZWxsYXRpb24oKSAmJiB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgIHJldC5fc2V0T25DYW5jZWwodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gbmV3IFByb21pc2UoSU5URVJOQUwpO1xuICAgICAgICBoYW5kbGUgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uKCkgeyByZXQuX2Z1bGZpbGwoKTsgfSwgK21zKTtcbiAgICAgICAgaWYgKGRlYnVnLmNhbmNlbGxhdGlvbigpKSB7XG4gICAgICAgICAgICByZXQuX3NldE9uQ2FuY2VsKG5ldyBIYW5kbGVXcmFwcGVyKGhhbmRsZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldC5fY2FwdHVyZVN0YWNrVHJhY2UoKTtcbiAgICB9XG4gICAgcmV0Ll9zZXRBc3luY0d1YXJhbnRlZWQoKTtcbiAgICByZXR1cm4gcmV0O1xufTtcblxuUHJvbWlzZS5wcm90b3R5cGUuZGVsYXkgPSBmdW5jdGlvbiAobXMpIHtcbiAgICByZXR1cm4gZGVsYXkobXMsIHRoaXMpO1xufTtcblxudmFyIGFmdGVyVGltZW91dCA9IGZ1bmN0aW9uIChwcm9taXNlLCBtZXNzYWdlLCBwYXJlbnQpIHtcbiAgICB2YXIgZXJyO1xuICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJzdHJpbmdcIikge1xuICAgICAgICBpZiAobWVzc2FnZSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICBlcnIgPSBtZXNzYWdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZXJyID0gbmV3IFRpbWVvdXRFcnJvcihcIm9wZXJhdGlvbiB0aW1lZCBvdXRcIik7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBlcnIgPSBuZXcgVGltZW91dEVycm9yKG1lc3NhZ2UpO1xuICAgIH1cbiAgICB1dGlsLm1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihlcnIpO1xuICAgIHByb21pc2UuX2F0dGFjaEV4dHJhVHJhY2UoZXJyKTtcbiAgICBwcm9taXNlLl9yZWplY3QoZXJyKTtcblxuICAgIGlmIChwYXJlbnQgIT0gbnVsbCkge1xuICAgICAgICBwYXJlbnQuY2FuY2VsKCk7XG4gICAgfVxufTtcblxuZnVuY3Rpb24gc3VjY2Vzc0NsZWFyKHZhbHVlKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuaGFuZGxlKTtcbiAgICByZXR1cm4gdmFsdWU7XG59XG5cbmZ1bmN0aW9uIGZhaWx1cmVDbGVhcihyZWFzb24pIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5oYW5kbGUpO1xuICAgIHRocm93IHJlYXNvbjtcbn1cblxuUHJvbWlzZS5wcm90b3R5cGUudGltZW91dCA9IGZ1bmN0aW9uIChtcywgbWVzc2FnZSkge1xuICAgIG1zID0gK21zO1xuICAgIHZhciByZXQsIHBhcmVudDtcblxuICAgIHZhciBoYW5kbGVXcmFwcGVyID0gbmV3IEhhbmRsZVdyYXBwZXIoc2V0VGltZW91dChmdW5jdGlvbiB0aW1lb3V0VGltZW91dCgpIHtcbiAgICAgICAgaWYgKHJldC5pc1BlbmRpbmcoKSkge1xuICAgICAgICAgICAgYWZ0ZXJUaW1lb3V0KHJldCwgbWVzc2FnZSwgcGFyZW50KTtcbiAgICAgICAgfVxuICAgIH0sIG1zKSk7XG5cbiAgICBpZiAoZGVidWcuY2FuY2VsbGF0aW9uKCkpIHtcbiAgICAgICAgcGFyZW50ID0gdGhpcy50aGVuKCk7XG4gICAgICAgIHJldCA9IHBhcmVudC5fdGhlbihzdWNjZXNzQ2xlYXIsIGZhaWx1cmVDbGVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsIGhhbmRsZVdyYXBwZXIsIHVuZGVmaW5lZCk7XG4gICAgICAgIHJldC5fc2V0T25DYW5jZWwoaGFuZGxlV3JhcHBlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0ID0gdGhpcy5fdGhlbihzdWNjZXNzQ2xlYXIsIGZhaWx1cmVDbGVhcixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bmRlZmluZWQsIGhhbmRsZVdyYXBwZXIsIHVuZGVmaW5lZCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJldDtcbn07XG5cbn07XG5cbn0se1wiLi91dGlsXCI6MzZ9XSwzNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG5cInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKFByb21pc2UsIGFwaVJlamVjdGlvbiwgdHJ5Q29udmVydFRvUHJvbWlzZSxcbiAgICBjcmVhdGVDb250ZXh0LCBJTlRFUk5BTCwgZGVidWcpIHtcbiAgICB2YXIgdXRpbCA9IF9kZXJlcV8oXCIuL3V0aWxcIik7XG4gICAgdmFyIFR5cGVFcnJvciA9IF9kZXJlcV8oXCIuL2Vycm9yc1wiKS5UeXBlRXJyb3I7XG4gICAgdmFyIGluaGVyaXRzID0gX2RlcmVxXyhcIi4vdXRpbFwiKS5pbmhlcml0cztcbiAgICB2YXIgZXJyb3JPYmogPSB1dGlsLmVycm9yT2JqO1xuICAgIHZhciB0cnlDYXRjaCA9IHV0aWwudHJ5Q2F0Y2g7XG4gICAgdmFyIE5VTEwgPSB7fTtcblxuICAgIGZ1bmN0aW9uIHRocm93ZXIoZSkge1xuICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9LCAwKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjYXN0UHJlc2VydmluZ0Rpc3Bvc2FibGUodGhlbmFibGUpIHtcbiAgICAgICAgdmFyIG1heWJlUHJvbWlzZSA9IHRyeUNvbnZlcnRUb1Byb21pc2UodGhlbmFibGUpO1xuICAgICAgICBpZiAobWF5YmVQcm9taXNlICE9PSB0aGVuYWJsZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoZW5hYmxlLl9pc0Rpc3Bvc2FibGUgPT09IFwiZnVuY3Rpb25cIiAmJlxuICAgICAgICAgICAgdHlwZW9mIHRoZW5hYmxlLl9nZXREaXNwb3NlciA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICB0aGVuYWJsZS5faXNEaXNwb3NhYmxlKCkpIHtcbiAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fc2V0RGlzcG9zYWJsZSh0aGVuYWJsZS5fZ2V0RGlzcG9zZXIoKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGlzcG9zZShyZXNvdXJjZXMsIGluc3BlY3Rpb24pIHtcbiAgICAgICAgdmFyIGkgPSAwO1xuICAgICAgICB2YXIgbGVuID0gcmVzb3VyY2VzLmxlbmd0aDtcbiAgICAgICAgdmFyIHJldCA9IG5ldyBQcm9taXNlKElOVEVSTkFMKTtcbiAgICAgICAgZnVuY3Rpb24gaXRlcmF0b3IoKSB7XG4gICAgICAgICAgICBpZiAoaSA+PSBsZW4pIHJldHVybiByZXQuX2Z1bGZpbGwoKTtcbiAgICAgICAgICAgIHZhciBtYXliZVByb21pc2UgPSBjYXN0UHJlc2VydmluZ0Rpc3Bvc2FibGUocmVzb3VyY2VzW2krK10pO1xuICAgICAgICAgICAgaWYgKG1heWJlUHJvbWlzZSBpbnN0YW5jZW9mIFByb21pc2UgJiZcbiAgICAgICAgICAgICAgICBtYXliZVByb21pc2UuX2lzRGlzcG9zYWJsZSgpKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbWF5YmVQcm9taXNlID0gdHJ5Q29udmVydFRvUHJvbWlzZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heWJlUHJvbWlzZS5fZ2V0RGlzcG9zZXIoKS50cnlEaXNwb3NlKGluc3BlY3Rpb24pLFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2VzLnByb21pc2UpO1xuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRocm93ZXIoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtYXliZVByb21pc2UgaW5zdGFuY2VvZiBQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtYXliZVByb21pc2UuX3RoZW4oaXRlcmF0b3IsIHRocm93ZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbnVsbCwgbnVsbCwgbnVsbCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlcmF0b3IoKTtcbiAgICAgICAgfVxuICAgICAgICBpdGVyYXRvcigpO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIERpc3Bvc2VyKGRhdGEsIHByb21pc2UsIGNvbnRleHQpIHtcbiAgICAgICAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBwcm9taXNlO1xuICAgICAgICB0aGlzLl9jb250ZXh0ID0gY29udGV4dDtcbiAgICB9XG5cbiAgICBEaXNwb3Nlci5wcm90b3R5cGUuZGF0YSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGE7XG4gICAgfTtcblxuICAgIERpc3Bvc2VyLnByb3RvdHlwZS5wcm9taXNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgRGlzcG9zZXIucHJvdG90eXBlLnJlc291cmNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5wcm9taXNlKCkuaXNGdWxmaWxsZWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJvbWlzZSgpLnZhbHVlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIE5VTEw7XG4gICAgfTtcblxuICAgIERpc3Bvc2VyLnByb3RvdHlwZS50cnlEaXNwb3NlID0gZnVuY3Rpb24oaW5zcGVjdGlvbikge1xuICAgICAgICB2YXIgcmVzb3VyY2UgPSB0aGlzLnJlc291cmNlKCk7XG4gICAgICAgIHZhciBjb250ZXh0ID0gdGhpcy5fY29udGV4dDtcbiAgICAgICAgaWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCkgY29udGV4dC5fcHVzaENvbnRleHQoKTtcbiAgICAgICAgdmFyIHJldCA9IHJlc291cmNlICE9PSBOVUxMXG4gICAgICAgICAgICA/IHRoaXMuZG9EaXNwb3NlKHJlc291cmNlLCBpbnNwZWN0aW9uKSA6IG51bGw7XG4gICAgICAgIGlmIChjb250ZXh0ICE9PSB1bmRlZmluZWQpIGNvbnRleHQuX3BvcENvbnRleHQoKTtcbiAgICAgICAgdGhpcy5fcHJvbWlzZS5fdW5zZXREaXNwb3NhYmxlKCk7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBudWxsO1xuICAgICAgICByZXR1cm4gcmV0O1xuICAgIH07XG5cbiAgICBEaXNwb3Nlci5pc0Rpc3Bvc2VyID0gZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgcmV0dXJuIChkICE9IG51bGwgJiZcbiAgICAgICAgICAgICAgICB0eXBlb2YgZC5yZXNvdXJjZSA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgICAgICAgICAgdHlwZW9mIGQudHJ5RGlzcG9zZSA9PT0gXCJmdW5jdGlvblwiKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gRnVuY3Rpb25EaXNwb3NlcihmbiwgcHJvbWlzZSwgY29udGV4dCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yJChmbiwgcHJvbWlzZSwgY29udGV4dCk7XG4gICAgfVxuICAgIGluaGVyaXRzKEZ1bmN0aW9uRGlzcG9zZXIsIERpc3Bvc2VyKTtcblxuICAgIEZ1bmN0aW9uRGlzcG9zZXIucHJvdG90eXBlLmRvRGlzcG9zZSA9IGZ1bmN0aW9uIChyZXNvdXJjZSwgaW5zcGVjdGlvbikge1xuICAgICAgICB2YXIgZm4gPSB0aGlzLmRhdGEoKTtcbiAgICAgICAgcmV0dXJuIGZuLmNhbGwocmVzb3VyY2UsIHJlc291cmNlLCBpbnNwZWN0aW9uKTtcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbWF5YmVVbndyYXBEaXNwb3Nlcih2YWx1ZSkge1xuICAgICAgICBpZiAoRGlzcG9zZXIuaXNEaXNwb3Nlcih2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2VzW3RoaXMuaW5kZXhdLl9zZXREaXNwb3NhYmxlKHZhbHVlKTtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZS5wcm9taXNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIFJlc291cmNlTGlzdChsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMucHJvbWlzZSA9IG51bGw7XG4gICAgICAgIHRoaXNbbGVuZ3RoLTFdID0gbnVsbDtcbiAgICB9XG5cbiAgICBSZXNvdXJjZUxpc3QucHJvdG90eXBlLl9yZXN1bHRDYW5jZWxsZWQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgICAgICAgICB2YXIgaXRlbSA9IHRoaXNbaV07XG4gICAgICAgICAgICBpZiAoaXRlbSBpbnN0YW5jZW9mIFByb21pc2UpIHtcbiAgICAgICAgICAgICAgICBpdGVtLmNhbmNlbCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcblxuICAgIFByb21pc2UudXNpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICAgICAgICBpZiAobGVuIDwgMikgcmV0dXJuIGFwaVJlamVjdGlvbihcbiAgICAgICAgICAgICAgICAgICAgICAgIFwieW91IG11c3QgcGFzcyBhdCBsZWFzdCAyIGFyZ3VtZW50cyB0byBQcm9taXNlLnVzaW5nXCIpO1xuICAgICAgICB2YXIgZm4gPSBhcmd1bWVudHNbbGVuIC0gMV07XG4gICAgICAgIGlmICh0eXBlb2YgZm4gIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIGFwaVJlamVjdGlvbihcImV4cGVjdGluZyBhIGZ1bmN0aW9uIGJ1dCBnb3QgXCIgKyB1dGlsLmNsYXNzU3RyaW5nKGZuKSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlucHV0O1xuICAgICAgICB2YXIgc3ByZWFkQXJncyA9IHRydWU7XG4gICAgICAgIGlmIChsZW4gPT09IDIgJiYgQXJyYXkuaXNBcnJheShhcmd1bWVudHNbMF0pKSB7XG4gICAgICAgICAgICBpbnB1dCA9IGFyZ3VtZW50c1swXTtcbiAgICAgICAgICAgIGxlbiA9IGlucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIHNwcmVhZEFyZ3MgPSBmYWxzZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlucHV0ID0gYXJndW1lbnRzO1xuICAgICAgICAgICAgbGVuLS07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHJlc291cmNlcyA9IG5ldyBSZXNvdXJjZUxpc3QobGVuKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSkge1xuICAgICAgICAgICAgdmFyIHJlc291cmNlID0gaW5wdXRbaV07XG4gICAgICAgICAgICBpZiAoRGlzcG9zZXIuaXNEaXNwb3NlcihyZXNvdXJjZSkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZGlzcG9zZXIgPSByZXNvdXJjZTtcbiAgICAgICAgICAgICAgICByZXNvdXJjZSA9IHJlc291cmNlLnByb21pc2UoKTtcbiAgICAgICAgICAgICAgICByZXNvdXJjZS5fc2V0RGlzcG9zYWJsZShkaXNwb3Nlcik7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhciBtYXliZVByb21pc2UgPSB0cnlDb252ZXJ0VG9Qcm9taXNlKHJlc291cmNlKTtcbiAgICAgICAgICAgICAgICBpZiAobWF5YmVQcm9taXNlIGluc3RhbmNlb2YgUHJvbWlzZSkge1xuICAgICAgICAgICAgICAgICAgICByZXNvdXJjZSA9XG4gICAgICAgICAgICAgICAgICAgICAgICBtYXliZVByb21pc2UuX3RoZW4obWF5YmVVbndyYXBEaXNwb3NlciwgbnVsbCwgbnVsbCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc291cmNlczogcmVzb3VyY2VzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBpXG4gICAgICAgICAgICAgICAgICAgIH0sIHVuZGVmaW5lZCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVzb3VyY2VzW2ldID0gcmVzb3VyY2U7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmbGVjdGVkUmVzb3VyY2VzID0gbmV3IEFycmF5KHJlc291cmNlcy5sZW5ndGgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZmxlY3RlZFJlc291cmNlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgcmVmbGVjdGVkUmVzb3VyY2VzW2ldID0gUHJvbWlzZS5yZXNvbHZlKHJlc291cmNlc1tpXSkucmVmbGVjdCgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHJlc3VsdFByb21pc2UgPSBQcm9taXNlLmFsbChyZWZsZWN0ZWRSZXNvdXJjZXMpXG4gICAgICAgICAgICAudGhlbihmdW5jdGlvbihpbnNwZWN0aW9ucykge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5zcGVjdGlvbnMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluc3BlY3Rpb24gPSBpbnNwZWN0aW9uc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluc3BlY3Rpb24uaXNSZWplY3RlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBlcnJvck9iai5lID0gaW5zcGVjdGlvbi5lcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVycm9yT2JqO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFpbnNwZWN0aW9uLmlzRnVsZmlsbGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdFByb21pc2UuY2FuY2VsKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgaW5zcGVjdGlvbnNbaV0gPSBpbnNwZWN0aW9uLnZhbHVlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByb21pc2UuX3B1c2hDb250ZXh0KCk7XG5cbiAgICAgICAgICAgICAgICBmbiA9IHRyeUNhdGNoKGZuKTtcbiAgICAgICAgICAgICAgICB2YXIgcmV0ID0gc3ByZWFkQXJnc1xuICAgICAgICAgICAgICAgICAgICA/IGZuLmFwcGx5KHVuZGVmaW5lZCwgaW5zcGVjdGlvbnMpIDogZm4oaW5zcGVjdGlvbnMpO1xuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlQ3JlYXRlZCA9IHByb21pc2UuX3BvcENvbnRleHQoKTtcbiAgICAgICAgICAgICAgICBkZWJ1Zy5jaGVja0ZvcmdvdHRlblJldHVybnMoXG4gICAgICAgICAgICAgICAgICAgIHJldCwgcHJvbWlzZUNyZWF0ZWQsIFwiUHJvbWlzZS51c2luZ1wiLCBwcm9taXNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgdmFyIHByb21pc2UgPSByZXN1bHRQcm9taXNlLmxhc3RseShmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHZhciBpbnNwZWN0aW9uID0gbmV3IFByb21pc2UuUHJvbWlzZUluc3BlY3Rpb24ocmVzdWx0UHJvbWlzZSk7XG4gICAgICAgICAgICByZXR1cm4gZGlzcG9zZShyZXNvdXJjZXMsIGluc3BlY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgcmVzb3VyY2VzLnByb21pc2UgPSBwcm9taXNlO1xuICAgICAgICBwcm9taXNlLl9zZXRPbkNhbmNlbChyZXNvdXJjZXMpO1xuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX3NldERpc3Bvc2FibGUgPSBmdW5jdGlvbiAoZGlzcG9zZXIpIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCB8IDEzMTA3MjtcbiAgICAgICAgdGhpcy5fZGlzcG9zZXIgPSBkaXNwb3NlcjtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX2lzRGlzcG9zYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLl9iaXRGaWVsZCAmIDEzMTA3MikgPiAwO1xuICAgIH07XG5cbiAgICBQcm9taXNlLnByb3RvdHlwZS5fZ2V0RGlzcG9zZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kaXNwb3NlcjtcbiAgICB9O1xuXG4gICAgUHJvbWlzZS5wcm90b3R5cGUuX3Vuc2V0RGlzcG9zYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5fYml0RmllbGQgPSB0aGlzLl9iaXRGaWVsZCAmICh+MTMxMDcyKTtcbiAgICAgICAgdGhpcy5fZGlzcG9zZXIgPSB1bmRlZmluZWQ7XG4gICAgfTtcblxuICAgIFByb21pc2UucHJvdG90eXBlLmRpc3Bvc2VyID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbkRpc3Bvc2VyKGZuLCB0aGlzLCBjcmVhdGVDb250ZXh0KCkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoKTtcbiAgICB9O1xuXG59O1xuXG59LHtcIi4vZXJyb3JzXCI6MTIsXCIuL3V0aWxcIjozNn1dLDM2OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcblwidXNlIHN0cmljdFwiO1xudmFyIGVzNSA9IF9kZXJlcV8oXCIuL2VzNVwiKTtcbnZhciBjYW5FdmFsdWF0ZSA9IHR5cGVvZiBuYXZpZ2F0b3IgPT0gXCJ1bmRlZmluZWRcIjtcblxudmFyIGVycm9yT2JqID0ge2U6IHt9fTtcbnZhciB0cnlDYXRjaFRhcmdldDtcbnZhciBnbG9iYWxPYmplY3QgPSB0eXBlb2Ygc2VsZiAhPT0gXCJ1bmRlZmluZWRcIiA/IHNlbGYgOlxuICAgIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cgOlxuICAgIHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIgPyBnbG9iYWwgOlxuICAgIHRoaXMgIT09IHVuZGVmaW5lZCA/IHRoaXMgOiBudWxsO1xuXG5mdW5jdGlvbiB0cnlDYXRjaGVyKCkge1xuICAgIHRyeSB7XG4gICAgICAgIHZhciB0YXJnZXQgPSB0cnlDYXRjaFRhcmdldDtcbiAgICAgICAgdHJ5Q2F0Y2hUYXJnZXQgPSBudWxsO1xuICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBlcnJvck9iai5lID0gZTtcbiAgICAgICAgcmV0dXJuIGVycm9yT2JqO1xuICAgIH1cbn1cbmZ1bmN0aW9uIHRyeUNhdGNoKGZuKSB7XG4gICAgdHJ5Q2F0Y2hUYXJnZXQgPSBmbjtcbiAgICByZXR1cm4gdHJ5Q2F0Y2hlcjtcbn1cblxudmFyIGluaGVyaXRzID0gZnVuY3Rpb24oQ2hpbGQsIFBhcmVudCkge1xuICAgIHZhciBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbiAgICBmdW5jdGlvbiBUKCkge1xuICAgICAgICB0aGlzLmNvbnN0cnVjdG9yID0gQ2hpbGQ7XG4gICAgICAgIHRoaXMuY29uc3RydWN0b3IkID0gUGFyZW50O1xuICAgICAgICBmb3IgKHZhciBwcm9wZXJ0eU5hbWUgaW4gUGFyZW50LnByb3RvdHlwZSkge1xuICAgICAgICAgICAgaWYgKGhhc1Byb3AuY2FsbChQYXJlbnQucHJvdG90eXBlLCBwcm9wZXJ0eU5hbWUpICYmXG4gICAgICAgICAgICAgICAgcHJvcGVydHlOYW1lLmNoYXJBdChwcm9wZXJ0eU5hbWUubGVuZ3RoLTEpICE9PSBcIiRcIlxuICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzW3Byb3BlcnR5TmFtZSArIFwiJFwiXSA9IFBhcmVudC5wcm90b3R5cGVbcHJvcGVydHlOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBULnByb3RvdHlwZSA9IFBhcmVudC5wcm90b3R5cGU7XG4gICAgQ2hpbGQucHJvdG90eXBlID0gbmV3IFQoKTtcbiAgICByZXR1cm4gQ2hpbGQucHJvdG90eXBlO1xufTtcblxuXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSh2YWwpIHtcbiAgICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2UgfHxcbiAgICAgICAgdHlwZW9mIHZhbCA9PT0gXCJzdHJpbmdcIiB8fCB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiO1xuXG59XG5cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiIHx8XG4gICAgICAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gXCJvYmplY3RcIiAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cblxuZnVuY3Rpb24gbWF5YmVXcmFwQXNFcnJvcihtYXliZUVycm9yKSB7XG4gICAgaWYgKCFpc1ByaW1pdGl2ZShtYXliZUVycm9yKSkgcmV0dXJuIG1heWJlRXJyb3I7XG5cbiAgICByZXR1cm4gbmV3IEVycm9yKHNhZmVUb1N0cmluZyhtYXliZUVycm9yKSk7XG59XG5cbmZ1bmN0aW9uIHdpdGhBcHBlbmRlZCh0YXJnZXQsIGFwcGVuZGVlKSB7XG4gICAgdmFyIGxlbiA9IHRhcmdldC5sZW5ndGg7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShsZW4gKyAxKTtcbiAgICB2YXIgaTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgICAgcmV0W2ldID0gdGFyZ2V0W2ldO1xuICAgIH1cbiAgICByZXRbaV0gPSBhcHBlbmRlZTtcbiAgICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBnZXREYXRhUHJvcGVydHlPckRlZmF1bHQob2JqLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICAgIGlmIChlczUuaXNFUzUpIHtcbiAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcblxuICAgICAgICBpZiAoZGVzYyAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gZGVzYy5nZXQgPT0gbnVsbCAmJiBkZXNjLnNldCA9PSBudWxsXG4gICAgICAgICAgICAgICAgICAgID8gZGVzYy52YWx1ZVxuICAgICAgICAgICAgICAgICAgICA6IGRlZmF1bHRWYWx1ZTtcbiAgICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB7fS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSA/IG9ialtrZXldIDogdW5kZWZpbmVkO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbm90RW51bWVyYWJsZVByb3Aob2JqLCBuYW1lLCB2YWx1ZSkge1xuICAgIGlmIChpc1ByaW1pdGl2ZShvYmopKSByZXR1cm4gb2JqO1xuICAgIHZhciBkZXNjcmlwdG9yID0ge1xuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgfTtcbiAgICBlczUuZGVmaW5lUHJvcGVydHkob2JqLCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiB0aHJvd2VyKHIpIHtcbiAgICB0aHJvdyByO1xufVxuXG52YXIgaW5oZXJpdGVkRGF0YUtleXMgPSAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIGV4Y2x1ZGVkUHJvdG90eXBlcyA9IFtcbiAgICAgICAgQXJyYXkucHJvdG90eXBlLFxuICAgICAgICBPYmplY3QucHJvdG90eXBlLFxuICAgICAgICBGdW5jdGlvbi5wcm90b3R5cGVcbiAgICBdO1xuXG4gICAgdmFyIGlzRXhjbHVkZWRQcm90byA9IGZ1bmN0aW9uKHZhbCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGV4Y2x1ZGVkUHJvdG90eXBlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgaWYgKGV4Y2x1ZGVkUHJvdG90eXBlc1tpXSA9PT0gdmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH07XG5cbiAgICBpZiAoZXM1LmlzRVM1KSB7XG4gICAgICAgIHZhciBnZXRLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgICAgIHZhciB2aXNpdGVkS2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgICAgICB3aGlsZSAob2JqICE9IG51bGwgJiYgIWlzRXhjbHVkZWRQcm90byhvYmopKSB7XG4gICAgICAgICAgICAgICAgdmFyIGtleXM7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAga2V5cyA9IGdldEtleXMob2JqKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZpc2l0ZWRLZXlzW2tleV0pIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB2aXNpdGVkS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlc2MgIT0gbnVsbCAmJiBkZXNjLmdldCA9PSBudWxsICYmIGRlc2Muc2V0ID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgb2JqID0gZXM1LmdldFByb3RvdHlwZU9mKG9iaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgICAgICAgIGlmIChpc0V4Y2x1ZGVkUHJvdG8ob2JqKSkgcmV0dXJuIFtdO1xuICAgICAgICAgICAgdmFyIHJldCA9IFtdO1xuXG4gICAgICAgICAgICAvKmpzaGludCBmb3JpbjpmYWxzZSAqL1xuICAgICAgICAgICAgZW51bWVyYXRpb246IGZvciAodmFyIGtleSBpbiBvYmopIHtcbiAgICAgICAgICAgICAgICBpZiAoaGFzUHJvcC5jYWxsKG9iaiwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICByZXQucHVzaChrZXkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXhjbHVkZWRQcm90b3R5cGVzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGFzUHJvcC5jYWxsKGV4Y2x1ZGVkUHJvdG90eXBlc1tpXSwga2V5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlIGVudW1lcmF0aW9uO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldC5wdXNoKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJldDtcbiAgICAgICAgfTtcbiAgICB9XG5cbn0pKCk7XG5cbnZhciB0aGlzQXNzaWdubWVudFBhdHRlcm4gPSAvdGhpc1xccypcXC5cXHMqXFxTK1xccyo9LztcbmZ1bmN0aW9uIGlzQ2xhc3MoZm4pIHtcbiAgICB0cnkge1xuICAgICAgICBpZiAodHlwZW9mIGZuID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgIHZhciBrZXlzID0gZXM1Lm5hbWVzKGZuLnByb3RvdHlwZSk7XG5cbiAgICAgICAgICAgIHZhciBoYXNNZXRob2RzID0gZXM1LmlzRVM1ICYmIGtleXMubGVuZ3RoID4gMTtcbiAgICAgICAgICAgIHZhciBoYXNNZXRob2RzT3RoZXJUaGFuQ29uc3RydWN0b3IgPSBrZXlzLmxlbmd0aCA+IDAgJiZcbiAgICAgICAgICAgICAgICAhKGtleXMubGVuZ3RoID09PSAxICYmIGtleXNbMF0gPT09IFwiY29uc3RydWN0b3JcIik7XG4gICAgICAgICAgICB2YXIgaGFzVGhpc0Fzc2lnbm1lbnRBbmRTdGF0aWNNZXRob2RzID1cbiAgICAgICAgICAgICAgICB0aGlzQXNzaWdubWVudFBhdHRlcm4udGVzdChmbiArIFwiXCIpICYmIGVzNS5uYW1lcyhmbikubGVuZ3RoID4gMDtcblxuICAgICAgICAgICAgaWYgKGhhc01ldGhvZHMgfHwgaGFzTWV0aG9kc090aGVyVGhhbkNvbnN0cnVjdG9yIHx8XG4gICAgICAgICAgICAgICAgaGFzVGhpc0Fzc2lnbm1lbnRBbmRTdGF0aWNNZXRob2RzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gdG9GYXN0UHJvcGVydGllcyhvYmopIHtcbiAgICAvKmpzaGludCAtVzAyNywtVzA1NSwtVzAzMSovXG4gICAgZnVuY3Rpb24gRmFrZUNvbnN0cnVjdG9yKCkge31cbiAgICBGYWtlQ29uc3RydWN0b3IucHJvdG90eXBlID0gb2JqO1xuICAgIHZhciBsID0gODtcbiAgICB3aGlsZSAobC0tKSBuZXcgRmFrZUNvbnN0cnVjdG9yKCk7XG4gICAgcmV0dXJuIG9iajtcbiAgICBldmFsKG9iaik7XG59XG5cbnZhciByaWRlbnQgPSAvXlthLXokX11bYS16JF8wLTldKiQvaTtcbmZ1bmN0aW9uIGlzSWRlbnRpZmllcihzdHIpIHtcbiAgICByZXR1cm4gcmlkZW50LnRlc3Qoc3RyKTtcbn1cblxuZnVuY3Rpb24gZmlsbGVkUmFuZ2UoY291bnQsIHByZWZpeCwgc3VmZml4KSB7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGNvdW50OyArK2kpIHtcbiAgICAgICAgcmV0W2ldID0gcHJlZml4ICsgaSArIHN1ZmZpeDtcbiAgICB9XG4gICAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gc2FmZVRvU3RyaW5nKG9iaikge1xuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBvYmogKyBcIlwiO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIFwiW25vIHN0cmluZyByZXByZXNlbnRhdGlvbl1cIjtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJlxuICAgICAgICAgICB0eXBlb2Ygb2JqID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgIHR5cGVvZiBvYmoubWVzc2FnZSA9PT0gXCJzdHJpbmdcIiAmJlxuICAgICAgICAgICB0eXBlb2Ygb2JqLm5hbWUgPT09IFwic3RyaW5nXCI7XG59XG5cbmZ1bmN0aW9uIG1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbihlKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgbm90RW51bWVyYWJsZVByb3AoZSwgXCJpc09wZXJhdGlvbmFsXCIsIHRydWUpO1xuICAgIH1cbiAgICBjYXRjaChpZ25vcmUpIHt9XG59XG5cbmZ1bmN0aW9uIG9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uKGUpIHtcbiAgICBpZiAoZSA9PSBudWxsKSByZXR1cm4gZmFsc2U7XG4gICAgcmV0dXJuICgoZSBpbnN0YW5jZW9mIEVycm9yW1wiX19CbHVlYmlyZEVycm9yVHlwZXNfX1wiXS5PcGVyYXRpb25hbEVycm9yKSB8fFxuICAgICAgICBlW1wiaXNPcGVyYXRpb25hbFwiXSA9PT0gdHJ1ZSk7XG59XG5cbmZ1bmN0aW9uIGNhbkF0dGFjaFRyYWNlKG9iaikge1xuICAgIHJldHVybiBpc0Vycm9yKG9iaikgJiYgZXM1LnByb3BlcnR5SXNXcml0YWJsZShvYmosIFwic3RhY2tcIik7XG59XG5cbnZhciBlbnN1cmVFcnJvck9iamVjdCA9IChmdW5jdGlvbigpIHtcbiAgICBpZiAoIShcInN0YWNrXCIgaW4gbmV3IEVycm9yKCkpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKGNhbkF0dGFjaFRyYWNlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgICAgICAgdHJ5IHt0aHJvdyBuZXcgRXJyb3Ioc2FmZVRvU3RyaW5nKHZhbHVlKSk7fVxuICAgICAgICAgICAgY2F0Y2goZXJyKSB7cmV0dXJuIGVycjt9XG4gICAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAoY2FuQXR0YWNoVHJhY2UodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICByZXR1cm4gbmV3IEVycm9yKHNhZmVUb1N0cmluZyh2YWx1ZSkpO1xuICAgICAgICB9O1xuICAgIH1cbn0pKCk7XG5cbmZ1bmN0aW9uIGNsYXNzU3RyaW5nKG9iaikge1xuICAgIHJldHVybiB7fS50b1N0cmluZy5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIGNvcHlEZXNjcmlwdG9ycyhmcm9tLCB0bywgZmlsdGVyKSB7XG4gICAgdmFyIGtleXMgPSBlczUubmFtZXMoZnJvbSk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICBpZiAoZmlsdGVyKGtleSkpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZXM1LmRlZmluZVByb3BlcnR5KHRvLCBrZXksIGVzNS5nZXREZXNjcmlwdG9yKGZyb20sIGtleSkpO1xuICAgICAgICAgICAgfSBjYXRjaCAoaWdub3JlKSB7fVxuICAgICAgICB9XG4gICAgfVxufVxuXG52YXIgYXNBcnJheSA9IGZ1bmN0aW9uKHYpIHtcbiAgICBpZiAoZXM1LmlzQXJyYXkodikpIHtcbiAgICAgICAgcmV0dXJuIHY7XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufTtcblxuaWYgKHR5cGVvZiBTeW1ib2wgIT09IFwidW5kZWZpbmVkXCIgJiYgU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgdmFyIEFycmF5RnJvbSA9IHR5cGVvZiBBcnJheS5mcm9tID09PSBcImZ1bmN0aW9uXCIgPyBmdW5jdGlvbih2KSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHYpO1xuICAgIH0gOiBmdW5jdGlvbih2KSB7XG4gICAgICAgIHZhciByZXQgPSBbXTtcbiAgICAgICAgdmFyIGl0ID0gdltTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgICAgIHZhciBpdFJlc3VsdDtcbiAgICAgICAgd2hpbGUgKCEoKGl0UmVzdWx0ID0gaXQubmV4dCgpKS5kb25lKSkge1xuICAgICAgICAgICAgcmV0LnB1c2goaXRSZXN1bHQudmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXQ7XG4gICAgfTtcblxuICAgIGFzQXJyYXkgPSBmdW5jdGlvbih2KSB7XG4gICAgICAgIGlmIChlczUuaXNBcnJheSh2KSkge1xuICAgICAgICAgICAgcmV0dXJuIHY7XG4gICAgICAgIH0gZWxzZSBpZiAodiAhPSBudWxsICYmIHR5cGVvZiB2W1N5bWJvbC5pdGVyYXRvcl0gPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5RnJvbSh2KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufVxuXG52YXIgaXNOb2RlID0gdHlwZW9mIHByb2Nlc3MgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgY2xhc3NTdHJpbmcocHJvY2VzcykudG9Mb3dlckNhc2UoKSA9PT0gXCJbb2JqZWN0IHByb2Nlc3NdXCI7XG5cbnZhciBoYXNFbnZWYXJpYWJsZXMgPSB0eXBlb2YgcHJvY2VzcyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgIHR5cGVvZiBwcm9jZXNzLmVudiAhPT0gXCJ1bmRlZmluZWRcIjtcblxuZnVuY3Rpb24gZW52KGtleSkge1xuICAgIHJldHVybiBoYXNFbnZWYXJpYWJsZXMgPyBwcm9jZXNzLmVudltrZXldIDogdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBnZXROYXRpdmVQcm9taXNlKCkge1xuICAgIGlmICh0eXBlb2YgUHJvbWlzZSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIgcHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uKCl7fSk7XG4gICAgICAgICAgICBpZiAoe30udG9TdHJpbmcuY2FsbChwcm9taXNlKSA9PT0gXCJbb2JqZWN0IFByb21pc2VdXCIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge31cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGRvbWFpbkJpbmQoc2VsZiwgY2IpIHtcbiAgICByZXR1cm4gc2VsZi5iaW5kKGNiKTtcbn1cblxudmFyIHJldCA9IHtcbiAgICBpc0NsYXNzOiBpc0NsYXNzLFxuICAgIGlzSWRlbnRpZmllcjogaXNJZGVudGlmaWVyLFxuICAgIGluaGVyaXRlZERhdGFLZXlzOiBpbmhlcml0ZWREYXRhS2V5cyxcbiAgICBnZXREYXRhUHJvcGVydHlPckRlZmF1bHQ6IGdldERhdGFQcm9wZXJ0eU9yRGVmYXVsdCxcbiAgICB0aHJvd2VyOiB0aHJvd2VyLFxuICAgIGlzQXJyYXk6IGVzNS5pc0FycmF5LFxuICAgIGFzQXJyYXk6IGFzQXJyYXksXG4gICAgbm90RW51bWVyYWJsZVByb3A6IG5vdEVudW1lcmFibGVQcm9wLFxuICAgIGlzUHJpbWl0aXZlOiBpc1ByaW1pdGl2ZSxcbiAgICBpc09iamVjdDogaXNPYmplY3QsXG4gICAgaXNFcnJvcjogaXNFcnJvcixcbiAgICBjYW5FdmFsdWF0ZTogY2FuRXZhbHVhdGUsXG4gICAgZXJyb3JPYmo6IGVycm9yT2JqLFxuICAgIHRyeUNhdGNoOiB0cnlDYXRjaCxcbiAgICBpbmhlcml0czogaW5oZXJpdHMsXG4gICAgd2l0aEFwcGVuZGVkOiB3aXRoQXBwZW5kZWQsXG4gICAgbWF5YmVXcmFwQXNFcnJvcjogbWF5YmVXcmFwQXNFcnJvcixcbiAgICB0b0Zhc3RQcm9wZXJ0aWVzOiB0b0Zhc3RQcm9wZXJ0aWVzLFxuICAgIGZpbGxlZFJhbmdlOiBmaWxsZWRSYW5nZSxcbiAgICB0b1N0cmluZzogc2FmZVRvU3RyaW5nLFxuICAgIGNhbkF0dGFjaFRyYWNlOiBjYW5BdHRhY2hUcmFjZSxcbiAgICBlbnN1cmVFcnJvck9iamVjdDogZW5zdXJlRXJyb3JPYmplY3QsXG4gICAgb3JpZ2luYXRlc0Zyb21SZWplY3Rpb246IG9yaWdpbmF0ZXNGcm9tUmVqZWN0aW9uLFxuICAgIG1hcmtBc09yaWdpbmF0aW5nRnJvbVJlamVjdGlvbjogbWFya0FzT3JpZ2luYXRpbmdGcm9tUmVqZWN0aW9uLFxuICAgIGNsYXNzU3RyaW5nOiBjbGFzc1N0cmluZyxcbiAgICBjb3B5RGVzY3JpcHRvcnM6IGNvcHlEZXNjcmlwdG9ycyxcbiAgICBoYXNEZXZUb29sczogdHlwZW9mIGNocm9tZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjaHJvbWUgJiZcbiAgICAgICAgICAgICAgICAgdHlwZW9mIGNocm9tZS5sb2FkVGltZXMgPT09IFwiZnVuY3Rpb25cIixcbiAgICBpc05vZGU6IGlzTm9kZSxcbiAgICBoYXNFbnZWYXJpYWJsZXM6IGhhc0VudlZhcmlhYmxlcyxcbiAgICBlbnY6IGVudixcbiAgICBnbG9iYWw6IGdsb2JhbE9iamVjdCxcbiAgICBnZXROYXRpdmVQcm9taXNlOiBnZXROYXRpdmVQcm9taXNlLFxuICAgIGRvbWFpbkJpbmQ6IGRvbWFpbkJpbmRcbn07XG5yZXQuaXNSZWNlbnROb2RlID0gcmV0LmlzTm9kZSAmJiAoZnVuY3Rpb24oKSB7XG4gICAgdmFyIHZlcnNpb24gPSBwcm9jZXNzLnZlcnNpb25zLm5vZGUuc3BsaXQoXCIuXCIpLm1hcChOdW1iZXIpO1xuICAgIHJldHVybiAodmVyc2lvblswXSA9PT0gMCAmJiB2ZXJzaW9uWzFdID4gMTApIHx8ICh2ZXJzaW9uWzBdID4gMCk7XG59KSgpO1xuXG5pZiAocmV0LmlzTm9kZSkgcmV0LnRvRmFzdFByb3BlcnRpZXMocHJvY2Vzcyk7XG5cbnRyeSB7dGhyb3cgbmV3IEVycm9yKCk7IH0gY2F0Y2ggKGUpIHtyZXQubGFzdExpbmVFcnJvciA9IGU7fVxubW9kdWxlLmV4cG9ydHMgPSByZXQ7XG5cbn0se1wiLi9lczVcIjoxM31dfSx7fSxbNF0pKDQpXG59KTsgICAgICAgICAgICAgICAgICAgIDtpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93ICE9PSBudWxsKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5QID0gd2luZG93LlByb21pc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJyAmJiBzZWxmICE9PSBudWxsKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxmLlAgPSBzZWxmLlByb21pc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSIsIi8vIHNoaW0gZm9yIHVzaW5nIHByb2Nlc3MgaW4gYnJvd3NlclxudmFyIHByb2Nlc3MgPSBtb2R1bGUuZXhwb3J0cyA9IHt9O1xuXG4vLyBjYWNoZWQgZnJvbSB3aGF0ZXZlciBnbG9iYWwgaXMgcHJlc2VudCBzbyB0aGF0IHRlc3QgcnVubmVycyB0aGF0IHN0dWIgaXRcbi8vIGRvbid0IGJyZWFrIHRoaW5ncy4gIEJ1dCB3ZSBuZWVkIHRvIHdyYXAgaXQgaW4gYSB0cnkgY2F0Y2ggaW4gY2FzZSBpdCBpc1xuLy8gd3JhcHBlZCBpbiBzdHJpY3QgbW9kZSBjb2RlIHdoaWNoIGRvZXNuJ3QgZGVmaW5lIGFueSBnbG9iYWxzLiAgSXQncyBpbnNpZGUgYVxuLy8gZnVuY3Rpb24gYmVjYXVzZSB0cnkvY2F0Y2hlcyBkZW9wdGltaXplIGluIGNlcnRhaW4gZW5naW5lcy5cblxudmFyIGNhY2hlZFNldFRpbWVvdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0O1xuXG5mdW5jdGlvbiBkZWZhdWx0U2V0VGltb3V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0VGltZW91dCBoYXMgbm90IGJlZW4gZGVmaW5lZCcpO1xufVxuZnVuY3Rpb24gZGVmYXVsdENsZWFyVGltZW91dCAoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdjbGVhclRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbihmdW5jdGlvbiAoKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBkZWZhdWx0U2V0VGltb3V0O1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBjYWNoZWRTZXRUaW1lb3V0ID0gZGVmYXVsdFNldFRpbW91dDtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgaWYgKHR5cGVvZiBjbGVhclRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGRlZmF1bHRDbGVhclRpbWVvdXQ7XG4gICAgfVxufSAoKSlcbmZ1bmN0aW9uIHJ1blRpbWVvdXQoZnVuKSB7XG4gICAgaWYgKGNhY2hlZFNldFRpbWVvdXQgPT09IHNldFRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIC8vIGlmIHNldFRpbWVvdXQgd2Fzbid0IGF2YWlsYWJsZSBidXQgd2FzIGxhdHRlciBkZWZpbmVkXG4gICAgaWYgKChjYWNoZWRTZXRUaW1lb3V0ID09PSBkZWZhdWx0U2V0VGltb3V0IHx8ICFjYWNoZWRTZXRUaW1lb3V0KSAmJiBzZXRUaW1lb3V0KSB7XG4gICAgICAgIGNhY2hlZFNldFRpbWVvdXQgPSBzZXRUaW1lb3V0O1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW4sIDApO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICAvLyB3aGVuIHdoZW4gc29tZWJvZHkgaGFzIHNjcmV3ZWQgd2l0aCBzZXRUaW1lb3V0IGJ1dCBubyBJLkUuIG1hZGRuZXNzXG4gICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfSBjYXRjaChlKXtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIFdoZW4gd2UgYXJlIGluIEkuRS4gYnV0IHRoZSBzY3JpcHQgaGFzIGJlZW4gZXZhbGVkIHNvIEkuRS4gZG9lc24ndCB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbChudWxsLCBmdW4sIDApO1xuICAgICAgICB9IGNhdGNoKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3JcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRTZXRUaW1lb3V0LmNhbGwodGhpcywgZnVuLCAwKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG59XG5mdW5jdGlvbiBydW5DbGVhclRpbWVvdXQobWFya2VyKSB7XG4gICAgaWYgKGNhY2hlZENsZWFyVGltZW91dCA9PT0gY2xlYXJUaW1lb3V0KSB7XG4gICAgICAgIC8vbm9ybWFsIGVudmlyb21lbnRzIGluIHNhbmUgc2l0dWF0aW9uc1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIC8vIGlmIGNsZWFyVGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZENsZWFyVGltZW91dCA9PT0gZGVmYXVsdENsZWFyVGltZW91dCB8fCAhY2FjaGVkQ2xlYXJUaW1lb3V0KSAmJiBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gY2xlYXJUaW1lb3V0O1xuICAgICAgICByZXR1cm4gY2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dChtYXJrZXIpO1xuICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0ICB0cnVzdCB0aGUgZ2xvYmFsIG9iamVjdCB3aGVuIGNhbGxlZCBub3JtYWxseVxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZENsZWFyVGltZW91dC5jYWxsKG51bGwsIG1hcmtlcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpe1xuICAgICAgICAgICAgLy8gc2FtZSBhcyBhYm92ZSBidXQgd2hlbiBpdCdzIGEgdmVyc2lvbiBvZiBJLkUuIHRoYXQgbXVzdCBoYXZlIHRoZSBnbG9iYWwgb2JqZWN0IGZvciAndGhpcycsIGhvcGZ1bGx5IG91ciBjb250ZXh0IGNvcnJlY3Qgb3RoZXJ3aXNlIGl0IHdpbGwgdGhyb3cgYSBnbG9iYWwgZXJyb3IuXG4gICAgICAgICAgICAvLyBTb21lIHZlcnNpb25zIG9mIEkuRS4gaGF2ZSBkaWZmZXJlbnQgcnVsZXMgZm9yIGNsZWFyVGltZW91dCB2cyBzZXRUaW1lb3V0XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwodGhpcywgbWFya2VyKTtcbiAgICAgICAgfVxuICAgIH1cblxuXG5cbn1cbnZhciBxdWV1ZSA9IFtdO1xudmFyIGRyYWluaW5nID0gZmFsc2U7XG52YXIgY3VycmVudFF1ZXVlO1xudmFyIHF1ZXVlSW5kZXggPSAtMTtcblxuZnVuY3Rpb24gY2xlYW5VcE5leHRUaWNrKCkge1xuICAgIGlmICghZHJhaW5pbmcgfHwgIWN1cnJlbnRRdWV1ZSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgaWYgKGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWUuY29uY2F0KHF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgfVxuICAgIGlmIChxdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgZHJhaW5RdWV1ZSgpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZHJhaW5RdWV1ZSgpIHtcbiAgICBpZiAoZHJhaW5pbmcpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgdGltZW91dCA9IHJ1blRpbWVvdXQoY2xlYW5VcE5leHRUaWNrKTtcbiAgICBkcmFpbmluZyA9IHRydWU7XG5cbiAgICB2YXIgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIHdoaWxlKGxlbikge1xuICAgICAgICBjdXJyZW50UXVldWUgPSBxdWV1ZTtcbiAgICAgICAgcXVldWUgPSBbXTtcbiAgICAgICAgd2hpbGUgKCsrcXVldWVJbmRleCA8IGxlbikge1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRRdWV1ZSkge1xuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZVtxdWV1ZUluZGV4XS5ydW4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBxdWV1ZUluZGV4ID0gLTE7XG4gICAgICAgIGxlbiA9IHF1ZXVlLmxlbmd0aDtcbiAgICB9XG4gICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICBkcmFpbmluZyA9IGZhbHNlO1xuICAgIHJ1bkNsZWFyVGltZW91dCh0aW1lb3V0KTtcbn1cblxucHJvY2Vzcy5uZXh0VGljayA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICB2YXIgYXJncyA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSk7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBhcmdzW2kgLSAxXSA9IGFyZ3VtZW50c1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBxdWV1ZS5wdXNoKG5ldyBJdGVtKGZ1biwgYXJncykpO1xuICAgIGlmIChxdWV1ZS5sZW5ndGggPT09IDEgJiYgIWRyYWluaW5nKSB7XG4gICAgICAgIHJ1blRpbWVvdXQoZHJhaW5RdWV1ZSk7XG4gICAgfVxufTtcblxuLy8gdjggbGlrZXMgcHJlZGljdGlibGUgb2JqZWN0c1xuZnVuY3Rpb24gSXRlbShmdW4sIGFycmF5KSB7XG4gICAgdGhpcy5mdW4gPSBmdW47XG4gICAgdGhpcy5hcnJheSA9IGFycmF5O1xufVxuSXRlbS5wcm90b3R5cGUucnVuID0gZnVuY3Rpb24gKCkge1xuICAgIHRoaXMuZnVuLmFwcGx5KG51bGwsIHRoaXMuYXJyYXkpO1xufTtcbnByb2Nlc3MudGl0bGUgPSAnYnJvd3Nlcic7XG5wcm9jZXNzLmJyb3dzZXIgPSB0cnVlO1xucHJvY2Vzcy5lbnYgPSB7fTtcbnByb2Nlc3MuYXJndiA9IFtdO1xucHJvY2Vzcy52ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5wcm9jZXNzLnZlcnNpb25zID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5wcm9jZXNzLm9uID0gbm9vcDtcbnByb2Nlc3MuYWRkTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5vbmNlID0gbm9vcDtcbnByb2Nlc3Mub2ZmID0gbm9vcDtcbnByb2Nlc3MucmVtb3ZlTGlzdGVuZXIgPSBub29wO1xucHJvY2Vzcy5yZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xucHJvY2Vzcy5lbWl0ID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZExpc3RlbmVyID0gbm9vcDtcbnByb2Nlc3MucHJlcGVuZE9uY2VMaXN0ZW5lciA9IG5vb3A7XG5cbnByb2Nlc3MubGlzdGVuZXJzID0gZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIFtdIH1cblxucHJvY2Vzcy5iaW5kaW5nID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuYmluZGluZyBpcyBub3Qgc3VwcG9ydGVkJyk7XG59O1xuXG5wcm9jZXNzLmN3ZCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuICcvJyB9O1xucHJvY2Vzcy5jaGRpciA9IGZ1bmN0aW9uIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbnByb2Nlc3MudW1hc2sgPSBmdW5jdGlvbigpIHsgcmV0dXJuIDA7IH07XG4iLCIvLyAgICAgVW5kZXJzY29yZS5qcyAxLjguM1xuLy8gICAgIGh0dHA6Ly91bmRlcnNjb3JlanMub3JnXG4vLyAgICAgKGMpIDIwMDktMjAxNSBKZXJlbXkgQXNoa2VuYXMsIERvY3VtZW50Q2xvdWQgYW5kIEludmVzdGlnYXRpdmUgUmVwb3J0ZXJzICYgRWRpdG9yc1xuLy8gICAgIFVuZGVyc2NvcmUgbWF5IGJlIGZyZWVseSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UuXG5cbihmdW5jdGlvbigpIHtcblxuICAvLyBCYXNlbGluZSBzZXR1cFxuICAvLyAtLS0tLS0tLS0tLS0tLVxuXG4gIC8vIEVzdGFibGlzaCB0aGUgcm9vdCBvYmplY3QsIGB3aW5kb3dgIGluIHRoZSBicm93c2VyLCBvciBgZXhwb3J0c2Agb24gdGhlIHNlcnZlci5cbiAgdmFyIHJvb3QgPSB0aGlzO1xuXG4gIC8vIFNhdmUgdGhlIHByZXZpb3VzIHZhbHVlIG9mIHRoZSBgX2AgdmFyaWFibGUuXG4gIHZhciBwcmV2aW91c1VuZGVyc2NvcmUgPSByb290Ll87XG5cbiAgLy8gU2F2ZSBieXRlcyBpbiB0aGUgbWluaWZpZWQgKGJ1dCBub3QgZ3ppcHBlZCkgdmVyc2lvbjpcbiAgdmFyIEFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGUsIE9ialByb3RvID0gT2JqZWN0LnByb3RvdHlwZSwgRnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4gIC8vIENyZWF0ZSBxdWljayByZWZlcmVuY2UgdmFyaWFibGVzIGZvciBzcGVlZCBhY2Nlc3MgdG8gY29yZSBwcm90b3R5cGVzLlxuICB2YXJcbiAgICBwdXNoICAgICAgICAgICAgID0gQXJyYXlQcm90by5wdXNoLFxuICAgIHNsaWNlICAgICAgICAgICAgPSBBcnJheVByb3RvLnNsaWNlLFxuICAgIHRvU3RyaW5nICAgICAgICAgPSBPYmpQcm90by50b1N0cmluZyxcbiAgICBoYXNPd25Qcm9wZXJ0eSAgID0gT2JqUHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbiAgLy8gQWxsICoqRUNNQVNjcmlwdCA1KiogbmF0aXZlIGZ1bmN0aW9uIGltcGxlbWVudGF0aW9ucyB0aGF0IHdlIGhvcGUgdG8gdXNlXG4gIC8vIGFyZSBkZWNsYXJlZCBoZXJlLlxuICB2YXJcbiAgICBuYXRpdmVJc0FycmF5ICAgICAgPSBBcnJheS5pc0FycmF5LFxuICAgIG5hdGl2ZUtleXMgICAgICAgICA9IE9iamVjdC5rZXlzLFxuICAgIG5hdGl2ZUJpbmQgICAgICAgICA9IEZ1bmNQcm90by5iaW5kLFxuICAgIG5hdGl2ZUNyZWF0ZSAgICAgICA9IE9iamVjdC5jcmVhdGU7XG5cbiAgLy8gTmFrZWQgZnVuY3Rpb24gcmVmZXJlbmNlIGZvciBzdXJyb2dhdGUtcHJvdG90eXBlLXN3YXBwaW5nLlxuICB2YXIgQ3RvciA9IGZ1bmN0aW9uKCl7fTtcblxuICAvLyBDcmVhdGUgYSBzYWZlIHJlZmVyZW5jZSB0byB0aGUgVW5kZXJzY29yZSBvYmplY3QgZm9yIHVzZSBiZWxvdy5cbiAgdmFyIF8gPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAob2JqIGluc3RhbmNlb2YgXykgcmV0dXJuIG9iajtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgXykpIHJldHVybiBuZXcgXyhvYmopO1xuICAgIHRoaXMuX3dyYXBwZWQgPSBvYmo7XG4gIH07XG5cbiAgLy8gRXhwb3J0IHRoZSBVbmRlcnNjb3JlIG9iamVjdCBmb3IgKipOb2RlLmpzKiosIHdpdGhcbiAgLy8gYmFja3dhcmRzLWNvbXBhdGliaWxpdHkgZm9yIHRoZSBvbGQgYHJlcXVpcmUoKWAgQVBJLiBJZiB3ZSdyZSBpblxuICAvLyB0aGUgYnJvd3NlciwgYWRkIGBfYCBhcyBhIGdsb2JhbCBvYmplY3QuXG4gIGlmICh0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF87XG4gICAgfVxuICAgIGV4cG9ydHMuXyA9IF87XG4gIH0gZWxzZSB7XG4gICAgcm9vdC5fID0gXztcbiAgfVxuXG4gIC8vIEN1cnJlbnQgdmVyc2lvbi5cbiAgXy5WRVJTSU9OID0gJzEuOC4zJztcblxuICAvLyBJbnRlcm5hbCBmdW5jdGlvbiB0aGF0IHJldHVybnMgYW4gZWZmaWNpZW50IChmb3IgY3VycmVudCBlbmdpbmVzKSB2ZXJzaW9uXG4gIC8vIG9mIHRoZSBwYXNzZWQtaW4gY2FsbGJhY2ssIHRvIGJlIHJlcGVhdGVkbHkgYXBwbGllZCBpbiBvdGhlciBVbmRlcnNjb3JlXG4gIC8vIGZ1bmN0aW9ucy5cbiAgdmFyIG9wdGltaXplQ2IgPSBmdW5jdGlvbihmdW5jLCBjb250ZXh0LCBhcmdDb3VudCkge1xuICAgIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHJldHVybiBmdW5jO1xuICAgIHN3aXRjaCAoYXJnQ291bnQgPT0gbnVsbCA/IDMgOiBhcmdDb3VudCkge1xuICAgICAgY2FzZSAxOiByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSk7XG4gICAgICB9O1xuICAgICAgY2FzZSAyOiByZXR1cm4gZnVuY3Rpb24odmFsdWUsIG90aGVyKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmNhbGwoY29udGV4dCwgdmFsdWUsIG90aGVyKTtcbiAgICAgIH07XG4gICAgICBjYXNlIDM6IHJldHVybiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pO1xuICAgICAgfTtcbiAgICAgIGNhc2UgNDogcmV0dXJuIGZ1bmN0aW9uKGFjY3VtdWxhdG9yLCB2YWx1ZSwgaW5kZXgsIGNvbGxlY3Rpb24pIHtcbiAgICAgICAgcmV0dXJuIGZ1bmMuY2FsbChjb250ZXh0LCBhY2N1bXVsYXRvciwgdmFsdWUsIGluZGV4LCBjb2xsZWN0aW9uKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3VtZW50cyk7XG4gICAgfTtcbiAgfTtcblxuICAvLyBBIG1vc3RseS1pbnRlcm5hbCBmdW5jdGlvbiB0byBnZW5lcmF0ZSBjYWxsYmFja3MgdGhhdCBjYW4gYmUgYXBwbGllZFxuICAvLyB0byBlYWNoIGVsZW1lbnQgaW4gYSBjb2xsZWN0aW9uLCByZXR1cm5pbmcgdGhlIGRlc2lyZWQgcmVzdWx0IOKAlCBlaXRoZXJcbiAgLy8gaWRlbnRpdHksIGFuIGFyYml0cmFyeSBjYWxsYmFjaywgYSBwcm9wZXJ0eSBtYXRjaGVyLCBvciBhIHByb3BlcnR5IGFjY2Vzc29yLlxuICB2YXIgY2IgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCwgYXJnQ291bnQpIHtcbiAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIF8uaWRlbnRpdHk7XG4gICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybiBvcHRpbWl6ZUNiKHZhbHVlLCBjb250ZXh0LCBhcmdDb3VudCk7XG4gICAgaWYgKF8uaXNPYmplY3QodmFsdWUpKSByZXR1cm4gXy5tYXRjaGVyKHZhbHVlKTtcbiAgICByZXR1cm4gXy5wcm9wZXJ0eSh2YWx1ZSk7XG4gIH07XG4gIF8uaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBjYih2YWx1ZSwgY29udGV4dCwgSW5maW5pdHkpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhc3NpZ25lciBmdW5jdGlvbnMuXG4gIHZhciBjcmVhdGVBc3NpZ25lciA9IGZ1bmN0aW9uKGtleXNGdW5jLCB1bmRlZmluZWRPbmx5KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaikge1xuICAgICAgdmFyIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoIDwgMiB8fCBvYmogPT0gbnVsbCkgcmV0dXJuIG9iajtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMTsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpbmRleF0sXG4gICAgICAgICAgICBrZXlzID0ga2V5c0Z1bmMoc291cmNlKSxcbiAgICAgICAgICAgIGwgPSBrZXlzLmxlbmd0aDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICBpZiAoIXVuZGVmaW5lZE9ubHkgfHwgb2JqW2tleV0gPT09IHZvaWQgMCkgb2JqW2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG9iajtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIGZvciBjcmVhdGluZyBhIG5ldyBvYmplY3QgdGhhdCBpbmhlcml0cyBmcm9tIGFub3RoZXIuXG4gIHZhciBiYXNlQ3JlYXRlID0gZnVuY3Rpb24ocHJvdG90eXBlKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KHByb3RvdHlwZSkpIHJldHVybiB7fTtcbiAgICBpZiAobmF0aXZlQ3JlYXRlKSByZXR1cm4gbmF0aXZlQ3JlYXRlKHByb3RvdHlwZSk7XG4gICAgQ3Rvci5wcm90b3R5cGUgPSBwcm90b3R5cGU7XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBDdG9yO1xuICAgIEN0b3IucHJvdG90eXBlID0gbnVsbDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIHZhciBwcm9wZXJ0eSA9IGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBvYmogPT0gbnVsbCA/IHZvaWQgMCA6IG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gSGVscGVyIGZvciBjb2xsZWN0aW9uIG1ldGhvZHMgdG8gZGV0ZXJtaW5lIHdoZXRoZXIgYSBjb2xsZWN0aW9uXG4gIC8vIHNob3VsZCBiZSBpdGVyYXRlZCBhcyBhbiBhcnJheSBvciBhcyBhbiBvYmplY3RcbiAgLy8gUmVsYXRlZDogaHR0cDovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtdG9sZW5ndGhcbiAgLy8gQXZvaWRzIGEgdmVyeSBuYXN0eSBpT1MgOCBKSVQgYnVnIG9uIEFSTS02NC4gIzIwOTRcbiAgdmFyIE1BWF9BUlJBWV9JTkRFWCA9IE1hdGgucG93KDIsIDUzKSAtIDE7XG4gIHZhciBnZXRMZW5ndGggPSBwcm9wZXJ0eSgnbGVuZ3RoJyk7XG4gIHZhciBpc0FycmF5TGlrZSA9IGZ1bmN0aW9uKGNvbGxlY3Rpb24pIHtcbiAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGNvbGxlY3Rpb24pO1xuICAgIHJldHVybiB0eXBlb2YgbGVuZ3RoID09ICdudW1iZXInICYmIGxlbmd0aCA+PSAwICYmIGxlbmd0aCA8PSBNQVhfQVJSQVlfSU5ERVg7XG4gIH07XG5cbiAgLy8gQ29sbGVjdGlvbiBGdW5jdGlvbnNcbiAgLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuICAvLyBUaGUgY29ybmVyc3RvbmUsIGFuIGBlYWNoYCBpbXBsZW1lbnRhdGlvbiwgYWthIGBmb3JFYWNoYC5cbiAgLy8gSGFuZGxlcyByYXcgb2JqZWN0cyBpbiBhZGRpdGlvbiB0byBhcnJheS1saWtlcy4gVHJlYXRzIGFsbFxuICAvLyBzcGFyc2UgYXJyYXktbGlrZXMgYXMgaWYgdGhleSB3ZXJlIGRlbnNlLlxuICBfLmVhY2ggPSBfLmZvckVhY2ggPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIgaSwgbGVuZ3RoO1xuICAgIGlmIChpc0FycmF5TGlrZShvYmopKSB7XG4gICAgICBmb3IgKGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaXRlcmF0ZWUob2JqW2ldLCBpLCBvYmopO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgICAgZm9yIChpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBpdGVyYXRlZShvYmpba2V5c1tpXV0sIGtleXNbaV0sIG9iaik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQuXG4gIF8ubWFwID0gXy5jb2xsZWN0ID0gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICByZXN1bHRzID0gQXJyYXkobGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgcmVzdWx0c1tpbmRleF0gPSBpdGVyYXRlZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaik7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzO1xuICB9O1xuXG4gIC8vIENyZWF0ZSBhIHJlZHVjaW5nIGZ1bmN0aW9uIGl0ZXJhdGluZyBsZWZ0IG9yIHJpZ2h0LlxuICBmdW5jdGlvbiBjcmVhdGVSZWR1Y2UoZGlyKSB7XG4gICAgLy8gT3B0aW1pemVkIGl0ZXJhdG9yIGZ1bmN0aW9uIGFzIHVzaW5nIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAvLyBpbiB0aGUgbWFpbiBmdW5jdGlvbiB3aWxsIGRlb3B0aW1pemUgdGhlLCBzZWUgIzE5OTEuXG4gICAgZnVuY3Rpb24gaXRlcmF0b3Iob2JqLCBpdGVyYXRlZSwgbWVtbywga2V5cywgaW5kZXgsIGxlbmd0aCkge1xuICAgICAgZm9yICg7IGluZGV4ID49IDAgJiYgaW5kZXggPCBsZW5ndGg7IGluZGV4ICs9IGRpcikge1xuICAgICAgICB2YXIgY3VycmVudEtleSA9IGtleXMgPyBrZXlzW2luZGV4XSA6IGluZGV4O1xuICAgICAgICBtZW1vID0gaXRlcmF0ZWUobWVtbywgb2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1lbW87XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIG1lbW8sIGNvbnRleHQpIHtcbiAgICAgIGl0ZXJhdGVlID0gb3B0aW1pemVDYihpdGVyYXRlZSwgY29udGV4dCwgNCk7XG4gICAgICB2YXIga2V5cyA9ICFpc0FycmF5TGlrZShvYmopICYmIF8ua2V5cyhvYmopLFxuICAgICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoLFxuICAgICAgICAgIGluZGV4ID0gZGlyID4gMCA/IDAgOiBsZW5ndGggLSAxO1xuICAgICAgLy8gRGV0ZXJtaW5lIHRoZSBpbml0aWFsIHZhbHVlIGlmIG5vbmUgaXMgcHJvdmlkZWQuXG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA8IDMpIHtcbiAgICAgICAgbWVtbyA9IG9ialtrZXlzID8ga2V5c1tpbmRleF0gOiBpbmRleF07XG4gICAgICAgIGluZGV4ICs9IGRpcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpdGVyYXRvcihvYmosIGl0ZXJhdGVlLCBtZW1vLCBrZXlzLCBpbmRleCwgbGVuZ3RoKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gKipSZWR1Y2UqKiBidWlsZHMgdXAgYSBzaW5nbGUgcmVzdWx0IGZyb20gYSBsaXN0IG9mIHZhbHVlcywgYWthIGBpbmplY3RgLFxuICAvLyBvciBgZm9sZGxgLlxuICBfLnJlZHVjZSA9IF8uZm9sZGwgPSBfLmluamVjdCA9IGNyZWF0ZVJlZHVjZSgxKTtcblxuICAvLyBUaGUgcmlnaHQtYXNzb2NpYXRpdmUgdmVyc2lvbiBvZiByZWR1Y2UsIGFsc28ga25vd24gYXMgYGZvbGRyYC5cbiAgXy5yZWR1Y2VSaWdodCA9IF8uZm9sZHIgPSBjcmVhdGVSZWR1Y2UoLTEpO1xuXG4gIC8vIFJldHVybiB0aGUgZmlyc3QgdmFsdWUgd2hpY2ggcGFzc2VzIGEgdHJ1dGggdGVzdC4gQWxpYXNlZCBhcyBgZGV0ZWN0YC5cbiAgXy5maW5kID0gXy5kZXRlY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHZhciBrZXk7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHtcbiAgICAgIGtleSA9IF8uZmluZEluZGV4KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9IGVsc2Uge1xuICAgICAga2V5ID0gXy5maW5kS2V5KG9iaiwgcHJlZGljYXRlLCBjb250ZXh0KTtcbiAgICB9XG4gICAgaWYgKGtleSAhPT0gdm9pZCAwICYmIGtleSAhPT0gLTEpIHJldHVybiBvYmpba2V5XTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyB0aGF0IHBhc3MgYSB0cnV0aCB0ZXN0LlxuICAvLyBBbGlhc2VkIGFzIGBzZWxlY3RgLlxuICBfLmZpbHRlciA9IF8uc2VsZWN0ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0cyA9IFtdO1xuICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgbGlzdCkpIHJlc3VsdHMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGFsbCB0aGUgZWxlbWVudHMgZm9yIHdoaWNoIGEgdHJ1dGggdGVzdCBmYWlscy5cbiAgXy5yZWplY3QgPSBmdW5jdGlvbihvYmosIHByZWRpY2F0ZSwgY29udGV4dCkge1xuICAgIHJldHVybiBfLmZpbHRlcihvYmosIF8ubmVnYXRlKGNiKHByZWRpY2F0ZSkpLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgd2hldGhlciBhbGwgb2YgdGhlIGVsZW1lbnRzIG1hdGNoIGEgdHJ1dGggdGVzdC5cbiAgLy8gQWxpYXNlZCBhcyBgYWxsYC5cbiAgXy5ldmVyeSA9IF8uYWxsID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAoIXByZWRpY2F0ZShvYmpbY3VycmVudEtleV0sIGN1cnJlbnRLZXksIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cbiAgLy8gRGV0ZXJtaW5lIGlmIGF0IGxlYXN0IG9uZSBlbGVtZW50IGluIHRoZSBvYmplY3QgbWF0Y2hlcyBhIHRydXRoIHRlc3QuXG4gIC8vIEFsaWFzZWQgYXMgYGFueWAuXG4gIF8uc29tZSA9IF8uYW55ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gIWlzQXJyYXlMaWtlKG9iaikgJiYgXy5rZXlzKG9iaiksXG4gICAgICAgIGxlbmd0aCA9IChrZXlzIHx8IG9iaikubGVuZ3RoO1xuICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHZhciBjdXJyZW50S2V5ID0ga2V5cyA/IGtleXNbaW5kZXhdIDogaW5kZXg7XG4gICAgICBpZiAocHJlZGljYXRlKG9ialtjdXJyZW50S2V5XSwgY3VycmVudEtleSwgb2JqKSkgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICAvLyBEZXRlcm1pbmUgaWYgdGhlIGFycmF5IG9yIG9iamVjdCBjb250YWlucyBhIGdpdmVuIGl0ZW0gKHVzaW5nIGA9PT1gKS5cbiAgLy8gQWxpYXNlZCBhcyBgaW5jbHVkZXNgIGFuZCBgaW5jbHVkZWAuXG4gIF8uY29udGFpbnMgPSBfLmluY2x1ZGVzID0gXy5pbmNsdWRlID0gZnVuY3Rpb24ob2JqLCBpdGVtLCBmcm9tSW5kZXgsIGd1YXJkKSB7XG4gICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgIGlmICh0eXBlb2YgZnJvbUluZGV4ICE9ICdudW1iZXInIHx8IGd1YXJkKSBmcm9tSW5kZXggPSAwO1xuICAgIHJldHVybiBfLmluZGV4T2Yob2JqLCBpdGVtLCBmcm9tSW5kZXgpID49IDA7XG4gIH07XG5cbiAgLy8gSW52b2tlIGEgbWV0aG9kICh3aXRoIGFyZ3VtZW50cykgb24gZXZlcnkgaXRlbSBpbiBhIGNvbGxlY3Rpb24uXG4gIF8uaW52b2tlID0gZnVuY3Rpb24ob2JqLCBtZXRob2QpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICB2YXIgaXNGdW5jID0gXy5pc0Z1bmN0aW9uKG1ldGhvZCk7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgIHZhciBmdW5jID0gaXNGdW5jID8gbWV0aG9kIDogdmFsdWVbbWV0aG9kXTtcbiAgICAgIHJldHVybiBmdW5jID09IG51bGwgPyBmdW5jIDogZnVuYy5hcHBseSh2YWx1ZSwgYXJncyk7XG4gICAgfSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgbWFwYDogZmV0Y2hpbmcgYSBwcm9wZXJ0eS5cbiAgXy5wbHVjayA9IGZ1bmN0aW9uKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIF8ubWFwKG9iaiwgXy5wcm9wZXJ0eShrZXkpKTtcbiAgfTtcblxuICAvLyBDb252ZW5pZW5jZSB2ZXJzaW9uIG9mIGEgY29tbW9uIHVzZSBjYXNlIG9mIGBmaWx0ZXJgOiBzZWxlY3Rpbmcgb25seSBvYmplY3RzXG4gIC8vIGNvbnRhaW5pbmcgc3BlY2lmaWMgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8ud2hlcmUgPSBmdW5jdGlvbihvYmosIGF0dHJzKSB7XG4gICAgcmV0dXJuIF8uZmlsdGVyKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gQ29udmVuaWVuY2UgdmVyc2lvbiBvZiBhIGNvbW1vbiB1c2UgY2FzZSBvZiBgZmluZGA6IGdldHRpbmcgdGhlIGZpcnN0IG9iamVjdFxuICAvLyBjb250YWluaW5nIHNwZWNpZmljIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLmZpbmRXaGVyZSA9IGZ1bmN0aW9uKG9iaiwgYXR0cnMpIHtcbiAgICByZXR1cm4gXy5maW5kKG9iaiwgXy5tYXRjaGVyKGF0dHJzKSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIHRoZSBtYXhpbXVtIGVsZW1lbnQgKG9yIGVsZW1lbnQtYmFzZWQgY29tcHV0YXRpb24pLlxuICBfLm1heCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0gLUluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSAtSW5maW5pdHksXG4gICAgICAgIHZhbHVlLCBjb21wdXRlZDtcbiAgICBpZiAoaXRlcmF0ZWUgPT0gbnVsbCAmJiBvYmogIT0gbnVsbCkge1xuICAgICAgb2JqID0gaXNBcnJheUxpa2Uob2JqKSA/IG9iaiA6IF8udmFsdWVzKG9iaik7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gb2JqLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhbHVlID0gb2JqW2ldO1xuICAgICAgICBpZiAodmFsdWUgPiByZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICAgIF8uZWFjaChvYmosIGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgbGlzdCkge1xuICAgICAgICBjb21wdXRlZCA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgbGlzdCk7XG4gICAgICAgIGlmIChjb21wdXRlZCA+IGxhc3RDb21wdXRlZCB8fCBjb21wdXRlZCA9PT0gLUluZmluaXR5ICYmIHJlc3VsdCA9PT0gLUluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbWluaW11bSBlbGVtZW50IChvciBlbGVtZW50LWJhc2VkIGNvbXB1dGF0aW9uKS5cbiAgXy5taW4gPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgdmFyIHJlc3VsdCA9IEluZmluaXR5LCBsYXN0Q29tcHV0ZWQgPSBJbmZpbml0eSxcbiAgICAgICAgdmFsdWUsIGNvbXB1dGVkO1xuICAgIGlmIChpdGVyYXRlZSA9PSBudWxsICYmIG9iaiAhPSBudWxsKSB7XG4gICAgICBvYmogPSBpc0FycmF5TGlrZShvYmopID8gb2JqIDogXy52YWx1ZXMob2JqKTtcbiAgICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBvYmoubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFsdWUgPSBvYmpbaV07XG4gICAgICAgIGlmICh2YWx1ZSA8IHJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHZhbHVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgICAgXy5lYWNoKG9iaiwgZnVuY3Rpb24odmFsdWUsIGluZGV4LCBsaXN0KSB7XG4gICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KTtcbiAgICAgICAgaWYgKGNvbXB1dGVkIDwgbGFzdENvbXB1dGVkIHx8IGNvbXB1dGVkID09PSBJbmZpbml0eSAmJiByZXN1bHQgPT09IEluZmluaXR5KSB7XG4gICAgICAgICAgcmVzdWx0ID0gdmFsdWU7XG4gICAgICAgICAgbGFzdENvbXB1dGVkID0gY29tcHV0ZWQ7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIFNodWZmbGUgYSBjb2xsZWN0aW9uLCB1c2luZyB0aGUgbW9kZXJuIHZlcnNpb24gb2YgdGhlXG4gIC8vIFtGaXNoZXItWWF0ZXMgc2h1ZmZsZV0oaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9GaXNoZXLigJNZYXRlc19zaHVmZmxlKS5cbiAgXy5zaHVmZmxlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHNldCA9IGlzQXJyYXlMaWtlKG9iaikgPyBvYmogOiBfLnZhbHVlcyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBzZXQubGVuZ3RoO1xuICAgIHZhciBzaHVmZmxlZCA9IEFycmF5KGxlbmd0aCk7XG4gICAgZm9yICh2YXIgaW5kZXggPSAwLCByYW5kOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmFuZCA9IF8ucmFuZG9tKDAsIGluZGV4KTtcbiAgICAgIGlmIChyYW5kICE9PSBpbmRleCkgc2h1ZmZsZWRbaW5kZXhdID0gc2h1ZmZsZWRbcmFuZF07XG4gICAgICBzaHVmZmxlZFtyYW5kXSA9IHNldFtpbmRleF07XG4gICAgfVxuICAgIHJldHVybiBzaHVmZmxlZDtcbiAgfTtcblxuICAvLyBTYW1wbGUgKipuKiogcmFuZG9tIHZhbHVlcyBmcm9tIGEgY29sbGVjdGlvbi5cbiAgLy8gSWYgKipuKiogaXMgbm90IHNwZWNpZmllZCwgcmV0dXJucyBhIHNpbmdsZSByYW5kb20gZWxlbWVudC5cbiAgLy8gVGhlIGludGVybmFsIGBndWFyZGAgYXJndW1lbnQgYWxsb3dzIGl0IHRvIHdvcmsgd2l0aCBgbWFwYC5cbiAgXy5zYW1wbGUgPSBmdW5jdGlvbihvYmosIG4sIGd1YXJkKSB7XG4gICAgaWYgKG4gPT0gbnVsbCB8fCBndWFyZCkge1xuICAgICAgaWYgKCFpc0FycmF5TGlrZShvYmopKSBvYmogPSBfLnZhbHVlcyhvYmopO1xuICAgICAgcmV0dXJuIG9ialtfLnJhbmRvbShvYmoubGVuZ3RoIC0gMSldO1xuICAgIH1cbiAgICByZXR1cm4gXy5zaHVmZmxlKG9iaikuc2xpY2UoMCwgTWF0aC5tYXgoMCwgbikpO1xuICB9O1xuXG4gIC8vIFNvcnQgdGhlIG9iamVjdCdzIHZhbHVlcyBieSBhIGNyaXRlcmlvbiBwcm9kdWNlZCBieSBhbiBpdGVyYXRlZS5cbiAgXy5zb3J0QnkgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgcmV0dXJuIF8ucGx1Y2soXy5tYXAob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgsIGxpc3QpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgaW5kZXg6IGluZGV4LFxuICAgICAgICBjcml0ZXJpYTogaXRlcmF0ZWUodmFsdWUsIGluZGV4LCBsaXN0KVxuICAgICAgfTtcbiAgICB9KS5zb3J0KGZ1bmN0aW9uKGxlZnQsIHJpZ2h0KSB7XG4gICAgICB2YXIgYSA9IGxlZnQuY3JpdGVyaWE7XG4gICAgICB2YXIgYiA9IHJpZ2h0LmNyaXRlcmlhO1xuICAgICAgaWYgKGEgIT09IGIpIHtcbiAgICAgICAgaWYgKGEgPiBiIHx8IGEgPT09IHZvaWQgMCkgcmV0dXJuIDE7XG4gICAgICAgIGlmIChhIDwgYiB8fCBiID09PSB2b2lkIDApIHJldHVybiAtMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsZWZ0LmluZGV4IC0gcmlnaHQuaW5kZXg7XG4gICAgfSksICd2YWx1ZScpO1xuICB9O1xuXG4gIC8vIEFuIGludGVybmFsIGZ1bmN0aW9uIHVzZWQgZm9yIGFnZ3JlZ2F0ZSBcImdyb3VwIGJ5XCIgb3BlcmF0aW9ucy5cbiAgdmFyIGdyb3VwID0gZnVuY3Rpb24oYmVoYXZpb3IpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCk7XG4gICAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcbiAgICAgICAgdmFyIGtleSA9IGl0ZXJhdGVlKHZhbHVlLCBpbmRleCwgb2JqKTtcbiAgICAgICAgYmVoYXZpb3IocmVzdWx0LCB2YWx1ZSwga2V5KTtcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIEdyb3VwcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLiBQYXNzIGVpdGhlciBhIHN0cmluZyBhdHRyaWJ1dGVcbiAgLy8gdG8gZ3JvdXAgYnksIG9yIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBjcml0ZXJpb24uXG4gIF8uZ3JvdXBCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIGlmIChfLmhhcyhyZXN1bHQsIGtleSkpIHJlc3VsdFtrZXldLnB1c2godmFsdWUpOyBlbHNlIHJlc3VsdFtrZXldID0gW3ZhbHVlXTtcbiAgfSk7XG5cbiAgLy8gSW5kZXhlcyB0aGUgb2JqZWN0J3MgdmFsdWVzIGJ5IGEgY3JpdGVyaW9uLCBzaW1pbGFyIHRvIGBncm91cEJ5YCwgYnV0IGZvclxuICAvLyB3aGVuIHlvdSBrbm93IHRoYXQgeW91ciBpbmRleCB2YWx1ZXMgd2lsbCBiZSB1bmlxdWUuXG4gIF8uaW5kZXhCeSA9IGdyb3VwKGZ1bmN0aW9uKHJlc3VsdCwgdmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gIH0pO1xuXG4gIC8vIENvdW50cyBpbnN0YW5jZXMgb2YgYW4gb2JqZWN0IHRoYXQgZ3JvdXAgYnkgYSBjZXJ0YWluIGNyaXRlcmlvbi4gUGFzc1xuICAvLyBlaXRoZXIgYSBzdHJpbmcgYXR0cmlidXRlIHRvIGNvdW50IGJ5LCBvciBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgLy8gY3JpdGVyaW9uLlxuICBfLmNvdW50QnkgPSBncm91cChmdW5jdGlvbihyZXN1bHQsIHZhbHVlLCBrZXkpIHtcbiAgICBpZiAoXy5oYXMocmVzdWx0LCBrZXkpKSByZXN1bHRba2V5XSsrOyBlbHNlIHJlc3VsdFtrZXldID0gMTtcbiAgfSk7XG5cbiAgLy8gU2FmZWx5IGNyZWF0ZSBhIHJlYWwsIGxpdmUgYXJyYXkgZnJvbSBhbnl0aGluZyBpdGVyYWJsZS5cbiAgXy50b0FycmF5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFvYmopIHJldHVybiBbXTtcbiAgICBpZiAoXy5pc0FycmF5KG9iaikpIHJldHVybiBzbGljZS5jYWxsKG9iaik7XG4gICAgaWYgKGlzQXJyYXlMaWtlKG9iaikpIHJldHVybiBfLm1hcChvYmosIF8uaWRlbnRpdHkpO1xuICAgIHJldHVybiBfLnZhbHVlcyhvYmopO1xuICB9O1xuXG4gIC8vIFJldHVybiB0aGUgbnVtYmVyIG9mIGVsZW1lbnRzIGluIGFuIG9iamVjdC5cbiAgXy5zaXplID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gMDtcbiAgICByZXR1cm4gaXNBcnJheUxpa2Uob2JqKSA/IG9iai5sZW5ndGggOiBfLmtleXMob2JqKS5sZW5ndGg7XG4gIH07XG5cbiAgLy8gU3BsaXQgYSBjb2xsZWN0aW9uIGludG8gdHdvIGFycmF5czogb25lIHdob3NlIGVsZW1lbnRzIGFsbCBzYXRpc2Z5IHRoZSBnaXZlblxuICAvLyBwcmVkaWNhdGUsIGFuZCBvbmUgd2hvc2UgZWxlbWVudHMgYWxsIGRvIG5vdCBzYXRpc2Z5IHRoZSBwcmVkaWNhdGUuXG4gIF8ucGFydGl0aW9uID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBwYXNzID0gW10sIGZhaWwgPSBbXTtcbiAgICBfLmVhY2gob2JqLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmopIHtcbiAgICAgIChwcmVkaWNhdGUodmFsdWUsIGtleSwgb2JqKSA/IHBhc3MgOiBmYWlsKS5wdXNoKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW3Bhc3MsIGZhaWxdO1xuICB9O1xuXG4gIC8vIEFycmF5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS1cblxuICAvLyBHZXQgdGhlIGZpcnN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGZpcnN0IE5cbiAgLy8gdmFsdWVzIGluIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgaGVhZGAgYW5kIGB0YWtlYC4gVGhlICoqZ3VhcmQqKiBjaGVja1xuICAvLyBhbGxvd3MgaXQgdG8gd29yayB3aXRoIGBfLm1hcGAuXG4gIF8uZmlyc3QgPSBfLmhlYWQgPSBfLnRha2UgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbMF07XG4gICAgcmV0dXJuIF8uaW5pdGlhbChhcnJheSwgYXJyYXkubGVuZ3RoIC0gbik7XG4gIH07XG5cbiAgLy8gUmV0dXJucyBldmVyeXRoaW5nIGJ1dCB0aGUgbGFzdCBlbnRyeSBvZiB0aGUgYXJyYXkuIEVzcGVjaWFsbHkgdXNlZnVsIG9uXG4gIC8vIHRoZSBhcmd1bWVudHMgb2JqZWN0LiBQYXNzaW5nICoqbioqIHdpbGwgcmV0dXJuIGFsbCB0aGUgdmFsdWVzIGluXG4gIC8vIHRoZSBhcnJheSwgZXhjbHVkaW5nIHRoZSBsYXN0IE4uXG4gIF8uaW5pdGlhbCA9IGZ1bmN0aW9uKGFycmF5LCBuLCBndWFyZCkge1xuICAgIHJldHVybiBzbGljZS5jYWxsKGFycmF5LCAwLCBNYXRoLm1heCgwLCBhcnJheS5sZW5ndGggLSAobiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pKSk7XG4gIH07XG5cbiAgLy8gR2V0IHRoZSBsYXN0IGVsZW1lbnQgb2YgYW4gYXJyYXkuIFBhc3NpbmcgKipuKiogd2lsbCByZXR1cm4gdGhlIGxhc3QgTlxuICAvLyB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLmxhc3QgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICBpZiAoYXJyYXkgPT0gbnVsbCkgcmV0dXJuIHZvaWQgMDtcbiAgICBpZiAobiA9PSBudWxsIHx8IGd1YXJkKSByZXR1cm4gYXJyYXlbYXJyYXkubGVuZ3RoIC0gMV07XG4gICAgcmV0dXJuIF8ucmVzdChhcnJheSwgTWF0aC5tYXgoMCwgYXJyYXkubGVuZ3RoIC0gbikpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgZXZlcnl0aGluZyBidXQgdGhlIGZpcnN0IGVudHJ5IG9mIHRoZSBhcnJheS4gQWxpYXNlZCBhcyBgdGFpbGAgYW5kIGBkcm9wYC5cbiAgLy8gRXNwZWNpYWxseSB1c2VmdWwgb24gdGhlIGFyZ3VtZW50cyBvYmplY3QuIFBhc3NpbmcgYW4gKipuKiogd2lsbCByZXR1cm5cbiAgLy8gdGhlIHJlc3QgTiB2YWx1ZXMgaW4gdGhlIGFycmF5LlxuICBfLnJlc3QgPSBfLnRhaWwgPSBfLmRyb3AgPSBmdW5jdGlvbihhcnJheSwgbiwgZ3VhcmQpIHtcbiAgICByZXR1cm4gc2xpY2UuY2FsbChhcnJheSwgbiA9PSBudWxsIHx8IGd1YXJkID8gMSA6IG4pO1xuICB9O1xuXG4gIC8vIFRyaW0gb3V0IGFsbCBmYWxzeSB2YWx1ZXMgZnJvbSBhbiBhcnJheS5cbiAgXy5jb21wYWN0ID0gZnVuY3Rpb24oYXJyYXkpIHtcbiAgICByZXR1cm4gXy5maWx0ZXIoYXJyYXksIF8uaWRlbnRpdHkpO1xuICB9O1xuXG4gIC8vIEludGVybmFsIGltcGxlbWVudGF0aW9uIG9mIGEgcmVjdXJzaXZlIGBmbGF0dGVuYCBmdW5jdGlvbi5cbiAgdmFyIGZsYXR0ZW4gPSBmdW5jdGlvbihpbnB1dCwgc2hhbGxvdywgc3RyaWN0LCBzdGFydEluZGV4KSB7XG4gICAgdmFyIG91dHB1dCA9IFtdLCBpZHggPSAwO1xuICAgIGZvciAodmFyIGkgPSBzdGFydEluZGV4IHx8IDAsIGxlbmd0aCA9IGdldExlbmd0aChpbnB1dCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHZhbHVlID0gaW5wdXRbaV07XG4gICAgICBpZiAoaXNBcnJheUxpa2UodmFsdWUpICYmIChfLmlzQXJyYXkodmFsdWUpIHx8IF8uaXNBcmd1bWVudHModmFsdWUpKSkge1xuICAgICAgICAvL2ZsYXR0ZW4gY3VycmVudCBsZXZlbCBvZiBhcnJheSBvciBhcmd1bWVudHMgb2JqZWN0XG4gICAgICAgIGlmICghc2hhbGxvdykgdmFsdWUgPSBmbGF0dGVuKHZhbHVlLCBzaGFsbG93LCBzdHJpY3QpO1xuICAgICAgICB2YXIgaiA9IDAsIGxlbiA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgb3V0cHV0Lmxlbmd0aCArPSBsZW47XG4gICAgICAgIHdoaWxlIChqIDwgbGVuKSB7XG4gICAgICAgICAgb3V0cHV0W2lkeCsrXSA9IHZhbHVlW2orK107XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCkge1xuICAgICAgICBvdXRwdXRbaWR4KytdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG4gIH07XG5cbiAgLy8gRmxhdHRlbiBvdXQgYW4gYXJyYXksIGVpdGhlciByZWN1cnNpdmVseSAoYnkgZGVmYXVsdCksIG9yIGp1c3Qgb25lIGxldmVsLlxuICBfLmZsYXR0ZW4gPSBmdW5jdGlvbihhcnJheSwgc2hhbGxvdykge1xuICAgIHJldHVybiBmbGF0dGVuKGFycmF5LCBzaGFsbG93LCBmYWxzZSk7XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgdmVyc2lvbiBvZiB0aGUgYXJyYXkgdGhhdCBkb2VzIG5vdCBjb250YWluIHRoZSBzcGVjaWZpZWQgdmFsdWUocykuXG4gIF8ud2l0aG91dCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgcmV0dXJuIF8uZGlmZmVyZW5jZShhcnJheSwgc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpKTtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGEgZHVwbGljYXRlLWZyZWUgdmVyc2lvbiBvZiB0aGUgYXJyYXkuIElmIHRoZSBhcnJheSBoYXMgYWxyZWFkeVxuICAvLyBiZWVuIHNvcnRlZCwgeW91IGhhdmUgdGhlIG9wdGlvbiBvZiB1c2luZyBhIGZhc3RlciBhbGdvcml0aG0uXG4gIC8vIEFsaWFzZWQgYXMgYHVuaXF1ZWAuXG4gIF8udW5pcSA9IF8udW5pcXVlID0gZnVuY3Rpb24oYXJyYXksIGlzU29ydGVkLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIGlmICghXy5pc0Jvb2xlYW4oaXNTb3J0ZWQpKSB7XG4gICAgICBjb250ZXh0ID0gaXRlcmF0ZWU7XG4gICAgICBpdGVyYXRlZSA9IGlzU29ydGVkO1xuICAgICAgaXNTb3J0ZWQgPSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKGl0ZXJhdGVlICE9IG51bGwpIGl0ZXJhdGVlID0gY2IoaXRlcmF0ZWUsIGNvbnRleHQpO1xuICAgIHZhciByZXN1bHQgPSBbXTtcbiAgICB2YXIgc2VlbiA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgoYXJyYXkpOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciB2YWx1ZSA9IGFycmF5W2ldLFxuICAgICAgICAgIGNvbXB1dGVkID0gaXRlcmF0ZWUgPyBpdGVyYXRlZSh2YWx1ZSwgaSwgYXJyYXkpIDogdmFsdWU7XG4gICAgICBpZiAoaXNTb3J0ZWQpIHtcbiAgICAgICAgaWYgKCFpIHx8IHNlZW4gIT09IGNvbXB1dGVkKSByZXN1bHQucHVzaCh2YWx1ZSk7XG4gICAgICAgIHNlZW4gPSBjb21wdXRlZDtcbiAgICAgIH0gZWxzZSBpZiAoaXRlcmF0ZWUpIHtcbiAgICAgICAgaWYgKCFfLmNvbnRhaW5zKHNlZW4sIGNvbXB1dGVkKSkge1xuICAgICAgICAgIHNlZW4ucHVzaChjb21wdXRlZCk7XG4gICAgICAgICAgcmVzdWx0LnB1c2godmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKCFfLmNvbnRhaW5zKHJlc3VsdCwgdmFsdWUpKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBQcm9kdWNlIGFuIGFycmF5IHRoYXQgY29udGFpbnMgdGhlIHVuaW9uOiBlYWNoIGRpc3RpbmN0IGVsZW1lbnQgZnJvbSBhbGwgb2ZcbiAgLy8gdGhlIHBhc3NlZC1pbiBhcnJheXMuXG4gIF8udW5pb24gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXy51bmlxKGZsYXR0ZW4oYXJndW1lbnRzLCB0cnVlLCB0cnVlKSk7XG4gIH07XG5cbiAgLy8gUHJvZHVjZSBhbiBhcnJheSB0aGF0IGNvbnRhaW5zIGV2ZXJ5IGl0ZW0gc2hhcmVkIGJldHdlZW4gYWxsIHRoZVxuICAvLyBwYXNzZWQtaW4gYXJyYXlzLlxuICBfLmludGVyc2VjdGlvbiA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBhcmdzTGVuZ3RoID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IGFycmF5W2ldO1xuICAgICAgaWYgKF8uY29udGFpbnMocmVzdWx0LCBpdGVtKSkgY29udGludWU7XG4gICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGFyZ3NMZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoIV8uY29udGFpbnMoYXJndW1lbnRzW2pdLCBpdGVtKSkgYnJlYWs7XG4gICAgICB9XG4gICAgICBpZiAoaiA9PT0gYXJnc0xlbmd0aCkgcmVzdWx0LnB1c2goaXRlbSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgLy8gVGFrZSB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIG9uZSBhcnJheSBhbmQgYSBudW1iZXIgb2Ygb3RoZXIgYXJyYXlzLlxuICAvLyBPbmx5IHRoZSBlbGVtZW50cyBwcmVzZW50IGluIGp1c3QgdGhlIGZpcnN0IGFycmF5IHdpbGwgcmVtYWluLlxuICBfLmRpZmZlcmVuY2UgPSBmdW5jdGlvbihhcnJheSkge1xuICAgIHZhciByZXN0ID0gZmxhdHRlbihhcmd1bWVudHMsIHRydWUsIHRydWUsIDEpO1xuICAgIHJldHVybiBfLmZpbHRlcihhcnJheSwgZnVuY3Rpb24odmFsdWUpe1xuICAgICAgcmV0dXJuICFfLmNvbnRhaW5zKHJlc3QsIHZhbHVlKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBaaXAgdG9nZXRoZXIgbXVsdGlwbGUgbGlzdHMgaW50byBhIHNpbmdsZSBhcnJheSAtLSBlbGVtZW50cyB0aGF0IHNoYXJlXG4gIC8vIGFuIGluZGV4IGdvIHRvZ2V0aGVyLlxuICBfLnppcCA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBfLnVuemlwKGFyZ3VtZW50cyk7XG4gIH07XG5cbiAgLy8gQ29tcGxlbWVudCBvZiBfLnppcC4gVW56aXAgYWNjZXB0cyBhbiBhcnJheSBvZiBhcnJheXMgYW5kIGdyb3Vwc1xuICAvLyBlYWNoIGFycmF5J3MgZWxlbWVudHMgb24gc2hhcmVkIGluZGljZXNcbiAgXy51bnppcCA9IGZ1bmN0aW9uKGFycmF5KSB7XG4gICAgdmFyIGxlbmd0aCA9IGFycmF5ICYmIF8ubWF4KGFycmF5LCBnZXRMZW5ndGgpLmxlbmd0aCB8fCAwO1xuICAgIHZhciByZXN1bHQgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKykge1xuICAgICAgcmVzdWx0W2luZGV4XSA9IF8ucGx1Y2soYXJyYXksIGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDb252ZXJ0cyBsaXN0cyBpbnRvIG9iamVjdHMuIFBhc3MgZWl0aGVyIGEgc2luZ2xlIGFycmF5IG9mIGBba2V5LCB2YWx1ZV1gXG4gIC8vIHBhaXJzLCBvciB0d28gcGFyYWxsZWwgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCAtLSBvbmUgb2Yga2V5cywgYW5kIG9uZSBvZlxuICAvLyB0aGUgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gIF8ub2JqZWN0ID0gZnVuY3Rpb24obGlzdCwgdmFsdWVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBnZXRMZW5ndGgobGlzdCk7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgaWYgKHZhbHVlcykge1xuICAgICAgICByZXN1bHRbbGlzdFtpXV0gPSB2YWx1ZXNbaV07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXN1bHRbbGlzdFtpXVswXV0gPSBsaXN0W2ldWzFdO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuXG4gIC8vIEdlbmVyYXRvciBmdW5jdGlvbiB0byBjcmVhdGUgdGhlIGZpbmRJbmRleCBhbmQgZmluZExhc3RJbmRleCBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoZGlyKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFycmF5LCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICAgIHByZWRpY2F0ZSA9IGNiKHByZWRpY2F0ZSwgY29udGV4dCk7XG4gICAgICB2YXIgbGVuZ3RoID0gZ2V0TGVuZ3RoKGFycmF5KTtcbiAgICAgIHZhciBpbmRleCA9IGRpciA+IDAgPyAwIDogbGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoOyBpbmRleCA+PSAwICYmIGluZGV4IDwgbGVuZ3RoOyBpbmRleCArPSBkaXIpIHtcbiAgICAgICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHJldHVybiBpbmRleDtcbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuICB9XG5cbiAgLy8gUmV0dXJucyB0aGUgZmlyc3QgaW5kZXggb24gYW4gYXJyYXktbGlrZSB0aGF0IHBhc3NlcyBhIHByZWRpY2F0ZSB0ZXN0XG4gIF8uZmluZEluZGV4ID0gY3JlYXRlUHJlZGljYXRlSW5kZXhGaW5kZXIoMSk7XG4gIF8uZmluZExhc3RJbmRleCA9IGNyZWF0ZVByZWRpY2F0ZUluZGV4RmluZGVyKC0xKTtcblxuICAvLyBVc2UgYSBjb21wYXJhdG9yIGZ1bmN0aW9uIHRvIGZpZ3VyZSBvdXQgdGhlIHNtYWxsZXN0IGluZGV4IGF0IHdoaWNoXG4gIC8vIGFuIG9iamVjdCBzaG91bGQgYmUgaW5zZXJ0ZWQgc28gYXMgdG8gbWFpbnRhaW4gb3JkZXIuIFVzZXMgYmluYXJ5IHNlYXJjaC5cbiAgXy5zb3J0ZWRJbmRleCA9IGZ1bmN0aW9uKGFycmF5LCBvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaXRlcmF0ZWUgPSBjYihpdGVyYXRlZSwgY29udGV4dCwgMSk7XG4gICAgdmFyIHZhbHVlID0gaXRlcmF0ZWUob2JqKTtcbiAgICB2YXIgbG93ID0gMCwgaGlnaCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICAgIHZhciBtaWQgPSBNYXRoLmZsb29yKChsb3cgKyBoaWdoKSAvIDIpO1xuICAgICAgaWYgKGl0ZXJhdGVlKGFycmF5W21pZF0pIDwgdmFsdWUpIGxvdyA9IG1pZCArIDE7IGVsc2UgaGlnaCA9IG1pZDtcbiAgICB9XG4gICAgcmV0dXJuIGxvdztcbiAgfTtcblxuICAvLyBHZW5lcmF0b3IgZnVuY3Rpb24gdG8gY3JlYXRlIHRoZSBpbmRleE9mIGFuZCBsYXN0SW5kZXhPZiBmdW5jdGlvbnNcbiAgZnVuY3Rpb24gY3JlYXRlSW5kZXhGaW5kZXIoZGlyLCBwcmVkaWNhdGVGaW5kLCBzb3J0ZWRJbmRleCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnJheSwgaXRlbSwgaWR4KSB7XG4gICAgICB2YXIgaSA9IDAsIGxlbmd0aCA9IGdldExlbmd0aChhcnJheSk7XG4gICAgICBpZiAodHlwZW9mIGlkeCA9PSAnbnVtYmVyJykge1xuICAgICAgICBpZiAoZGlyID4gMCkge1xuICAgICAgICAgICAgaSA9IGlkeCA+PSAwID8gaWR4IDogTWF0aC5tYXgoaWR4ICsgbGVuZ3RoLCBpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IGlkeCA+PSAwID8gTWF0aC5taW4oaWR4ICsgMSwgbGVuZ3RoKSA6IGlkeCArIGxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoc29ydGVkSW5kZXggJiYgaWR4ICYmIGxlbmd0aCkge1xuICAgICAgICBpZHggPSBzb3J0ZWRJbmRleChhcnJheSwgaXRlbSk7XG4gICAgICAgIHJldHVybiBhcnJheVtpZHhdID09PSBpdGVtID8gaWR4IDogLTE7XG4gICAgICB9XG4gICAgICBpZiAoaXRlbSAhPT0gaXRlbSkge1xuICAgICAgICBpZHggPSBwcmVkaWNhdGVGaW5kKHNsaWNlLmNhbGwoYXJyYXksIGksIGxlbmd0aCksIF8uaXNOYU4pO1xuICAgICAgICByZXR1cm4gaWR4ID49IDAgPyBpZHggKyBpIDogLTE7XG4gICAgICB9XG4gICAgICBmb3IgKGlkeCA9IGRpciA+IDAgPyBpIDogbGVuZ3RoIC0gMTsgaWR4ID49IDAgJiYgaWR4IDwgbGVuZ3RoOyBpZHggKz0gZGlyKSB7XG4gICAgICAgIGlmIChhcnJheVtpZHhdID09PSBpdGVtKSByZXR1cm4gaWR4O1xuICAgICAgfVxuICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gIH1cblxuICAvLyBSZXR1cm4gdGhlIHBvc2l0aW9uIG9mIHRoZSBmaXJzdCBvY2N1cnJlbmNlIG9mIGFuIGl0ZW0gaW4gYW4gYXJyYXksXG4gIC8vIG9yIC0xIGlmIHRoZSBpdGVtIGlzIG5vdCBpbmNsdWRlZCBpbiB0aGUgYXJyYXkuXG4gIC8vIElmIHRoZSBhcnJheSBpcyBsYXJnZSBhbmQgYWxyZWFkeSBpbiBzb3J0IG9yZGVyLCBwYXNzIGB0cnVlYFxuICAvLyBmb3IgKippc1NvcnRlZCoqIHRvIHVzZSBiaW5hcnkgc2VhcmNoLlxuICBfLmluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigxLCBfLmZpbmRJbmRleCwgXy5zb3J0ZWRJbmRleCk7XG4gIF8ubGFzdEluZGV4T2YgPSBjcmVhdGVJbmRleEZpbmRlcigtMSwgXy5maW5kTGFzdEluZGV4KTtcblxuICAvLyBHZW5lcmF0ZSBhbiBpbnRlZ2VyIEFycmF5IGNvbnRhaW5pbmcgYW4gYXJpdGhtZXRpYyBwcm9ncmVzc2lvbi4gQSBwb3J0IG9mXG4gIC8vIHRoZSBuYXRpdmUgUHl0aG9uIGByYW5nZSgpYCBmdW5jdGlvbi4gU2VlXG4gIC8vIFt0aGUgUHl0aG9uIGRvY3VtZW50YXRpb25dKGh0dHA6Ly9kb2NzLnB5dGhvbi5vcmcvbGlicmFyeS9mdW5jdGlvbnMuaHRtbCNyYW5nZSkuXG4gIF8ucmFuZ2UgPSBmdW5jdGlvbihzdGFydCwgc3RvcCwgc3RlcCkge1xuICAgIGlmIChzdG9wID09IG51bGwpIHtcbiAgICAgIHN0b3AgPSBzdGFydCB8fCAwO1xuICAgICAgc3RhcnQgPSAwO1xuICAgIH1cbiAgICBzdGVwID0gc3RlcCB8fCAxO1xuXG4gICAgdmFyIGxlbmd0aCA9IE1hdGgubWF4KE1hdGguY2VpbCgoc3RvcCAtIHN0YXJ0KSAvIHN0ZXApLCAwKTtcbiAgICB2YXIgcmFuZ2UgPSBBcnJheShsZW5ndGgpO1xuXG4gICAgZm9yICh2YXIgaWR4ID0gMDsgaWR4IDwgbGVuZ3RoOyBpZHgrKywgc3RhcnQgKz0gc3RlcCkge1xuICAgICAgcmFuZ2VbaWR4XSA9IHN0YXJ0O1xuICAgIH1cblxuICAgIHJldHVybiByYW5nZTtcbiAgfTtcblxuICAvLyBGdW5jdGlvbiAoYWhlbSkgRnVuY3Rpb25zXG4gIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIERldGVybWluZXMgd2hldGhlciB0byBleGVjdXRlIGEgZnVuY3Rpb24gYXMgYSBjb25zdHJ1Y3RvclxuICAvLyBvciBhIG5vcm1hbCBmdW5jdGlvbiB3aXRoIHRoZSBwcm92aWRlZCBhcmd1bWVudHNcbiAgdmFyIGV4ZWN1dGVCb3VuZCA9IGZ1bmN0aW9uKHNvdXJjZUZ1bmMsIGJvdW5kRnVuYywgY29udGV4dCwgY2FsbGluZ0NvbnRleHQsIGFyZ3MpIHtcbiAgICBpZiAoIShjYWxsaW5nQ29udGV4dCBpbnN0YW5jZW9mIGJvdW5kRnVuYykpIHJldHVybiBzb3VyY2VGdW5jLmFwcGx5KGNvbnRleHQsIGFyZ3MpO1xuICAgIHZhciBzZWxmID0gYmFzZUNyZWF0ZShzb3VyY2VGdW5jLnByb3RvdHlwZSk7XG4gICAgdmFyIHJlc3VsdCA9IHNvdXJjZUZ1bmMuYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgaWYgKF8uaXNPYmplY3QocmVzdWx0KSkgcmV0dXJuIHJlc3VsdDtcbiAgICByZXR1cm4gc2VsZjtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSBmdW5jdGlvbiBib3VuZCB0byBhIGdpdmVuIG9iamVjdCAoYXNzaWduaW5nIGB0aGlzYCwgYW5kIGFyZ3VtZW50cyxcbiAgLy8gb3B0aW9uYWxseSkuIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBGdW5jdGlvbi5iaW5kYCBpZlxuICAvLyBhdmFpbGFibGUuXG4gIF8uYmluZCA9IGZ1bmN0aW9uKGZ1bmMsIGNvbnRleHQpIHtcbiAgICBpZiAobmF0aXZlQmluZCAmJiBmdW5jLmJpbmQgPT09IG5hdGl2ZUJpbmQpIHJldHVybiBuYXRpdmVCaW5kLmFwcGx5KGZ1bmMsIHNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSk7XG4gICAgaWYgKCFfLmlzRnVuY3Rpb24oZnVuYykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JpbmQgbXVzdCBiZSBjYWxsZWQgb24gYSBmdW5jdGlvbicpO1xuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDIpO1xuICAgIHZhciBib3VuZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGV4ZWN1dGVCb3VuZChmdW5jLCBib3VuZCwgY29udGV4dCwgdGhpcywgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKSk7XG4gICAgfTtcbiAgICByZXR1cm4gYm91bmQ7XG4gIH07XG5cbiAgLy8gUGFydGlhbGx5IGFwcGx5IGEgZnVuY3Rpb24gYnkgY3JlYXRpbmcgYSB2ZXJzaW9uIHRoYXQgaGFzIGhhZCBzb21lIG9mIGl0c1xuICAvLyBhcmd1bWVudHMgcHJlLWZpbGxlZCwgd2l0aG91dCBjaGFuZ2luZyBpdHMgZHluYW1pYyBgdGhpc2AgY29udGV4dC4gXyBhY3RzXG4gIC8vIGFzIGEgcGxhY2Vob2xkZXIsIGFsbG93aW5nIGFueSBjb21iaW5hdGlvbiBvZiBhcmd1bWVudHMgdG8gYmUgcHJlLWZpbGxlZC5cbiAgXy5wYXJ0aWFsID0gZnVuY3Rpb24oZnVuYykge1xuICAgIHZhciBib3VuZEFyZ3MgPSBzbGljZS5jYWxsKGFyZ3VtZW50cywgMSk7XG4gICAgdmFyIGJvdW5kID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcG9zaXRpb24gPSAwLCBsZW5ndGggPSBib3VuZEFyZ3MubGVuZ3RoO1xuICAgICAgdmFyIGFyZ3MgPSBBcnJheShsZW5ndGgpO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICBhcmdzW2ldID0gYm91bmRBcmdzW2ldID09PSBfID8gYXJndW1lbnRzW3Bvc2l0aW9uKytdIDogYm91bmRBcmdzW2ldO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHBvc2l0aW9uIDwgYXJndW1lbnRzLmxlbmd0aCkgYXJncy5wdXNoKGFyZ3VtZW50c1twb3NpdGlvbisrXSk7XG4gICAgICByZXR1cm4gZXhlY3V0ZUJvdW5kKGZ1bmMsIGJvdW5kLCB0aGlzLCB0aGlzLCBhcmdzKTtcbiAgICB9O1xuICAgIHJldHVybiBib3VuZDtcbiAgfTtcblxuICAvLyBCaW5kIGEgbnVtYmVyIG9mIGFuIG9iamVjdCdzIG1ldGhvZHMgdG8gdGhhdCBvYmplY3QuIFJlbWFpbmluZyBhcmd1bWVudHNcbiAgLy8gYXJlIHRoZSBtZXRob2QgbmFtZXMgdG8gYmUgYm91bmQuIFVzZWZ1bCBmb3IgZW5zdXJpbmcgdGhhdCBhbGwgY2FsbGJhY2tzXG4gIC8vIGRlZmluZWQgb24gYW4gb2JqZWN0IGJlbG9uZyB0byBpdC5cbiAgXy5iaW5kQWxsID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIGksIGxlbmd0aCA9IGFyZ3VtZW50cy5sZW5ndGgsIGtleTtcbiAgICBpZiAobGVuZ3RoIDw9IDEpIHRocm93IG5ldyBFcnJvcignYmluZEFsbCBtdXN0IGJlIHBhc3NlZCBmdW5jdGlvbiBuYW1lcycpO1xuICAgIGZvciAoaSA9IDE7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0gYXJndW1lbnRzW2ldO1xuICAgICAgb2JqW2tleV0gPSBfLmJpbmQob2JqW2tleV0sIG9iaik7XG4gICAgfVxuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gTWVtb2l6ZSBhbiBleHBlbnNpdmUgZnVuY3Rpb24gYnkgc3RvcmluZyBpdHMgcmVzdWx0cy5cbiAgXy5tZW1vaXplID0gZnVuY3Rpb24oZnVuYywgaGFzaGVyKSB7XG4gICAgdmFyIG1lbW9pemUgPSBmdW5jdGlvbihrZXkpIHtcbiAgICAgIHZhciBjYWNoZSA9IG1lbW9pemUuY2FjaGU7XG4gICAgICB2YXIgYWRkcmVzcyA9ICcnICsgKGhhc2hlciA/IGhhc2hlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIDoga2V5KTtcbiAgICAgIGlmICghXy5oYXMoY2FjaGUsIGFkZHJlc3MpKSBjYWNoZVthZGRyZXNzXSA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIHJldHVybiBjYWNoZVthZGRyZXNzXTtcbiAgICB9O1xuICAgIG1lbW9pemUuY2FjaGUgPSB7fTtcbiAgICByZXR1cm4gbWVtb2l6ZTtcbiAgfTtcblxuICAvLyBEZWxheXMgYSBmdW5jdGlvbiBmb3IgdGhlIGdpdmVuIG51bWJlciBvZiBtaWxsaXNlY29uZHMsIGFuZCB0aGVuIGNhbGxzXG4gIC8vIGl0IHdpdGggdGhlIGFyZ3VtZW50cyBzdXBwbGllZC5cbiAgXy5kZWxheSA9IGZ1bmN0aW9uKGZ1bmMsIHdhaXQpIHtcbiAgICB2YXIgYXJncyA9IHNsaWNlLmNhbGwoYXJndW1lbnRzLCAyKTtcbiAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbigpe1xuICAgICAgcmV0dXJuIGZ1bmMuYXBwbHkobnVsbCwgYXJncyk7XG4gICAgfSwgd2FpdCk7XG4gIH07XG5cbiAgLy8gRGVmZXJzIGEgZnVuY3Rpb24sIHNjaGVkdWxpbmcgaXQgdG8gcnVuIGFmdGVyIHRoZSBjdXJyZW50IGNhbGwgc3RhY2sgaGFzXG4gIC8vIGNsZWFyZWQuXG4gIF8uZGVmZXIgPSBfLnBhcnRpYWwoXy5kZWxheSwgXywgMSk7XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uLCB0aGF0LCB3aGVuIGludm9rZWQsIHdpbGwgb25seSBiZSB0cmlnZ2VyZWQgYXQgbW9zdCBvbmNlXG4gIC8vIGR1cmluZyBhIGdpdmVuIHdpbmRvdyBvZiB0aW1lLiBOb3JtYWxseSwgdGhlIHRocm90dGxlZCBmdW5jdGlvbiB3aWxsIHJ1blxuICAvLyBhcyBtdWNoIGFzIGl0IGNhbiwgd2l0aG91dCBldmVyIGdvaW5nIG1vcmUgdGhhbiBvbmNlIHBlciBgd2FpdGAgZHVyYXRpb247XG4gIC8vIGJ1dCBpZiB5b3UnZCBsaWtlIHRvIGRpc2FibGUgdGhlIGV4ZWN1dGlvbiBvbiB0aGUgbGVhZGluZyBlZGdlLCBwYXNzXG4gIC8vIGB7bGVhZGluZzogZmFsc2V9YC4gVG8gZGlzYWJsZSBleGVjdXRpb24gb24gdGhlIHRyYWlsaW5nIGVkZ2UsIGRpdHRvLlxuICBfLnRocm90dGxlID0gZnVuY3Rpb24oZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICAgIHZhciBjb250ZXh0LCBhcmdzLCByZXN1bHQ7XG4gICAgdmFyIHRpbWVvdXQgPSBudWxsO1xuICAgIHZhciBwcmV2aW91cyA9IDA7XG4gICAgaWYgKCFvcHRpb25zKSBvcHRpb25zID0ge307XG4gICAgdmFyIGxhdGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICBwcmV2aW91cyA9IG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UgPyAwIDogXy5ub3coKTtcbiAgICAgIHRpbWVvdXQgPSBudWxsO1xuICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgIH07XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgdmFyIG5vdyA9IF8ubm93KCk7XG4gICAgICBpZiAoIXByZXZpb3VzICYmIG9wdGlvbnMubGVhZGluZyA9PT0gZmFsc2UpIHByZXZpb3VzID0gbm93O1xuICAgICAgdmFyIHJlbWFpbmluZyA9IHdhaXQgLSAobm93IC0gcHJldmlvdXMpO1xuICAgICAgY29udGV4dCA9IHRoaXM7XG4gICAgICBhcmdzID0gYXJndW1lbnRzO1xuICAgICAgaWYgKHJlbWFpbmluZyA8PSAwIHx8IHJlbWFpbmluZyA+IHdhaXQpIHtcbiAgICAgICAgaWYgKHRpbWVvdXQpIHtcbiAgICAgICAgICBjbGVhclRpbWVvdXQodGltZW91dCk7XG4gICAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcHJldmlvdXMgPSBub3c7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGlmICghdGltZW91dCkgY29udGV4dCA9IGFyZ3MgPSBudWxsO1xuICAgICAgfSBlbHNlIGlmICghdGltZW91dCAmJiBvcHRpb25zLnRyYWlsaW5nICE9PSBmYWxzZSkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgcmVtYWluaW5nKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24sIHRoYXQsIGFzIGxvbmcgYXMgaXQgY29udGludWVzIHRvIGJlIGludm9rZWQsIHdpbGwgbm90XG4gIC8vIGJlIHRyaWdnZXJlZC4gVGhlIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIGFmdGVyIGl0IHN0b3BzIGJlaW5nIGNhbGxlZCBmb3JcbiAgLy8gTiBtaWxsaXNlY29uZHMuIElmIGBpbW1lZGlhdGVgIGlzIHBhc3NlZCwgdHJpZ2dlciB0aGUgZnVuY3Rpb24gb24gdGhlXG4gIC8vIGxlYWRpbmcgZWRnZSwgaW5zdGVhZCBvZiB0aGUgdHJhaWxpbmcuXG4gIF8uZGVib3VuY2UgPSBmdW5jdGlvbihmdW5jLCB3YWl0LCBpbW1lZGlhdGUpIHtcbiAgICB2YXIgdGltZW91dCwgYXJncywgY29udGV4dCwgdGltZXN0YW1wLCByZXN1bHQ7XG5cbiAgICB2YXIgbGF0ZXIgPSBmdW5jdGlvbigpIHtcbiAgICAgIHZhciBsYXN0ID0gXy5ub3coKSAtIHRpbWVzdGFtcDtcblxuICAgICAgaWYgKGxhc3QgPCB3YWl0ICYmIGxhc3QgPj0gMCkge1xuICAgICAgICB0aW1lb3V0ID0gc2V0VGltZW91dChsYXRlciwgd2FpdCAtIGxhc3QpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGltZW91dCA9IG51bGw7XG4gICAgICAgIGlmICghaW1tZWRpYXRlKSB7XG4gICAgICAgICAgcmVzdWx0ID0gZnVuYy5hcHBseShjb250ZXh0LCBhcmdzKTtcbiAgICAgICAgICBpZiAoIXRpbWVvdXQpIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBjb250ZXh0ID0gdGhpcztcbiAgICAgIGFyZ3MgPSBhcmd1bWVudHM7XG4gICAgICB0aW1lc3RhbXAgPSBfLm5vdygpO1xuICAgICAgdmFyIGNhbGxOb3cgPSBpbW1lZGlhdGUgJiYgIXRpbWVvdXQ7XG4gICAgICBpZiAoIXRpbWVvdXQpIHRpbWVvdXQgPSBzZXRUaW1lb3V0KGxhdGVyLCB3YWl0KTtcbiAgICAgIGlmIChjYWxsTm93KSB7XG4gICAgICAgIHJlc3VsdCA9IGZ1bmMuYXBwbHkoY29udGV4dCwgYXJncyk7XG4gICAgICAgIGNvbnRleHQgPSBhcmdzID0gbnVsbDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgdGhlIGZpcnN0IGZ1bmN0aW9uIHBhc3NlZCBhcyBhbiBhcmd1bWVudCB0byB0aGUgc2Vjb25kLFxuICAvLyBhbGxvd2luZyB5b3UgdG8gYWRqdXN0IGFyZ3VtZW50cywgcnVuIGNvZGUgYmVmb3JlIGFuZCBhZnRlciwgYW5kXG4gIC8vIGNvbmRpdGlvbmFsbHkgZXhlY3V0ZSB0aGUgb3JpZ2luYWwgZnVuY3Rpb24uXG4gIF8ud3JhcCA9IGZ1bmN0aW9uKGZ1bmMsIHdyYXBwZXIpIHtcbiAgICByZXR1cm4gXy5wYXJ0aWFsKHdyYXBwZXIsIGZ1bmMpO1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBuZWdhdGVkIHZlcnNpb24gb2YgdGhlIHBhc3NlZC1pbiBwcmVkaWNhdGUuXG4gIF8ubmVnYXRlID0gZnVuY3Rpb24ocHJlZGljYXRlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuICFwcmVkaWNhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9O1xuICB9O1xuXG4gIC8vIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGlzIHRoZSBjb21wb3NpdGlvbiBvZiBhIGxpc3Qgb2YgZnVuY3Rpb25zLCBlYWNoXG4gIC8vIGNvbnN1bWluZyB0aGUgcmV0dXJuIHZhbHVlIG9mIHRoZSBmdW5jdGlvbiB0aGF0IGZvbGxvd3MuXG4gIF8uY29tcG9zZSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuICAgIHZhciBzdGFydCA9IGFyZ3MubGVuZ3RoIC0gMTtcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IHN0YXJ0O1xuICAgICAgdmFyIHJlc3VsdCA9IGFyZ3Nbc3RhcnRdLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB3aGlsZSAoaS0tKSByZXN1bHQgPSBhcmdzW2ldLmNhbGwodGhpcywgcmVzdWx0KTtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgb24gYW5kIGFmdGVyIHRoZSBOdGggY2FsbC5cbiAgXy5hZnRlciA9IGZ1bmN0aW9uKHRpbWVzLCBmdW5jKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKC0tdGltZXMgPCAxKSB7XG4gICAgICAgIHJldHVybiBmdW5jLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfTtcbiAgfTtcblxuICAvLyBSZXR1cm5zIGEgZnVuY3Rpb24gdGhhdCB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgdXAgdG8gKGJ1dCBub3QgaW5jbHVkaW5nKSB0aGUgTnRoIGNhbGwuXG4gIF8uYmVmb3JlID0gZnVuY3Rpb24odGltZXMsIGZ1bmMpIHtcbiAgICB2YXIgbWVtbztcbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICBpZiAoLS10aW1lcyA+IDApIHtcbiAgICAgICAgbWVtbyA9IGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aW1lcyA8PSAxKSBmdW5jID0gbnVsbDtcbiAgICAgIHJldHVybiBtZW1vO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBleGVjdXRlZCBhdCBtb3N0IG9uZSB0aW1lLCBubyBtYXR0ZXIgaG93XG4gIC8vIG9mdGVuIHlvdSBjYWxsIGl0LiBVc2VmdWwgZm9yIGxhenkgaW5pdGlhbGl6YXRpb24uXG4gIF8ub25jZSA9IF8ucGFydGlhbChfLmJlZm9yZSwgMik7XG5cbiAgLy8gT2JqZWN0IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tXG5cbiAgLy8gS2V5cyBpbiBJRSA8IDkgdGhhdCB3b24ndCBiZSBpdGVyYXRlZCBieSBgZm9yIGtleSBpbiAuLi5gIGFuZCB0aHVzIG1pc3NlZC5cbiAgdmFyIGhhc0VudW1CdWcgPSAhe3RvU3RyaW5nOiBudWxsfS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgndG9TdHJpbmcnKTtcbiAgdmFyIG5vbkVudW1lcmFibGVQcm9wcyA9IFsndmFsdWVPZicsICdpc1Byb3RvdHlwZU9mJywgJ3RvU3RyaW5nJyxcbiAgICAgICAgICAgICAgICAgICAgICAncHJvcGVydHlJc0VudW1lcmFibGUnLCAnaGFzT3duUHJvcGVydHknLCAndG9Mb2NhbGVTdHJpbmcnXTtcblxuICBmdW5jdGlvbiBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cykge1xuICAgIHZhciBub25FbnVtSWR4ID0gbm9uRW51bWVyYWJsZVByb3BzLmxlbmd0aDtcbiAgICB2YXIgY29uc3RydWN0b3IgPSBvYmouY29uc3RydWN0b3I7XG4gICAgdmFyIHByb3RvID0gKF8uaXNGdW5jdGlvbihjb25zdHJ1Y3RvcikgJiYgY29uc3RydWN0b3IucHJvdG90eXBlKSB8fCBPYmpQcm90bztcblxuICAgIC8vIENvbnN0cnVjdG9yIGlzIGEgc3BlY2lhbCBjYXNlLlxuICAgIHZhciBwcm9wID0gJ2NvbnN0cnVjdG9yJztcbiAgICBpZiAoXy5oYXMob2JqLCBwcm9wKSAmJiAhXy5jb250YWlucyhrZXlzLCBwcm9wKSkga2V5cy5wdXNoKHByb3ApO1xuXG4gICAgd2hpbGUgKG5vbkVudW1JZHgtLSkge1xuICAgICAgcHJvcCA9IG5vbkVudW1lcmFibGVQcm9wc1tub25FbnVtSWR4XTtcbiAgICAgIGlmIChwcm9wIGluIG9iaiAmJiBvYmpbcHJvcF0gIT09IHByb3RvW3Byb3BdICYmICFfLmNvbnRhaW5zKGtleXMsIHByb3ApKSB7XG4gICAgICAgIGtleXMucHVzaChwcm9wKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXRyaWV2ZSB0aGUgbmFtZXMgb2YgYW4gb2JqZWN0J3Mgb3duIHByb3BlcnRpZXMuXG4gIC8vIERlbGVnYXRlcyB0byAqKkVDTUFTY3JpcHQgNSoqJ3MgbmF0aXZlIGBPYmplY3Qua2V5c2BcbiAgXy5rZXlzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKCFfLmlzT2JqZWN0KG9iaikpIHJldHVybiBbXTtcbiAgICBpZiAobmF0aXZlS2V5cykgcmV0dXJuIG5hdGl2ZUtleXMob2JqKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmopIGlmIChfLmhhcyhvYmosIGtleSkpIGtleXMucHVzaChrZXkpO1xuICAgIC8vIEFoZW0sIElFIDwgOS5cbiAgICBpZiAoaGFzRW51bUJ1ZykgY29sbGVjdE5vbkVudW1Qcm9wcyhvYmosIGtleXMpO1xuICAgIHJldHVybiBrZXlzO1xuICB9O1xuXG4gIC8vIFJldHJpZXZlIGFsbCB0aGUgcHJvcGVydHkgbmFtZXMgb2YgYW4gb2JqZWN0LlxuICBfLmFsbEtleXMgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIFtdO1xuICAgIHZhciBrZXlzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikga2V5cy5wdXNoKGtleSk7XG4gICAgLy8gQWhlbSwgSUUgPCA5LlxuICAgIGlmIChoYXNFbnVtQnVnKSBjb2xsZWN0Tm9uRW51bVByb3BzKG9iaiwga2V5cyk7XG4gICAgcmV0dXJuIGtleXM7XG4gIH07XG5cbiAgLy8gUmV0cmlldmUgdGhlIHZhbHVlcyBvZiBhbiBvYmplY3QncyBwcm9wZXJ0aWVzLlxuICBfLnZhbHVlcyA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgdmFyIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIHZhciB2YWx1ZXMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhbHVlc1tpXSA9IG9ialtrZXlzW2ldXTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlcztcbiAgfTtcblxuICAvLyBSZXR1cm5zIHRoZSByZXN1bHRzIG9mIGFwcGx5aW5nIHRoZSBpdGVyYXRlZSB0byBlYWNoIGVsZW1lbnQgb2YgdGhlIG9iamVjdFxuICAvLyBJbiBjb250cmFzdCB0byBfLm1hcCBpdCByZXR1cm5zIGFuIG9iamVjdFxuICBfLm1hcE9iamVjdCA9IGZ1bmN0aW9uKG9iaiwgaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICBpdGVyYXRlZSA9IGNiKGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgICB2YXIga2V5cyA9ICBfLmtleXMob2JqKSxcbiAgICAgICAgICBsZW5ndGggPSBrZXlzLmxlbmd0aCxcbiAgICAgICAgICByZXN1bHRzID0ge30sXG4gICAgICAgICAgY3VycmVudEtleTtcbiAgICAgIGZvciAodmFyIGluZGV4ID0gMDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KyspIHtcbiAgICAgICAgY3VycmVudEtleSA9IGtleXNbaW5kZXhdO1xuICAgICAgICByZXN1bHRzW2N1cnJlbnRLZXldID0gaXRlcmF0ZWUob2JqW2N1cnJlbnRLZXldLCBjdXJyZW50S2V5LCBvYmopO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc3VsdHM7XG4gIH07XG5cbiAgLy8gQ29udmVydCBhbiBvYmplY3QgaW50byBhIGxpc3Qgb2YgYFtrZXksIHZhbHVlXWAgcGFpcnMuXG4gIF8ucGFpcnMgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhvYmopO1xuICAgIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgICB2YXIgcGFpcnMgPSBBcnJheShsZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHBhaXJzW2ldID0gW2tleXNbaV0sIG9ialtrZXlzW2ldXV07XG4gICAgfVxuICAgIHJldHVybiBwYWlycztcbiAgfTtcblxuICAvLyBJbnZlcnQgdGhlIGtleXMgYW5kIHZhbHVlcyBvZiBhbiBvYmplY3QuIFRoZSB2YWx1ZXMgbXVzdCBiZSBzZXJpYWxpemFibGUuXG4gIF8uaW52ZXJ0ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaik7XG4gICAgZm9yICh2YXIgaSA9IDAsIGxlbmd0aCA9IGtleXMubGVuZ3RoOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHJlc3VsdFtvYmpba2V5c1tpXV1dID0ga2V5c1tpXTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSBzb3J0ZWQgbGlzdCBvZiB0aGUgZnVuY3Rpb24gbmFtZXMgYXZhaWxhYmxlIG9uIHRoZSBvYmplY3QuXG4gIC8vIEFsaWFzZWQgYXMgYG1ldGhvZHNgXG4gIF8uZnVuY3Rpb25zID0gXy5tZXRob2RzID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgdmFyIG5hbWVzID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYmpba2V5XSkpIG5hbWVzLnB1c2goa2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG5hbWVzLnNvcnQoKTtcbiAgfTtcblxuICAvLyBFeHRlbmQgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIHByb3BlcnRpZXMgaW4gcGFzc2VkLWluIG9iamVjdChzKS5cbiAgXy5leHRlbmQgPSBjcmVhdGVBc3NpZ25lcihfLmFsbEtleXMpO1xuXG4gIC8vIEFzc2lnbnMgYSBnaXZlbiBvYmplY3Qgd2l0aCBhbGwgdGhlIG93biBwcm9wZXJ0aWVzIGluIHRoZSBwYXNzZWQtaW4gb2JqZWN0KHMpXG4gIC8vIChodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvYXNzaWduKVxuICBfLmV4dGVuZE93biA9IF8uYXNzaWduID0gY3JlYXRlQXNzaWduZXIoXy5rZXlzKTtcblxuICAvLyBSZXR1cm5zIHRoZSBmaXJzdCBrZXkgb24gYW4gb2JqZWN0IHRoYXQgcGFzc2VzIGEgcHJlZGljYXRlIHRlc3RcbiAgXy5maW5kS2V5ID0gZnVuY3Rpb24ob2JqLCBwcmVkaWNhdGUsIGNvbnRleHQpIHtcbiAgICBwcmVkaWNhdGUgPSBjYihwcmVkaWNhdGUsIGNvbnRleHQpO1xuICAgIHZhciBrZXlzID0gXy5rZXlzKG9iaiksIGtleTtcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuZ3RoID0ga2V5cy5sZW5ndGg7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmIChwcmVkaWNhdGUob2JqW2tleV0sIGtleSwgb2JqKSkgcmV0dXJuIGtleTtcbiAgICB9XG4gIH07XG5cbiAgLy8gUmV0dXJuIGEgY29weSBvZiB0aGUgb2JqZWN0IG9ubHkgY29udGFpbmluZyB0aGUgd2hpdGVsaXN0ZWQgcHJvcGVydGllcy5cbiAgXy5waWNrID0gZnVuY3Rpb24ob2JqZWN0LCBvaXRlcmF0ZWUsIGNvbnRleHQpIHtcbiAgICB2YXIgcmVzdWx0ID0ge30sIG9iaiA9IG9iamVjdCwgaXRlcmF0ZWUsIGtleXM7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIGlmIChfLmlzRnVuY3Rpb24ob2l0ZXJhdGVlKSkge1xuICAgICAga2V5cyA9IF8uYWxsS2V5cyhvYmopO1xuICAgICAgaXRlcmF0ZWUgPSBvcHRpbWl6ZUNiKG9pdGVyYXRlZSwgY29udGV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBmbGF0dGVuKGFyZ3VtZW50cywgZmFsc2UsIGZhbHNlLCAxKTtcbiAgICAgIGl0ZXJhdGVlID0gZnVuY3Rpb24odmFsdWUsIGtleSwgb2JqKSB7IHJldHVybiBrZXkgaW4gb2JqOyB9O1xuICAgICAgb2JqID0gT2JqZWN0KG9iaik7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsZW5ndGggPSBrZXlzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgIHZhciB2YWx1ZSA9IG9ialtrZXldO1xuICAgICAgaWYgKGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iaikpIHJlc3VsdFtrZXldID0gdmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgIC8vIFJldHVybiBhIGNvcHkgb2YgdGhlIG9iamVjdCB3aXRob3V0IHRoZSBibGFja2xpc3RlZCBwcm9wZXJ0aWVzLlxuICBfLm9taXQgPSBmdW5jdGlvbihvYmosIGl0ZXJhdGVlLCBjb250ZXh0KSB7XG4gICAgaWYgKF8uaXNGdW5jdGlvbihpdGVyYXRlZSkpIHtcbiAgICAgIGl0ZXJhdGVlID0gXy5uZWdhdGUoaXRlcmF0ZWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIga2V5cyA9IF8ubWFwKGZsYXR0ZW4oYXJndW1lbnRzLCBmYWxzZSwgZmFsc2UsIDEpLCBTdHJpbmcpO1xuICAgICAgaXRlcmF0ZWUgPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgICAgIHJldHVybiAhXy5jb250YWlucyhrZXlzLCBrZXkpO1xuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIF8ucGljayhvYmosIGl0ZXJhdGVlLCBjb250ZXh0KTtcbiAgfTtcblxuICAvLyBGaWxsIGluIGEgZ2l2ZW4gb2JqZWN0IHdpdGggZGVmYXVsdCBwcm9wZXJ0aWVzLlxuICBfLmRlZmF1bHRzID0gY3JlYXRlQXNzaWduZXIoXy5hbGxLZXlzLCB0cnVlKTtcblxuICAvLyBDcmVhdGVzIGFuIG9iamVjdCB0aGF0IGluaGVyaXRzIGZyb20gdGhlIGdpdmVuIHByb3RvdHlwZSBvYmplY3QuXG4gIC8vIElmIGFkZGl0aW9uYWwgcHJvcGVydGllcyBhcmUgcHJvdmlkZWQgdGhlbiB0aGV5IHdpbGwgYmUgYWRkZWQgdG8gdGhlXG4gIC8vIGNyZWF0ZWQgb2JqZWN0LlxuICBfLmNyZWF0ZSA9IGZ1bmN0aW9uKHByb3RvdHlwZSwgcHJvcHMpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUNyZWF0ZShwcm90b3R5cGUpO1xuICAgIGlmIChwcm9wcykgXy5leHRlbmRPd24ocmVzdWx0LCBwcm9wcyk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICAvLyBDcmVhdGUgYSAoc2hhbGxvdy1jbG9uZWQpIGR1cGxpY2F0ZSBvZiBhbiBvYmplY3QuXG4gIF8uY2xvbmUgPSBmdW5jdGlvbihvYmopIHtcbiAgICBpZiAoIV8uaXNPYmplY3Qob2JqKSkgcmV0dXJuIG9iajtcbiAgICByZXR1cm4gXy5pc0FycmF5KG9iaikgPyBvYmouc2xpY2UoKSA6IF8uZXh0ZW5kKHt9LCBvYmopO1xuICB9O1xuXG4gIC8vIEludm9rZXMgaW50ZXJjZXB0b3Igd2l0aCB0aGUgb2JqLCBhbmQgdGhlbiByZXR1cm5zIG9iai5cbiAgLy8gVGhlIHByaW1hcnkgcHVycG9zZSBvZiB0aGlzIG1ldGhvZCBpcyB0byBcInRhcCBpbnRvXCIgYSBtZXRob2QgY2hhaW4sIGluXG4gIC8vIG9yZGVyIHRvIHBlcmZvcm0gb3BlcmF0aW9ucyBvbiBpbnRlcm1lZGlhdGUgcmVzdWx0cyB3aXRoaW4gdGhlIGNoYWluLlxuICBfLnRhcCA9IGZ1bmN0aW9uKG9iaiwgaW50ZXJjZXB0b3IpIHtcbiAgICBpbnRlcmNlcHRvcihvYmopO1xuICAgIHJldHVybiBvYmo7XG4gIH07XG5cbiAgLy8gUmV0dXJucyB3aGV0aGVyIGFuIG9iamVjdCBoYXMgYSBnaXZlbiBzZXQgb2YgYGtleTp2YWx1ZWAgcGFpcnMuXG4gIF8uaXNNYXRjaCA9IGZ1bmN0aW9uKG9iamVjdCwgYXR0cnMpIHtcbiAgICB2YXIga2V5cyA9IF8ua2V5cyhhdHRycyksIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgIGlmIChvYmplY3QgPT0gbnVsbCkgcmV0dXJuICFsZW5ndGg7XG4gICAgdmFyIG9iaiA9IE9iamVjdChvYmplY3QpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGF0dHJzW2tleV0gIT09IG9ialtrZXldIHx8ICEoa2V5IGluIG9iaikpIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH07XG5cblxuICAvLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuICB2YXIgZXEgPSBmdW5jdGlvbihhLCBiLCBhU3RhY2ssIGJTdGFjaykge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikgcmV0dXJuIGEgIT09IDAgfHwgMSAvIGEgPT09IDEgLyBiO1xuICAgIC8vIEEgc3RyaWN0IGNvbXBhcmlzb24gaXMgbmVjZXNzYXJ5IGJlY2F1c2UgYG51bGwgPT0gdW5kZWZpbmVkYC5cbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGEgPT09IGI7XG4gICAgLy8gVW53cmFwIGFueSB3cmFwcGVkIG9iamVjdHMuXG4gICAgaWYgKGEgaW5zdGFuY2VvZiBfKSBhID0gYS5fd3JhcHBlZDtcbiAgICBpZiAoYiBpbnN0YW5jZW9mIF8pIGIgPSBiLl93cmFwcGVkO1xuICAgIC8vIENvbXBhcmUgYFtbQ2xhc3NdXWAgbmFtZXMuXG4gICAgdmFyIGNsYXNzTmFtZSA9IHRvU3RyaW5nLmNhbGwoYSk7XG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkgcmV0dXJuIGZhbHNlO1xuICAgIHN3aXRjaCAoY2xhc3NOYW1lKSB7XG4gICAgICAvLyBTdHJpbmdzLCBudW1iZXJzLCByZWd1bGFyIGV4cHJlc3Npb25zLCBkYXRlcywgYW5kIGJvb2xlYW5zIGFyZSBjb21wYXJlZCBieSB2YWx1ZS5cbiAgICAgIGNhc2UgJ1tvYmplY3QgUmVnRXhwXSc6XG4gICAgICAvLyBSZWdFeHBzIGFyZSBjb2VyY2VkIHRvIHN0cmluZ3MgZm9yIGNvbXBhcmlzb24gKE5vdGU6ICcnICsgL2EvaSA9PT0gJy9hL2knKVxuICAgICAgY2FzZSAnW29iamVjdCBTdHJpbmddJzpcbiAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgLy8gZXF1aXZhbGVudCB0byBgbmV3IFN0cmluZyhcIjVcIilgLlxuICAgICAgICByZXR1cm4gJycgKyBhID09PSAnJyArIGI7XG4gICAgICBjYXNlICdbb2JqZWN0IE51bWJlcl0nOlxuICAgICAgICAvLyBgTmFOYHMgYXJlIGVxdWl2YWxlbnQsIGJ1dCBub24tcmVmbGV4aXZlLlxuICAgICAgICAvLyBPYmplY3QoTmFOKSBpcyBlcXVpdmFsZW50IHRvIE5hTlxuICAgICAgICBpZiAoK2EgIT09ICthKSByZXR1cm4gK2IgIT09ICtiO1xuICAgICAgICAvLyBBbiBgZWdhbGAgY29tcGFyaXNvbiBpcyBwZXJmb3JtZWQgZm9yIG90aGVyIG51bWVyaWMgdmFsdWVzLlxuICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiO1xuICAgICAgY2FzZSAnW29iamVjdCBEYXRlXSc6XG4gICAgICBjYXNlICdbb2JqZWN0IEJvb2xlYW5dJzpcbiAgICAgICAgLy8gQ29lcmNlIGRhdGVzIGFuZCBib29sZWFucyB0byBudW1lcmljIHByaW1pdGl2ZSB2YWx1ZXMuIERhdGVzIGFyZSBjb21wYXJlZCBieSB0aGVpclxuICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgIC8vIG9mIGBOYU5gIGFyZSBub3QgZXF1aXZhbGVudC5cbiAgICAgICAgcmV0dXJuICthID09PSArYjtcbiAgICB9XG5cbiAgICB2YXIgYXJlQXJyYXlzID0gY2xhc3NOYW1lID09PSAnW29iamVjdCBBcnJheV0nO1xuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICBpZiAodHlwZW9mIGEgIT0gJ29iamVjdCcgfHwgdHlwZW9mIGIgIT0gJ29iamVjdCcpIHJldHVybiBmYWxzZTtcblxuICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAvLyBmcm9tIGRpZmZlcmVudCBmcmFtZXMgYXJlLlxuICAgICAgdmFyIGFDdG9yID0gYS5jb25zdHJ1Y3RvciwgYkN0b3IgPSBiLmNvbnN0cnVjdG9yO1xuICAgICAgaWYgKGFDdG9yICE9PSBiQ3RvciAmJiAhKF8uaXNGdW5jdGlvbihhQ3RvcikgJiYgYUN0b3IgaW5zdGFuY2VvZiBhQ3RvciAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF8uaXNGdW5jdGlvbihiQ3RvcikgJiYgYkN0b3IgaW5zdGFuY2VvZiBiQ3RvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJiYgKCdjb25zdHJ1Y3RvcicgaW4gYSAmJiAnY29uc3RydWN0b3InIGluIGIpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW107XG4gICAgYlN0YWNrID0gYlN0YWNrIHx8IFtdO1xuICAgIHZhciBsZW5ndGggPSBhU3RhY2subGVuZ3RoO1xuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgLy8gTGluZWFyIHNlYXJjaC4gUGVyZm9ybWFuY2UgaXMgaW52ZXJzZWx5IHByb3BvcnRpb25hbCB0byB0aGUgbnVtYmVyIG9mXG4gICAgICAvLyB1bmlxdWUgbmVzdGVkIHN0cnVjdHVyZXMuXG4gICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYjtcbiAgICB9XG5cbiAgICAvLyBBZGQgdGhlIGZpcnN0IG9iamVjdCB0byB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnB1c2goYSk7XG4gICAgYlN0YWNrLnB1c2goYik7XG5cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgYW5kIGFycmF5cy5cbiAgICBpZiAoYXJlQXJyYXlzKSB7XG4gICAgICAvLyBDb21wYXJlIGFycmF5IGxlbmd0aHMgdG8gZGV0ZXJtaW5lIGlmIGEgZGVlcCBjb21wYXJpc29uIGlzIG5lY2Vzc2FyeS5cbiAgICAgIGxlbmd0aCA9IGEubGVuZ3RoO1xuICAgICAgaWYgKGxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERlZXAgY29tcGFyZSB0aGUgY29udGVudHMsIGlnbm9yaW5nIG5vbi1udW1lcmljIHByb3BlcnRpZXMuXG4gICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgaWYgKCFlcShhW2xlbmd0aF0sIGJbbGVuZ3RoXSwgYVN0YWNrLCBiU3RhY2spKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIERlZXAgY29tcGFyZSBvYmplY3RzLlxuICAgICAgdmFyIGtleXMgPSBfLmtleXMoYSksIGtleTtcbiAgICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgaWYgKF8ua2V5cyhiKS5sZW5ndGggIT09IGxlbmd0aCkgcmV0dXJuIGZhbHNlO1xuICAgICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICAgIC8vIERlZXAgY29tcGFyZSBlYWNoIG1lbWJlclxuICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF07XG4gICAgICAgIGlmICghKF8uaGFzKGIsIGtleSkgJiYgZXEoYVtrZXldLCBiW2tleV0sIGFTdGFjaywgYlN0YWNrKSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpO1xuICAgIGJTdGFjay5wb3AoKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfTtcblxuICAvLyBQZXJmb3JtIGEgZGVlcCBjb21wYXJpc29uIHRvIGNoZWNrIGlmIHR3byBvYmplY3RzIGFyZSBlcXVhbC5cbiAgXy5pc0VxdWFsID0gZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBlcShhLCBiKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIGFycmF5LCBzdHJpbmcsIG9yIG9iamVjdCBlbXB0eT9cbiAgLy8gQW4gXCJlbXB0eVwiIG9iamVjdCBoYXMgbm8gZW51bWVyYWJsZSBvd24tcHJvcGVydGllcy5cbiAgXy5pc0VtcHR5ID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICBpZiAoaXNBcnJheUxpa2Uob2JqKSAmJiAoXy5pc0FycmF5KG9iaikgfHwgXy5pc1N0cmluZyhvYmopIHx8IF8uaXNBcmd1bWVudHMob2JqKSkpIHJldHVybiBvYmoubGVuZ3RoID09PSAwO1xuICAgIHJldHVybiBfLmtleXMob2JqKS5sZW5ndGggPT09IDA7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIERPTSBlbGVtZW50P1xuICBfLmlzRWxlbWVudCA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiAhIShvYmogJiYgb2JqLm5vZGVUeXBlID09PSAxKTtcbiAgfTtcblxuICAvLyBJcyBhIGdpdmVuIHZhbHVlIGFuIGFycmF5P1xuICAvLyBEZWxlZ2F0ZXMgdG8gRUNNQTUncyBuYXRpdmUgQXJyYXkuaXNBcnJheVxuICBfLmlzQXJyYXkgPSBuYXRpdmVJc0FycmF5IHx8IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiB0b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IEFycmF5XSc7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YXJpYWJsZSBhbiBvYmplY3Q/XG4gIF8uaXNPYmplY3QgPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgdHlwZSA9IHR5cGVvZiBvYmo7XG4gICAgcmV0dXJuIHR5cGUgPT09ICdmdW5jdGlvbicgfHwgdHlwZSA9PT0gJ29iamVjdCcgJiYgISFvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHNvbWUgaXNUeXBlIG1ldGhvZHM6IGlzQXJndW1lbnRzLCBpc0Z1bmN0aW9uLCBpc1N0cmluZywgaXNOdW1iZXIsIGlzRGF0ZSwgaXNSZWdFeHAsIGlzRXJyb3IuXG4gIF8uZWFjaChbJ0FyZ3VtZW50cycsICdGdW5jdGlvbicsICdTdHJpbmcnLCAnTnVtYmVyJywgJ0RhdGUnLCAnUmVnRXhwJywgJ0Vycm9yJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBfWydpcycgKyBuYW1lXSA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgJyArIG5hbWUgKyAnXSc7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRGVmaW5lIGEgZmFsbGJhY2sgdmVyc2lvbiBvZiB0aGUgbWV0aG9kIGluIGJyb3dzZXJzIChhaGVtLCBJRSA8IDkpLCB3aGVyZVxuICAvLyB0aGVyZSBpc24ndCBhbnkgaW5zcGVjdGFibGUgXCJBcmd1bWVudHNcIiB0eXBlLlxuICBpZiAoIV8uaXNBcmd1bWVudHMoYXJndW1lbnRzKSkge1xuICAgIF8uaXNBcmd1bWVudHMgPSBmdW5jdGlvbihvYmopIHtcbiAgICAgIHJldHVybiBfLmhhcyhvYmosICdjYWxsZWUnKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gT3B0aW1pemUgYGlzRnVuY3Rpb25gIGlmIGFwcHJvcHJpYXRlLiBXb3JrIGFyb3VuZCBzb21lIHR5cGVvZiBidWdzIGluIG9sZCB2OCxcbiAgLy8gSUUgMTEgKCMxNjIxKSwgYW5kIGluIFNhZmFyaSA4ICgjMTkyOSkuXG4gIGlmICh0eXBlb2YgLy4vICE9ICdmdW5jdGlvbicgJiYgdHlwZW9mIEludDhBcnJheSAhPSAnb2JqZWN0Jykge1xuICAgIF8uaXNGdW5jdGlvbiA9IGZ1bmN0aW9uKG9iaikge1xuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT0gJ2Z1bmN0aW9uJyB8fCBmYWxzZTtcbiAgICB9O1xuICB9XG5cbiAgLy8gSXMgYSBnaXZlbiBvYmplY3QgYSBmaW5pdGUgbnVtYmVyP1xuICBfLmlzRmluaXRlID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIGlzRmluaXRlKG9iaikgJiYgIWlzTmFOKHBhcnNlRmxvYXQob2JqKSk7XG4gIH07XG5cbiAgLy8gSXMgdGhlIGdpdmVuIHZhbHVlIGBOYU5gPyAoTmFOIGlzIHRoZSBvbmx5IG51bWJlciB3aGljaCBkb2VzIG5vdCBlcXVhbCBpdHNlbGYpLlxuICBfLmlzTmFOID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIF8uaXNOdW1iZXIob2JqKSAmJiBvYmogIT09ICtvYmo7XG4gIH07XG5cbiAgLy8gSXMgYSBnaXZlbiB2YWx1ZSBhIGJvb2xlYW4/XG4gIF8uaXNCb29sZWFuID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdHJ1ZSB8fCBvYmogPT09IGZhbHNlIHx8IHRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgQm9vbGVhbl0nO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFsdWUgZXF1YWwgdG8gbnVsbD9cbiAgXy5pc051bGwgPSBmdW5jdGlvbihvYmopIHtcbiAgICByZXR1cm4gb2JqID09PSBudWxsO1xuICB9O1xuXG4gIC8vIElzIGEgZ2l2ZW4gdmFyaWFibGUgdW5kZWZpbmVkP1xuICBfLmlzVW5kZWZpbmVkID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgcmV0dXJuIG9iaiA9PT0gdm9pZCAwO1xuICB9O1xuXG4gIC8vIFNob3J0Y3V0IGZ1bmN0aW9uIGZvciBjaGVja2luZyBpZiBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gcHJvcGVydHkgZGlyZWN0bHlcbiAgLy8gb24gaXRzZWxmIChpbiBvdGhlciB3b3Jkcywgbm90IG9uIGEgcHJvdG90eXBlKS5cbiAgXy5oYXMgPSBmdW5jdGlvbihvYmosIGtleSkge1xuICAgIHJldHVybiBvYmogIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KTtcbiAgfTtcblxuICAvLyBVdGlsaXR5IEZ1bmN0aW9uc1xuICAvLyAtLS0tLS0tLS0tLS0tLS0tLVxuXG4gIC8vIFJ1biBVbmRlcnNjb3JlLmpzIGluICpub0NvbmZsaWN0KiBtb2RlLCByZXR1cm5pbmcgdGhlIGBfYCB2YXJpYWJsZSB0byBpdHNcbiAgLy8gcHJldmlvdXMgb3duZXIuIFJldHVybnMgYSByZWZlcmVuY2UgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm5vQ29uZmxpY3QgPSBmdW5jdGlvbigpIHtcbiAgICByb290Ll8gPSBwcmV2aW91c1VuZGVyc2NvcmU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgLy8gS2VlcCB0aGUgaWRlbnRpdHkgZnVuY3Rpb24gYXJvdW5kIGZvciBkZWZhdWx0IGl0ZXJhdGVlcy5cbiAgXy5pZGVudGl0eSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9O1xuXG4gIC8vIFByZWRpY2F0ZS1nZW5lcmF0aW5nIGZ1bmN0aW9ucy4gT2Z0ZW4gdXNlZnVsIG91dHNpZGUgb2YgVW5kZXJzY29yZS5cbiAgXy5jb25zdGFudCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH07XG4gIH07XG5cbiAgXy5ub29wID0gZnVuY3Rpb24oKXt9O1xuXG4gIF8ucHJvcGVydHkgPSBwcm9wZXJ0eTtcblxuICAvLyBHZW5lcmF0ZXMgYSBmdW5jdGlvbiBmb3IgYSBnaXZlbiBvYmplY3QgdGhhdCByZXR1cm5zIGEgZ2l2ZW4gcHJvcGVydHkuXG4gIF8ucHJvcGVydHlPZiA9IGZ1bmN0aW9uKG9iaikge1xuICAgIHJldHVybiBvYmogPT0gbnVsbCA/IGZ1bmN0aW9uKCl7fSA6IGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIG9ialtrZXldO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUmV0dXJucyBhIHByZWRpY2F0ZSBmb3IgY2hlY2tpbmcgd2hldGhlciBhbiBvYmplY3QgaGFzIGEgZ2l2ZW4gc2V0IG9mXG4gIC8vIGBrZXk6dmFsdWVgIHBhaXJzLlxuICBfLm1hdGNoZXIgPSBfLm1hdGNoZXMgPSBmdW5jdGlvbihhdHRycykge1xuICAgIGF0dHJzID0gXy5leHRlbmRPd24oe30sIGF0dHJzKTtcbiAgICByZXR1cm4gZnVuY3Rpb24ob2JqKSB7XG4gICAgICByZXR1cm4gXy5pc01hdGNoKG9iaiwgYXR0cnMpO1xuICAgIH07XG4gIH07XG5cbiAgLy8gUnVuIGEgZnVuY3Rpb24gKipuKiogdGltZXMuXG4gIF8udGltZXMgPSBmdW5jdGlvbihuLCBpdGVyYXRlZSwgY29udGV4dCkge1xuICAgIHZhciBhY2N1bSA9IEFycmF5KE1hdGgubWF4KDAsIG4pKTtcbiAgICBpdGVyYXRlZSA9IG9wdGltaXplQ2IoaXRlcmF0ZWUsIGNvbnRleHQsIDEpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSBhY2N1bVtpXSA9IGl0ZXJhdGVlKGkpO1xuICAgIHJldHVybiBhY2N1bTtcbiAgfTtcblxuICAvLyBSZXR1cm4gYSByYW5kb20gaW50ZWdlciBiZXR3ZWVuIG1pbiBhbmQgbWF4IChpbmNsdXNpdmUpLlxuICBfLnJhbmRvbSA9IGZ1bmN0aW9uKG1pbiwgbWF4KSB7XG4gICAgaWYgKG1heCA9PSBudWxsKSB7XG4gICAgICBtYXggPSBtaW47XG4gICAgICBtaW4gPSAwO1xuICAgIH1cbiAgICByZXR1cm4gbWluICsgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKG1heCAtIG1pbiArIDEpKTtcbiAgfTtcblxuICAvLyBBIChwb3NzaWJseSBmYXN0ZXIpIHdheSB0byBnZXQgdGhlIGN1cnJlbnQgdGltZXN0YW1wIGFzIGFuIGludGVnZXIuXG4gIF8ubm93ID0gRGF0ZS5ub3cgfHwgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuICB9O1xuXG4gICAvLyBMaXN0IG9mIEhUTUwgZW50aXRpZXMgZm9yIGVzY2FwaW5nLlxuICB2YXIgZXNjYXBlTWFwID0ge1xuICAgICcmJzogJyZhbXA7JyxcbiAgICAnPCc6ICcmbHQ7JyxcbiAgICAnPic6ICcmZ3Q7JyxcbiAgICAnXCInOiAnJnF1b3Q7JyxcbiAgICBcIidcIjogJyYjeDI3OycsXG4gICAgJ2AnOiAnJiN4NjA7J1xuICB9O1xuICB2YXIgdW5lc2NhcGVNYXAgPSBfLmludmVydChlc2NhcGVNYXApO1xuXG4gIC8vIEZ1bmN0aW9ucyBmb3IgZXNjYXBpbmcgYW5kIHVuZXNjYXBpbmcgc3RyaW5ncyB0by9mcm9tIEhUTUwgaW50ZXJwb2xhdGlvbi5cbiAgdmFyIGNyZWF0ZUVzY2FwZXIgPSBmdW5jdGlvbihtYXApIHtcbiAgICB2YXIgZXNjYXBlciA9IGZ1bmN0aW9uKG1hdGNoKSB7XG4gICAgICByZXR1cm4gbWFwW21hdGNoXTtcbiAgICB9O1xuICAgIC8vIFJlZ2V4ZXMgZm9yIGlkZW50aWZ5aW5nIGEga2V5IHRoYXQgbmVlZHMgdG8gYmUgZXNjYXBlZFxuICAgIHZhciBzb3VyY2UgPSAnKD86JyArIF8ua2V5cyhtYXApLmpvaW4oJ3wnKSArICcpJztcbiAgICB2YXIgdGVzdFJlZ2V4cCA9IFJlZ0V4cChzb3VyY2UpO1xuICAgIHZhciByZXBsYWNlUmVnZXhwID0gUmVnRXhwKHNvdXJjZSwgJ2cnKTtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgICBzdHJpbmcgPSBzdHJpbmcgPT0gbnVsbCA/ICcnIDogJycgKyBzdHJpbmc7XG4gICAgICByZXR1cm4gdGVzdFJlZ2V4cC50ZXN0KHN0cmluZykgPyBzdHJpbmcucmVwbGFjZShyZXBsYWNlUmVnZXhwLCBlc2NhcGVyKSA6IHN0cmluZztcbiAgICB9O1xuICB9O1xuICBfLmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIoZXNjYXBlTWFwKTtcbiAgXy51bmVzY2FwZSA9IGNyZWF0ZUVzY2FwZXIodW5lc2NhcGVNYXApO1xuXG4gIC8vIElmIHRoZSB2YWx1ZSBvZiB0aGUgbmFtZWQgYHByb3BlcnR5YCBpcyBhIGZ1bmN0aW9uIHRoZW4gaW52b2tlIGl0IHdpdGggdGhlXG4gIC8vIGBvYmplY3RgIGFzIGNvbnRleHQ7IG90aGVyd2lzZSwgcmV0dXJuIGl0LlxuICBfLnJlc3VsdCA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHksIGZhbGxiYWNrKSB7XG4gICAgdmFyIHZhbHVlID0gb2JqZWN0ID09IG51bGwgPyB2b2lkIDAgOiBvYmplY3RbcHJvcGVydHldO1xuICAgIGlmICh2YWx1ZSA9PT0gdm9pZCAwKSB7XG4gICAgICB2YWx1ZSA9IGZhbGxiYWNrO1xuICAgIH1cbiAgICByZXR1cm4gXy5pc0Z1bmN0aW9uKHZhbHVlKSA/IHZhbHVlLmNhbGwob2JqZWN0KSA6IHZhbHVlO1xuICB9O1xuXG4gIC8vIEdlbmVyYXRlIGEgdW5pcXVlIGludGVnZXIgaWQgKHVuaXF1ZSB3aXRoaW4gdGhlIGVudGlyZSBjbGllbnQgc2Vzc2lvbikuXG4gIC8vIFVzZWZ1bCBmb3IgdGVtcG9yYXJ5IERPTSBpZHMuXG4gIHZhciBpZENvdW50ZXIgPSAwO1xuICBfLnVuaXF1ZUlkID0gZnVuY3Rpb24ocHJlZml4KSB7XG4gICAgdmFyIGlkID0gKytpZENvdW50ZXIgKyAnJztcbiAgICByZXR1cm4gcHJlZml4ID8gcHJlZml4ICsgaWQgOiBpZDtcbiAgfTtcblxuICAvLyBCeSBkZWZhdWx0LCBVbmRlcnNjb3JlIHVzZXMgRVJCLXN0eWxlIHRlbXBsYXRlIGRlbGltaXRlcnMsIGNoYW5nZSB0aGVcbiAgLy8gZm9sbG93aW5nIHRlbXBsYXRlIHNldHRpbmdzIHRvIHVzZSBhbHRlcm5hdGl2ZSBkZWxpbWl0ZXJzLlxuICBfLnRlbXBsYXRlU2V0dGluZ3MgPSB7XG4gICAgZXZhbHVhdGUgICAgOiAvPCUoW1xcc1xcU10rPyklPi9nLFxuICAgIGludGVycG9sYXRlIDogLzwlPShbXFxzXFxTXSs/KSU+L2csXG4gICAgZXNjYXBlICAgICAgOiAvPCUtKFtcXHNcXFNdKz8pJT4vZ1xuICB9O1xuXG4gIC8vIFdoZW4gY3VzdG9taXppbmcgYHRlbXBsYXRlU2V0dGluZ3NgLCBpZiB5b3UgZG9uJ3Qgd2FudCB0byBkZWZpbmUgYW5cbiAgLy8gaW50ZXJwb2xhdGlvbiwgZXZhbHVhdGlvbiBvciBlc2NhcGluZyByZWdleCwgd2UgbmVlZCBvbmUgdGhhdCBpc1xuICAvLyBndWFyYW50ZWVkIG5vdCB0byBtYXRjaC5cbiAgdmFyIG5vTWF0Y2ggPSAvKC4pXi87XG5cbiAgLy8gQ2VydGFpbiBjaGFyYWN0ZXJzIG5lZWQgdG8gYmUgZXNjYXBlZCBzbyB0aGF0IHRoZXkgY2FuIGJlIHB1dCBpbnRvIGFcbiAgLy8gc3RyaW5nIGxpdGVyYWwuXG4gIHZhciBlc2NhcGVzID0ge1xuICAgIFwiJ1wiOiAgICAgIFwiJ1wiLFxuICAgICdcXFxcJzogICAgICdcXFxcJyxcbiAgICAnXFxyJzogICAgICdyJyxcbiAgICAnXFxuJzogICAgICduJyxcbiAgICAnXFx1MjAyOCc6ICd1MjAyOCcsXG4gICAgJ1xcdTIwMjknOiAndTIwMjknXG4gIH07XG5cbiAgdmFyIGVzY2FwZXIgPSAvXFxcXHwnfFxccnxcXG58XFx1MjAyOHxcXHUyMDI5L2c7XG5cbiAgdmFyIGVzY2FwZUNoYXIgPSBmdW5jdGlvbihtYXRjaCkge1xuICAgIHJldHVybiAnXFxcXCcgKyBlc2NhcGVzW21hdGNoXTtcbiAgfTtcblxuICAvLyBKYXZhU2NyaXB0IG1pY3JvLXRlbXBsYXRpbmcsIHNpbWlsYXIgdG8gSm9obiBSZXNpZydzIGltcGxlbWVudGF0aW9uLlxuICAvLyBVbmRlcnNjb3JlIHRlbXBsYXRpbmcgaGFuZGxlcyBhcmJpdHJhcnkgZGVsaW1pdGVycywgcHJlc2VydmVzIHdoaXRlc3BhY2UsXG4gIC8vIGFuZCBjb3JyZWN0bHkgZXNjYXBlcyBxdW90ZXMgd2l0aGluIGludGVycG9sYXRlZCBjb2RlLlxuICAvLyBOQjogYG9sZFNldHRpbmdzYCBvbmx5IGV4aXN0cyBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHkuXG4gIF8udGVtcGxhdGUgPSBmdW5jdGlvbih0ZXh0LCBzZXR0aW5ncywgb2xkU2V0dGluZ3MpIHtcbiAgICBpZiAoIXNldHRpbmdzICYmIG9sZFNldHRpbmdzKSBzZXR0aW5ncyA9IG9sZFNldHRpbmdzO1xuICAgIHNldHRpbmdzID0gXy5kZWZhdWx0cyh7fSwgc2V0dGluZ3MsIF8udGVtcGxhdGVTZXR0aW5ncyk7XG5cbiAgICAvLyBDb21iaW5lIGRlbGltaXRlcnMgaW50byBvbmUgcmVndWxhciBleHByZXNzaW9uIHZpYSBhbHRlcm5hdGlvbi5cbiAgICB2YXIgbWF0Y2hlciA9IFJlZ0V4cChbXG4gICAgICAoc2V0dGluZ3MuZXNjYXBlIHx8IG5vTWF0Y2gpLnNvdXJjZSxcbiAgICAgIChzZXR0aW5ncy5pbnRlcnBvbGF0ZSB8fCBub01hdGNoKS5zb3VyY2UsXG4gICAgICAoc2V0dGluZ3MuZXZhbHVhdGUgfHwgbm9NYXRjaCkuc291cmNlXG4gICAgXS5qb2luKCd8JykgKyAnfCQnLCAnZycpO1xuXG4gICAgLy8gQ29tcGlsZSB0aGUgdGVtcGxhdGUgc291cmNlLCBlc2NhcGluZyBzdHJpbmcgbGl0ZXJhbHMgYXBwcm9wcmlhdGVseS5cbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBzb3VyY2UgPSBcIl9fcCs9J1wiO1xuICAgIHRleHQucmVwbGFjZShtYXRjaGVyLCBmdW5jdGlvbihtYXRjaCwgZXNjYXBlLCBpbnRlcnBvbGF0ZSwgZXZhbHVhdGUsIG9mZnNldCkge1xuICAgICAgc291cmNlICs9IHRleHQuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShlc2NhcGVyLCBlc2NhcGVDaGFyKTtcbiAgICAgIGluZGV4ID0gb2Zmc2V0ICsgbWF0Y2gubGVuZ3RoO1xuXG4gICAgICBpZiAoZXNjYXBlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgZXNjYXBlICsgXCIpKT09bnVsbD8nJzpfLmVzY2FwZShfX3QpKStcXG4nXCI7XG4gICAgICB9IGVsc2UgaWYgKGludGVycG9sYXRlKSB7XG4gICAgICAgIHNvdXJjZSArPSBcIicrXFxuKChfX3Q9KFwiICsgaW50ZXJwb2xhdGUgKyBcIikpPT1udWxsPycnOl9fdCkrXFxuJ1wiO1xuICAgICAgfSBlbHNlIGlmIChldmFsdWF0ZSkge1xuICAgICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGUgKyBcIlxcbl9fcCs9J1wiO1xuICAgICAgfVxuXG4gICAgICAvLyBBZG9iZSBWTXMgbmVlZCB0aGUgbWF0Y2ggcmV0dXJuZWQgdG8gcHJvZHVjZSB0aGUgY29ycmVjdCBvZmZlc3QuXG4gICAgICByZXR1cm4gbWF0Y2g7XG4gICAgfSk7XG4gICAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAgIC8vIElmIGEgdmFyaWFibGUgaXMgbm90IHNwZWNpZmllZCwgcGxhY2UgZGF0YSB2YWx1ZXMgaW4gbG9jYWwgc2NvcGUuXG4gICAgaWYgKCFzZXR0aW5ncy52YXJpYWJsZSkgc291cmNlID0gJ3dpdGgob2JqfHx7fSl7XFxuJyArIHNvdXJjZSArICd9XFxuJztcblxuICAgIHNvdXJjZSA9IFwidmFyIF9fdCxfX3A9JycsX19qPUFycmF5LnByb3RvdHlwZS5qb2luLFwiICtcbiAgICAgIFwicHJpbnQ9ZnVuY3Rpb24oKXtfX3ArPV9fai5jYWxsKGFyZ3VtZW50cywnJyk7fTtcXG5cIiArXG4gICAgICBzb3VyY2UgKyAncmV0dXJuIF9fcDtcXG4nO1xuXG4gICAgdHJ5IHtcbiAgICAgIHZhciByZW5kZXIgPSBuZXcgRnVuY3Rpb24oc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaicsICdfJywgc291cmNlKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBlLnNvdXJjZSA9IHNvdXJjZTtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuXG4gICAgdmFyIHRlbXBsYXRlID0gZnVuY3Rpb24oZGF0YSkge1xuICAgICAgcmV0dXJuIHJlbmRlci5jYWxsKHRoaXMsIGRhdGEsIF8pO1xuICAgIH07XG5cbiAgICAvLyBQcm92aWRlIHRoZSBjb21waWxlZCBzb3VyY2UgYXMgYSBjb252ZW5pZW5jZSBmb3IgcHJlY29tcGlsYXRpb24uXG4gICAgdmFyIGFyZ3VtZW50ID0gc2V0dGluZ3MudmFyaWFibGUgfHwgJ29iaic7XG4gICAgdGVtcGxhdGUuc291cmNlID0gJ2Z1bmN0aW9uKCcgKyBhcmd1bWVudCArICcpe1xcbicgKyBzb3VyY2UgKyAnfSc7XG5cbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH07XG5cbiAgLy8gQWRkIGEgXCJjaGFpblwiIGZ1bmN0aW9uLiBTdGFydCBjaGFpbmluZyBhIHdyYXBwZWQgVW5kZXJzY29yZSBvYmplY3QuXG4gIF8uY2hhaW4gPSBmdW5jdGlvbihvYmopIHtcbiAgICB2YXIgaW5zdGFuY2UgPSBfKG9iaik7XG4gICAgaW5zdGFuY2UuX2NoYWluID0gdHJ1ZTtcbiAgICByZXR1cm4gaW5zdGFuY2U7XG4gIH07XG5cbiAgLy8gT09QXG4gIC8vIC0tLS0tLS0tLS0tLS0tLVxuICAvLyBJZiBVbmRlcnNjb3JlIGlzIGNhbGxlZCBhcyBhIGZ1bmN0aW9uLCBpdCByZXR1cm5zIGEgd3JhcHBlZCBvYmplY3QgdGhhdFxuICAvLyBjYW4gYmUgdXNlZCBPTy1zdHlsZS4gVGhpcyB3cmFwcGVyIGhvbGRzIGFsdGVyZWQgdmVyc2lvbnMgb2YgYWxsIHRoZVxuICAvLyB1bmRlcnNjb3JlIGZ1bmN0aW9ucy4gV3JhcHBlZCBvYmplY3RzIG1heSBiZSBjaGFpbmVkLlxuXG4gIC8vIEhlbHBlciBmdW5jdGlvbiB0byBjb250aW51ZSBjaGFpbmluZyBpbnRlcm1lZGlhdGUgcmVzdWx0cy5cbiAgdmFyIHJlc3VsdCA9IGZ1bmN0aW9uKGluc3RhbmNlLCBvYmopIHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX2NoYWluID8gXyhvYmopLmNoYWluKCkgOiBvYmo7XG4gIH07XG5cbiAgLy8gQWRkIHlvdXIgb3duIGN1c3RvbSBmdW5jdGlvbnMgdG8gdGhlIFVuZGVyc2NvcmUgb2JqZWN0LlxuICBfLm1peGluID0gZnVuY3Rpb24ob2JqKSB7XG4gICAgXy5lYWNoKF8uZnVuY3Rpb25zKG9iaiksIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICAgIHZhciBmdW5jID0gX1tuYW1lXSA9IG9ialtuYW1lXTtcbiAgICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIHZhciBhcmdzID0gW3RoaXMuX3dyYXBwZWRdO1xuICAgICAgICBwdXNoLmFwcGx5KGFyZ3MsIGFyZ3VtZW50cyk7XG4gICAgICAgIHJldHVybiByZXN1bHQodGhpcywgZnVuYy5hcHBseShfLCBhcmdzKSk7XG4gICAgICB9O1xuICAgIH0pO1xuICB9O1xuXG4gIC8vIEFkZCBhbGwgb2YgdGhlIFVuZGVyc2NvcmUgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyIG9iamVjdC5cbiAgXy5taXhpbihfKTtcblxuICAvLyBBZGQgYWxsIG11dGF0b3IgQXJyYXkgZnVuY3Rpb25zIHRvIHRoZSB3cmFwcGVyLlxuICBfLmVhY2goWydwb3AnLCAncHVzaCcsICdyZXZlcnNlJywgJ3NoaWZ0JywgJ3NvcnQnLCAnc3BsaWNlJywgJ3Vuc2hpZnQnXSwgZnVuY3Rpb24obmFtZSkge1xuICAgIHZhciBtZXRob2QgPSBBcnJheVByb3RvW25hbWVdO1xuICAgIF8ucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgb2JqID0gdGhpcy5fd3JhcHBlZDtcbiAgICAgIG1ldGhvZC5hcHBseShvYmosIGFyZ3VtZW50cyk7XG4gICAgICBpZiAoKG5hbWUgPT09ICdzaGlmdCcgfHwgbmFtZSA9PT0gJ3NwbGljZScpICYmIG9iai5sZW5ndGggPT09IDApIGRlbGV0ZSBvYmpbMF07XG4gICAgICByZXR1cm4gcmVzdWx0KHRoaXMsIG9iaik7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gQWRkIGFsbCBhY2Nlc3NvciBBcnJheSBmdW5jdGlvbnMgdG8gdGhlIHdyYXBwZXIuXG4gIF8uZWFjaChbJ2NvbmNhdCcsICdqb2luJywgJ3NsaWNlJ10sIGZ1bmN0aW9uKG5hbWUpIHtcbiAgICB2YXIgbWV0aG9kID0gQXJyYXlQcm90b1tuYW1lXTtcbiAgICBfLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIHJlc3VsdCh0aGlzLCBtZXRob2QuYXBwbHkodGhpcy5fd3JhcHBlZCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG5cbiAgLy8gRXh0cmFjdHMgdGhlIHJlc3VsdCBmcm9tIGEgd3JhcHBlZCBhbmQgY2hhaW5lZCBvYmplY3QuXG4gIF8ucHJvdG90eXBlLnZhbHVlID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuX3dyYXBwZWQ7XG4gIH07XG5cbiAgLy8gUHJvdmlkZSB1bndyYXBwaW5nIHByb3h5IGZvciBzb21lIG1ldGhvZHMgdXNlZCBpbiBlbmdpbmUgb3BlcmF0aW9uc1xuICAvLyBzdWNoIGFzIGFyaXRobWV0aWMgYW5kIEpTT04gc3RyaW5naWZpY2F0aW9uLlxuICBfLnByb3RvdHlwZS52YWx1ZU9mID0gXy5wcm90b3R5cGUudG9KU09OID0gXy5wcm90b3R5cGUudmFsdWU7XG5cbiAgXy5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gJycgKyB0aGlzLl93cmFwcGVkO1xuICB9O1xuXG4gIC8vIEFNRCByZWdpc3RyYXRpb24gaGFwcGVucyBhdCB0aGUgZW5kIGZvciBjb21wYXRpYmlsaXR5IHdpdGggQU1EIGxvYWRlcnNcbiAgLy8gdGhhdCBtYXkgbm90IGVuZm9yY2UgbmV4dC10dXJuIHNlbWFudGljcyBvbiBtb2R1bGVzLiBFdmVuIHRob3VnaCBnZW5lcmFsXG4gIC8vIHByYWN0aWNlIGZvciBBTUQgcmVnaXN0cmF0aW9uIGlzIHRvIGJlIGFub255bW91cywgdW5kZXJzY29yZSByZWdpc3RlcnNcbiAgLy8gYXMgYSBuYW1lZCBtb2R1bGUgYmVjYXVzZSwgbGlrZSBqUXVlcnksIGl0IGlzIGEgYmFzZSBsaWJyYXJ5IHRoYXQgaXNcbiAgLy8gcG9wdWxhciBlbm91Z2ggdG8gYmUgYnVuZGxlZCBpbiBhIHRoaXJkIHBhcnR5IGxpYiwgYnV0IG5vdCBiZSBwYXJ0IG9mXG4gIC8vIGFuIEFNRCBsb2FkIHJlcXVlc3QuIFRob3NlIGNhc2VzIGNvdWxkIGdlbmVyYXRlIGFuIGVycm9yIHdoZW4gYW5cbiAgLy8gYW5vbnltb3VzIGRlZmluZSgpIGlzIGNhbGxlZCBvdXRzaWRlIG9mIGEgbG9hZGVyIHJlcXVlc3QuXG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICBkZWZpbmUoJ3VuZGVyc2NvcmUnLCBbXSwgZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gXztcbiAgICB9KTtcbiAgfVxufS5jYWxsKHRoaXMpKTtcbiIsIi8qKlxuICogQ29udmVydCBhcnJheSBvZiAxNiBieXRlIHZhbHVlcyB0byBVVUlEIHN0cmluZyBmb3JtYXQgb2YgdGhlIGZvcm06XG4gKiBYWFhYWFhYWC1YWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIHJldHVybiAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJ5dGVzVG9VdWlkO1xuIiwiLy8gVW5pcXVlIElEIGNyZWF0aW9uIHJlcXVpcmVzIGEgaGlnaCBxdWFsaXR5IHJhbmRvbSAjIGdlbmVyYXRvci4gIEluIHRoZVxuLy8gYnJvd3NlciB0aGlzIGlzIGEgbGl0dGxlIGNvbXBsaWNhdGVkIGR1ZSB0byB1bmtub3duIHF1YWxpdHkgb2YgTWF0aC5yYW5kb20oKVxuLy8gYW5kIGluY29uc2lzdGVudCBzdXBwb3J0IGZvciB0aGUgYGNyeXB0b2AgQVBJLiAgV2UgZG8gdGhlIGJlc3Qgd2UgY2FuIHZpYVxuLy8gZmVhdHVyZS1kZXRlY3Rpb25cbnZhciBybmc7XG5cbnZhciBjcnlwdG8gPSBnbG9iYWwuY3J5cHRvIHx8IGdsb2JhbC5tc0NyeXB0bzsgLy8gZm9yIElFIDExXG5pZiAoY3J5cHRvICYmIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMpIHtcbiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvXG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgcm5nID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGNyeXB0by5nZXRSYW5kb21WYWx1ZXMocm5kczgpO1xuICAgIHJldHVybiBybmRzODtcbiAgfTtcbn1cblxuaWYgKCFybmcpIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgIHJuZHMgPSBuZXcgQXJyYXkoMTYpO1xuICBybmcgPSBmdW5jdGlvbigpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgcjsgaSA8IDE2OyBpKyspIHtcbiAgICAgIGlmICgoaSAmIDB4MDMpID09PSAwKSByID0gTWF0aC5yYW5kb20oKSAqIDB4MTAwMDAwMDAwO1xuICAgICAgcm5kc1tpXSA9IHIgPj4+ICgoaSAmIDB4MDMpIDw8IDMpICYgMHhmZjtcbiAgICB9XG5cbiAgICByZXR1cm4gcm5kcztcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBybmc7XG4iLCJ2YXIgcm5nID0gcmVxdWlyZSgnLi9saWIvcm5nJyk7XG52YXIgYnl0ZXNUb1V1aWQgPSByZXF1aXJlKCcuL2xpYi9ieXRlc1RvVXVpZCcpO1xuXG5mdW5jdGlvbiB2NChvcHRpb25zLCBidWYsIG9mZnNldCkge1xuICB2YXIgaSA9IGJ1ZiAmJiBvZmZzZXQgfHwgMDtcblxuICBpZiAodHlwZW9mKG9wdGlvbnMpID09ICdzdHJpbmcnKSB7XG4gICAgYnVmID0gb3B0aW9ucyA9PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iLCIvKiBBc3luYy1GU00uanNcclxuICogdmVyc2lvbiAwLjEuMFxyXG4gKiBcclxuICogQ29weXJpZ2h0IChjKSAyMDE3IE1hc2EgKGh0dHA6Ly93aXotY29kZS5kaWdpY2suanApXHJcbiAqIExJQ0VOU0U6IE1JVCBsaWNlbnNlXHJcbiAqL1xyXG5cclxudmFyIF8sIHV1aWQsIFByb21pc2UsIGxvZ2dlciwgaXNOb2RlSlMsIGlzRmFsc3ksIG1peGluLCBGU007XHJcblxyXG5fID0gcmVxdWlyZSgndW5kZXJzY29yZScpO1xyXG51dWlkID0gcmVxdWlyZSgndXVpZC92NCcpO1xyXG5Qcm9taXNlID0gcmVxdWlyZSgnYmx1ZWJpcmQnKTtcclxuXHJcbmxvZ2dlciA9IHtcclxuICAgIGRlYnVnZ2FibGU6IHRydWUsXHJcbiAgICBsb2dMZXZlbDogJ0RFQlVHJyxcclxuICAgIGxvZ0xldmVsRGF0YTogW1xyXG4gICAgICAgICdERUJVRycsXHJcbiAgICAgICAgJ0lORk8nLFxyXG4gICAgICAgICdXQVJOJyxcclxuICAgICAgICAnRVJST1InLFxyXG4gICAgXSxcclxuICAgIFxyXG4gICAgZGVidWc6IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcblx0XHRpZiAodGhpcy5kZWJ1Z2dhYmxlICYmIF8uaW5kZXhPZih0aGlzLmxvZ0xldmVsRGF0YSwgdGhpcy5sb2dMZXZlbCkgPD0gMCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnREVCVUc6ICcsIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIGluZm86IGZ1bmN0aW9uIChtZXNzYWdlKSB7XHJcblx0XHRpZiAodGhpcy5kZWJ1Z2dhYmxlICYmIF8uaW5kZXhPZih0aGlzLmxvZ0xldmVsRGF0YSwgdGhpcy5sb2dMZXZlbCkgPD0gMSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnSU5GTzogJywgbWVzc2FnZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgd2FybjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuXHRcdGlmICh0aGlzLmRlYnVnZ2FibGUgJiYgXy5pbmRleE9mKHRoaXMubG9nTGV2ZWxEYXRhLCB0aGlzLmxvZ0xldmVsKSA8PSAyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdXQVJOOiAnLCBtZXNzYWdlKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBlcnJvcjogZnVuY3Rpb24gKG1lc3NhZ2UpIHtcclxuXHRcdGlmICh0aGlzLmRlYnVnZ2FibGUgJiYgXy5pbmRleE9mKHRoaXMubG9nTGV2ZWxEYXRhLCB0aGlzLmxvZ0xldmVsKSA8PSAzKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0VSUk9SOiAnLCBtZXNzYWdlKTtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFUlJPUjogJyArIG1lc3NhZ2UpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn07XHJcblxyXG5pc05vZGVKUyA9ICEhKCFfLmlzVW5kZWZpbmVkKHByb2Nlc3MpICYmIHByb2Nlc3MudmVyc2lvbnMgJiYgcHJvY2Vzcy52ZXJzaW9ucy5ub2RlKTtcclxuXHJcbmlzRmFsc3kgPSBfLm5lZ2F0ZShCb29sZWFuKTtcclxuXHJcbm1peGluID0ge1xyXG4gICAgYWNjZXNzb3I6IHtcclxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwuZ2V0KGtleSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5tb2RlbC5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgdW5zZXQ6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubW9kZWwudW5zZXQoa2V5KTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBleHRlbmQ6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1vZGVsLmV4dGVuZChkYXRhKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBzYXZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHRoaXMubW9kZWwuc2F2ZSgpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgIHJlc3RvcmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5yZXN0b3JlKCk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5tb2RlbC5jbGVhcigpO1xyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBoZWxwZXI6IHtcclxuICAgICAgICAkZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIHZhciBzdXBlclN0YXRlID0gdGhpcy5fZ2V0U3VwZXJTdGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoIV8uaXNOdWxsKHN1cGVyU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXJTdGF0ZS5tb2RlbC5nZXQoa2V5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICRzZXQ6IGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHZhciBzdXBlclN0YXRlID0gdGhpcy5fZ2V0U3VwZXJTdGF0ZSgpO1xyXG4gICAgICAgICAgICBpZiAoIV8uaXNOdWxsKHN1cGVyU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXJTdGF0ZS5tb2RlbC5zZXQoa2V5LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAkdW5zZXQ6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgdmFyIHN1cGVyU3RhdGUgPSB0aGlzLl9nZXRTdXBlclN0YXRlKCk7XHJcbiAgICAgICAgICAgIGlmICghXy5pc051bGwoc3VwZXJTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdXBlclN0YXRlLm1vZGVsLnVuc2V0KGtleSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAkZXh0ZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICB2YXIgc3VwZXJTdGF0ZSA9IHRoaXMuX2dldFN1cGVyU3RhdGUoKTtcclxuICAgICAgICAgICAgaWYgKCFfLmlzTnVsbChzdXBlclN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1cGVyU3RhdGUubW9kZWwuZXh0ZW5kKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJHNhdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN1cGVyU3RhdGUgPSB0aGlzLl9nZXRTdXBlclN0YXRlKCk7XHJcbiAgICAgICAgICAgIGlmICghXy5pc051bGwoc3VwZXJTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHN1cGVyU3RhdGUubW9kZWwuc2F2ZSgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAkcmVzdG9yZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc3VwZXJTdGF0ZSA9IHRoaXMuX2dldFN1cGVyU3RhdGUoKTtcclxuICAgICAgICAgICAgaWYgKCFfLmlzTnVsbChzdXBlclN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXJTdGF0ZS5tb2RlbC5yZXN0b3JlKCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICRjbGVhcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgc3VwZXJTdGF0ZSA9IHRoaXMuX2dldFN1cGVyU3RhdGUoKTtcclxuICAgICAgICAgICAgaWYgKCFfLmlzTnVsbChzdXBlclN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgc3VwZXJTdGF0ZS5tb2RlbC5jbGVhcigpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZGlzYWJsZToge1xyXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+WGhemDqOODh+ODvOOCv+OCkuS/neaMgeOBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K544Gv5YaF6YOo44OH44O844K/44KS5L+d5oyB44Gn44GN44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICB1bnNldDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+WGhemDqOODh+ODvOOCv+OCkuS/neaMgeOBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgZXh0ZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+WGhemDqOODh+ODvOOCv+OCkuS/neaMgeOBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgc2F2ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+WGhemDqOODh+ODvOOCv+OCkuS/neaMgeOBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVzdG9yZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+WGhemDqOODh+ODvOOCv+OCkuS/neaMgeOBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7Pjgrnjga/lhoXpg6jjg4fjg7zjgr/jgpLkv53mjIHjgafjgY3jgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFxyXG4gICAgICAgICRwcm9wczogbnVsbCxcclxuICAgICAgICBcclxuICAgICAgICAkbWV0aG9kczogbnVsbCxcclxuICAgICAgICBcclxuICAgICAgICAkZ2V0OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K544Gv5YaF6YOo44OH44O844K/44KS5L+d5oyB44Gn44GN44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7Pjgrnjga/lhoXpg6jjg4fjg7zjgr/jgpLkv53mjIHjgafjgY3jgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAkdW5zZXQ6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7Pjgrnjga/lhoXpg6jjg4fjg7zjgr/jgpLkv53mjIHjgafjgY3jgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAkZXh0ZW5kOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+WGhemDqOODh+ODvOOCv+OCkuS/neaMgeOBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcblxyXG4gICAgICAgICRzYXZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K544Gv5YaF6YOo44OH44O844K/44KS5L+d5oyB44Gn44GN44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfSxcclxuXHJcbiAgICAgICAgJHJlc3RvcmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7Pjgrnjga/lhoXpg6jjg4fjg7zjgr/jgpLkv53mjIHjgafjgY3jgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICAkY2xlYXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7Pjgrnjga/lhoXpg6jjg4fjg7zjgr/jgpLkv53mjIHjgafjgY3jgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9LFxyXG5cclxuICAgICAgICBhZGRTdGF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+OCteODlueKtuaFi+OCkuaMgeOBpuOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgcmVtb3ZlU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7Pjgrnjga/jgrXjg5bnirbmhYvjgpLmjIHjgabjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIFxyXG4gICAgICAgIGFkZFRyYW5zaXRpb246IGZ1bmN0aW9uICh0cmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K544Gv6YG356e744KS5oyB44Gm44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICByZW1vdmVUcmFuc2l0aW9uOiBmdW5jdGlvbiAodHJhbnNpdGlvbikge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCueOBr+mBt+enu+OCkuaMgeOBpuOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgYXBwZW5kUmVnaW9uOiBmdW5jdGlvbiAocmVnaW9uKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K544Gv6aCY5Z+f44KS5oyB44Gm44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICByZW1vdmVSZWdpb246IGZ1bmN0aW9uIChyZWdpb24pIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7Pjgrnjga/poJjln5/jgpLmjIHjgabjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZGVzY3JpcHRvcjoge1xyXG4gICAgICAgICRwcm9wczoge1xyXG4gICAgICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxyXG4gICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdXBlclN0YXRlID0gdGhpcy5fZ2V0U3VwZXJTdGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfLmlzTnVsbChzdXBlclN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdXBlclN0YXRlLnByb3BzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXHJcbiAgICAgICAgJG1ldGhvZHM6IHtcclxuICAgICAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3VwZXJTdGF0ZSA9IHRoaXMuX2dldFN1cGVyU3RhdGUoKTtcclxuICAgICAgICAgICAgICAgIGlmICghXy5pc051bGwoc3VwZXJTdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3VwZXJTdGF0ZS5tZXRob2RzO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0sXHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBtYW5pcHVsYXRvcjoge1xyXG4gICAgICAgIHN0YXRlOiB7XHJcbiAgICAgICAgICAgIGFkZFN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5pc051bGwodGhpcy5yZWdpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5hcHBlbmRSZWdpb24oKTtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbyh0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBrlJlZ2lvbuOCpOODs+OCueOCv+ODs+OCueOBjOiHquWLleeUn+aIkOOBleOCjOOBvuOBl+OBn+OAgicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZ2lvbi5hZGRTdGF0ZS5hcHBseSh0aGlzLnJlZ2lvbiwgc3RhdGVzKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHJlbW92ZVN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoXy5pc051bGwodGhpcy5yZWdpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCfjgrPjg7Pjg4bjg4rjga5SZWdpb27jgqTjg7Pjgrnjgr/jg7PjgrnjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWdpb24ucmVtb3ZlU3RhdGUuYXBwbHkodGhpcy5yZWdpb24sIHN0YXRlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNpdHMgPSBfLnRvQXJyYXkoYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgIGlmIChfLmlzTnVsbCh0aGlzLnJlZ2lvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFwcGVuZFJlZ2lvbigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44GuUmVnaW9u44Kk44Oz44K544K/44Oz44K544GM6Ieq5YuV5L2c5oiQ44GV44KM44G+44GX44Gf44CCJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVnaW9uLmFkZFRyYW5zaXRpb24uYXBwbHkodGhpcy5yZWdpb24sIHRyYW5zaXRzKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2l0cyA9IF8udG9BcnJheShhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNOdWxsKHRoaXMucmVnaW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcign44Kz44Oz44OG44OK44GuUmVnaW9u44Kk44Oz44K544K/44Oz44K544GM5a2Y5Zyo44GX44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVnaW9uLnJlbW92ZVRyYW5zaXRpb24uYXBwbHkodGhpcy5yZWdpb24sIHRyYW5zaXRzKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIGFwcGVuZFJlZ2lvbjogZnVuY3Rpb24gKHJlZ2lvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNOdWxsKHRoaXMucmVnaW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHJlZ2lvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uID0gbmV3IFJlZ2lvbignZGVmYXVsdC1yZWdpb24tb2YtJyArIHRoaXMuX25hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEocmVnaW9uIGluc3RhbmNlb2YgUmVnaW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1JlZ2lvbuOCpOODs+OCueOCv+ODs+OCueOCkuaMh+WumuOBl+OBpuOBj+OBoOOBleOBhOOAgicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZWdpb24gPSByZWdpb247XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHJlZ2lvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVnaW9uID0gbmV3IFJlZ2lvbihmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIShyZWdpb24gaW5zdGFuY2VvZiBSZWdpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignUmVnaW9u44Kk44Oz44K544K/44Oz44K544KS5oyH5a6a44GX44Gm44GP44Gg44GV44GE44CCJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJlZ2lvbi5fcGFyZW50ID0gdGhpcztcclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lvbnMucHVzaChyZWdpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX2FkZE9ic2VydmVyKCdyZWdpb25zJywgcmVnaW9uKTtcclxuICAgICAgICAgICAgICAgIHJlZ2lvbi5fYWRkT2JzZXJ2ZXIoJ3BhcmVudCcsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJlZ2lvbi5fdXBkYXRlKCd1cGRhdGUtcmVsYXRpb24nKTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVnaW9uO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgcmVtb3ZlUmVnaW9uOiBmdW5jdGlvbiAocmVnaW9uKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXg7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCEocmVnaW9uIGluc3RhbmNlb2YgUmVnaW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignUmVnaW9u44Kk44Oz44K544K/44Oz44K544KS5oyH5a6a44GX44Gm44GP44Gg44GV44GE44CCJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVnaW9uLl9wYXJlbnQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGluZGV4ID0gXy5pbmRleE9mKHRoaXMuX3JlZ2lvbnMsIHJlZ2lvbik7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3JlZ2lvbnMuc3BsaWNlKGluZGV4LCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcign5YmK6Zmk5a++6LGh44GuUmVnaW9u44Kk44Oz44K544K/44Oz44K544GM6KaL44Gk44GL44KK44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMucmVnaW9uID09PSByZWdpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlZ2lvbiA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmVnaW9uLl91cGRhdGUoJ3VwZGF0ZS1yZWxhdGlvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIHRoaXMuX3JlbW92ZU9ic2VydmVyKCdyZWdpb25zJywgcmVnaW9uKTtcclxuICAgICAgICAgICAgICAgIHJlZ2lvbi5fcmVtb3ZlT2JzZXJ2ZXIoJ3BhcmVudCcsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiByZWdpb247XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcclxuICAgICAgICByZWdpb246IHtcclxuICAgICAgICAgICAgYWRkU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZXMsIGksIGwsIHN0YXRlLCBjdXJyZW50TGV2ZWwsIHJvb3Q7XHJcbiAgICAgICAgICAgICAgICBzdGF0ZXMgPSBfLnRvQXJyYXkoYXJndW1lbnRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gc3RhdGVzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gc3RhdGVzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIShzdGF0ZSBpbnN0YW5jZW9mIFByb3RvU3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrnjgpLmjIflrprjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdGF0ZSBpbnN0YW5jZW9mIEluaXRpYWxQc2V1ZG9TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsUHNldWRvID0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgaW5zdGFuY2VvZiBGaW5hbFN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2ZpbmFsID0gc3RhdGU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdGUgaW5zdGFuY2VvZiBIaXN0b3J5UHNldWRvU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5faGlzdG9yeVBzZXVkbyA9IHN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVzLnB1c2goc3RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N0YXRlc1tzdGF0ZS5faWRdID0gc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkT2JzZXJ2ZXIoJ3N0YXRlcycsIHN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2NvbnRhaW5lciA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuX2FkZE9ic2VydmVyKCdjb250YWluZXInLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudExldmVsID0gdGhpcy5fZ2V0UGFyZW50TGV2ZWwoKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgcm9vdCA9IHRoaXMuX2dldFJvb3QoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUuX3VwZGF0ZVJlbGF0aW9uKGN1cnJlbnRMZXZlbCwgcm9vdCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlcy5sZW5ndGggPiAxID8gc3RhdGVzIDogXy5maXJzdChzdGF0ZXMpO1xyXG4gICAgICAgICAgICB9LFxyXG5cclxuICAgICAgICAgICAgLyog5byV5pWw44GrU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrnjgpLopIfmlbDmjIflrprlj68gKi9cclxuICAgICAgICAgICAgcmVtb3ZlU3RhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGF0ZXMsIGksIHN0YXRlO1xyXG4gICAgICAgICAgICAgICAgc3RhdGVzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gdGhpcy5fc3RhdGVzLmxlbmd0aDsgaS0tOykge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpcy5fc3RhdGVzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmRleE9mKHN0YXRlcywgc3RhdGUpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXRlIGluc3RhbmNlb2YgSGlzdG9yeVBzZXVkb1N0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9oaXN0b3J5UHNldWRvID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3RhdGVzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3N0YXRlc1tzdGF0ZS5faWRdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlT2JzZXJ2ZXIoJ3N0YXRlcycsIHN0YXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlLl9jb250YWluZXIgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZS5fcmVtb3ZlT2JzZXJ2ZXIoJ2NvbnRhaW5lcicsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGUuX3VwZGF0ZVJlbGF0aW9uKDAsIG51bGwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGVzLmxlbmd0aCA+IDEgPyBzdGF0ZXMgOiBfLmZpcnN0KHN0YXRlcyk7XHJcbiAgICAgICAgICAgIH0sXHJcblxyXG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdHJhbnNpdHMsIGksIGwsIHRyYW5zaXQsIHJlc3VsdCwgY3VycmVudExldmVsLCByb290O1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdHMgPSBfLnRvQXJyYXkoYXJndW1lbnRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdHJhbnNpdHMubGVuZ3RoOyBpIDwgbDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdCA9IHRyYW5zaXRzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0cmFuc2l0IGluc3RhbmNlb2YgVHJhbnNpdGlvbikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdUcmFuc2l0aW9u44Kk44Oz44K544K/44Oz44K544KS5oyH5a6a44GX44Gm44GP44Gg44GV44GE44CCJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNpdC5fcmF3U291cmNlID09PSBJbml0aWFsUHNldWRvU3RhdGUgfHwgaXNGYWxzeSh0cmFuc2l0Ll9yYXdTb3VyY2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXQuX3NvdXJjZSA9IHRoaXMuX2luaXRpYWxQc2V1ZG87XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9maW5kU3RhdGUodGhpcywgdHJhbnNpdC5fcmF3U291cmNlLCAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfLmlzVW5kZWZpbmVkKHJlc3VsdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IF9maW5kU3RhdGUodGhpcywgdHJhbnNpdC5fcmF3U291cmNlLCAxKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXQuX2V4aXRWaWFFeGl0UG9pbnQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCfpgbfnp7vlhYPjga5TdGF0ZeOCpOODs+OCueOCv+ODs+OCueOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0Ll9zb3VyY2UgPSB0cmFuc2l0Ll9yYXdTb3VyY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHJhbnNpdC5fcmF3VGFyZ2V0ID09PSBGaW5hbFN0YXRlIHx8IGlzRmFsc3kodHJhbnNpdC5fcmF3VGFyZ2V0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0Ll90YXJnZXQgPSB0aGlzLl9maW5hbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2ZpbmRTdGF0ZSh0aGlzLCB0cmFuc2l0Ll9yYXdUYXJnZXQsIDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQocmVzdWx0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gX2ZpbmRTdGF0ZSh0aGlzLCB0cmFuc2l0Ll9yYXdUYXJnZXQsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdC5faXNFeHBsaWNpdEVudHJ5ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcign6YG356e75YWI44GuU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrnjgYzopovjgaTjgYvjgorjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdC5fdGFyZ2V0ID0gdHJhbnNpdC5fcmF3VGFyZ2V0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zaXQuX25hbWUgPT09IHRyYW5zaXQuX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyYW5zaXQuX25hbWUgPSAndHJhbnNpdC1mcm9tLScgKyB0cmFuc2l0Ll9zb3VyY2UuX25hbWUgKyAnLXRvLScgKyB0cmFuc2l0Ll90YXJnZXQuX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLl90cmFuc2l0cy5wdXNoKHRyYW5zaXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRzW3RyYW5zaXQuX2lkXSA9IHRyYW5zaXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fYWRkT2JzZXJ2ZXIoJ3RyYW5zaXRzJywgdHJhbnNpdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXQuX2NvbnRhaW5lciA9IHRoaXM7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdC5fYWRkT2JzZXJ2ZXIoJ2NvbnRhaW5lcicsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50TGV2ZWwgPSB0aGlzLl9nZXRQYXJlbnRMZXZlbCgpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICByb290ID0gdGhpcy5fZ2V0Um9vdCgpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0Ll91cGRhdGVSZWxhdGlvbihjdXJyZW50TGV2ZWwsIHJvb3QpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2l0cy5sZW5ndGggPiAxID8gdHJhbnNpdHMgOiBfLmZpcnN0KHRyYW5zaXRzKTtcclxuICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0cmFuc2l0cywgaSwgdHJhbnNpdDtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXRzID0gXy50b0FycmF5KGFyZ3VtZW50cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gdGhpcy5fdHJhbnNpdHMubGVuZ3RoOyBpLS07KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdCA9IHRoaXMuX3RyYW5zaXRzW2ldO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoXy5pbmRleE9mKHRyYW5zaXRzLCB0cmFuc2l0KSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3RyYW5zaXRzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHRoaXMuX3RyYW5zaXRzW3RyYW5zaXQuX2lkXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcmVtb3ZlT2JzZXJ2ZXIoJ3RyYW5zaXRzJywgdHJhbnNpdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0Ll9zb3VyY2UgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2l0Ll90YXJnZXQgPSBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdC5fY29udGFpbmVyID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdC5fcmVtb3ZlT2JzZXJ2ZXIoJ2NvbnRhaW5lcicsIHRoaXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdC5fdXBkYXRlUmVsYXRpb24oMCwgbnVsbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2l0cy5sZW5ndGggPiAxID8gdHJhbnNpdHMgOiBfLmZpcnN0KHRyYW5zaXRzKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgfSxcclxufTtcclxuXHJcbmZ1bmN0aW9uIE1vZGVsKGRhdGEpIHtcclxuICAgIHRoaXMuX2RhdGEgPSB7fTtcclxuICAgIHRoaXMuX2NhY2hlID0gbnVsbDtcclxuICAgIFxyXG4gICAgaWYgKF8uaXNPYmplY3QoZGF0YSkpIHtcclxuICAgICAgICB0aGlzLl9kYXRhID0gdGhpcy5fZXh0ZW5kRGVlcCh0aGlzLl9kYXRhLCBkYXRhKTtcclxuICAgIH1cclxufVxyXG5cclxuTW9kZWwucHJvdG90eXBlID0gXy5jcmVhdGUoT2JqZWN0LnByb3RvdHlwZSwge1xyXG4gICAgY29uc3RydWN0b3I6IE1vZGVsLFxyXG4gICAgXHJcbiAgICBnZXQ6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YVtrZXldO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2V0OiBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuX2RhdGFba2V5XSA9IHZhbHVlO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHVuc2V0OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZGF0YVtrZXldO1xyXG4gICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHtcclxuICAgICAgICAgICAgZGVsZXRlIHRoaXMuX2RhdGFba2V5XTtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIGV4dGVuZDogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZXh0ZW5kRGVlcCh0aGlzLl9kYXRhLCBkYXRhKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHNhdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9jYWNoZSA9IHRoaXMuX2V4dGVuZERlZXAodGhpcy5fY2FjaGUsIHRoaXMuX2RhdGEpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgcmVzdG9yZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICghXy5pc051bGwodGhpcy5fY2FjaGUpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSB7fTtcclxuICAgICAgICAgICAgdGhpcy5fZGF0YSA9IHRoaXMuX2V4dGVuZERlZXAodGhpcy5fZGF0YSwgdGhpcy5fY2FjaGUpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIGNsZWFyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xyXG4gICAgICAgIHRoaXMuX2NhY2hlID0gbnVsbDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9leHRlbmREZWVwOiBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xyXG4gICAgICAgIGRlc3RpbmF0aW9uID0gZGVzdGluYXRpb24gfHwge307XHJcbiAgICAgICAgXHJcbiAgICAgICAgXy5lYWNoKHNvdXJjZSwgXy5iaW5kKGZ1bmN0aW9uICh2YWx1ZSwga2V5KSB7XHJcbiAgICAgICAgICAgIGlmIChfLmlzT2JqZWN0KHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbih2YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ0Z1bmN0aW9u44GvZGF0YeODl+ODreODkeODhuOCo+OBq+eZu+mMsuOBp+OBjeOBvuOBm+OCk+OAgm1ldGhvZHPjg5fjg63jg5Hjg4bjgqPjgavnmbvpjLLjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZGVzdGluYXRpb25ba2V5XSA9IF8uaXNBcnJheSh2YWx1ZSkgPyBbXSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZXh0ZW5kRGVlcChkZXN0aW5hdGlvbltrZXldLCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbltrZXldID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIGRlc3RpbmF0aW9uO1xyXG4gICAgfSxcclxufSk7XHJcblxyXG5mdW5jdGlvbiBTdWJqZWN0KCkge1xyXG4gICAgdGhpcy5fb2JzZXJ2ZXJzID0ge307XHJcbn1cclxuXHJcblN1YmplY3QucHJvdG90eXBlID0gXy5jcmVhdGUoT2JqZWN0LnByb3RvdHlwZSwge1xyXG4gICAgY29uc3RydWN0b3I6IFN1YmplY3QsXHJcbiAgICBcclxuICAgIF9jb3VudE9ic2VydmVyczogZnVuY3Rpb24gKHR5cGUpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gMDtcclxuICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQodGhpcy5fb2JzZXJ2ZXJzW3R5cGVdKSkge1xyXG4gICAgICAgICAgICByZXN1bHQgPSB0aGlzLl9vYnNlcnZlcnNbdHlwZV0ubGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX3NldE9ic2VydmVyVHlwZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB0eXBlcywgdHlwZSwgaSwgbDtcclxuICAgICAgICB0eXBlcyA9IF8udG9BcnJheShhcmd1bWVudHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSB0eXBlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgdHlwZSA9IHR5cGVzW2ldO1xyXG4gICAgICAgICAgICBpZiAoXy5pc1VuZGVmaW5lZCh0aGlzLl9vYnNlcnZlcnNbdHlwZV0pKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vYnNlcnZlcnNbdHlwZV0gPSBbXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9hZGRPYnNlcnZlcjogZnVuY3Rpb24gKHR5cGUsIG9ic2VydmVyKSB7XHJcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQodGhpcy5fb2JzZXJ2ZXJzW3R5cGVdKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9vYnNlcnZlcnNbdHlwZV0gPSBbXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fb2JzZXJ2ZXJzW3R5cGVdLnB1c2gob2JzZXJ2ZXIpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX3JlbW92ZU9ic2VydmVyOiBmdW5jdGlvbiAodHlwZSwgb2JzZXJ2ZXIpIHtcclxuICAgICAgICB2YXIgb2JzZXJ2ZXJzLCBpbmRleDtcclxuICAgICAgICBvYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnNbdHlwZV07XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQob2JzZXJ2ZXJzKSkge1xyXG4gICAgICAgICAgICBsb2dnZXIud2Fybign44Kq44OW44K244O844OQ44O844GM55m76Yyy44GV44KM44Gm44GE44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuXHRcdH1cclxuICAgICAgICBcclxuICAgICAgICBpbmRleCA9IF8uaW5kZXhPZihvYnNlcnZlcnMsIG9ic2VydmVyKTtcclxuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xyXG4gICAgICAgICAgICBvYnNlcnZlcnMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfbm90aWZ5OiBmdW5jdGlvbiAodHlwZSkge1xyXG5cdFx0dmFyIG9ic2VydmVycywgaSwgbCwgb2JzZXJ2ZXIsIGFyZ3M7XHJcblx0XHRvYnNlcnZlcnMgPSB0aGlzLl9vYnNlcnZlcnNbdHlwZV07XHJcbiAgICAgICAgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpLnNsaWNlKDEpO1xyXG5cdFx0XHJcblx0XHRpZiAoXy5pc1VuZGVmaW5lZChvYnNlcnZlcnMpKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCfjgqrjg5bjgrbjg7zjg5Djg7zjgYznmbvpjLLjgZXjgozjgabjgYTjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRmb3IgKGkgPSAwLCBsID0gb2JzZXJ2ZXJzLmxlbmd0aDsgaSA8IGw7IGkgKz0gMSkge1xyXG4gICAgICAgICAgICBvYnNlcnZlciA9IG9ic2VydmVyc1tpXTtcclxuICAgICAgICAgICAgaWYgKF8uaXNGdW5jdGlvbihvYnNlcnZlci5fdXBkYXRlKSkge1xyXG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuX3VwZGF0ZS5hcHBseShvYnNlcnZlciwgYXJncyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIEVudGl0eShuYW1lKSB7XHJcbiAgICBTdWJqZWN0LmNhbGwodGhpcyk7XHJcbiAgICBcclxuICAgIHRoaXMuX2lkID0gdXVpZCgpO1xyXG4gICAgdGhpcy5fbmFtZSA9ICFpc0ZhbHN5KG5hbWUpID8gbmFtZSA6IHRoaXMuX2lkO1xyXG4gICAgdGhpcy5fdHlwZSA9ICdlbnRpdHknO1xyXG4gICAgdGhpcy5fc3RhdHVzID0gJ2luYWN0aXZlJztcclxuICAgIFxyXG4gICAgdGhpcy5tb2RlbCA9IG5ldyBNb2RlbCgpO1xyXG4gICAgdGhpcy5wcm9wcyA9IHt9O1xyXG4gICAgdGhpcy5tZXRob2RzID0ge307XHJcbiAgICBcclxuICAgIHRoaXMuX3NldE9ic2VydmVyVHlwZSgncm9vdCcpO1xyXG59XHJcblxyXG5FbnRpdHkucHJvdG90eXBlID0gXy5jcmVhdGUoU3ViamVjdC5wcm90b3R5cGUsIF8uZXh0ZW5kKHtcclxuICAgIGNvbnN0cnVjdG9yOiBFbnRpdHksXHJcbiAgICBcclxuICAgIGdldElkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lkO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZ2V0TmFtZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9uYW1lO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc2V0TmFtZTogZnVuY3Rpb24gKG5hbWUpIHtcclxuXHRcdHRoaXMuX25hbWUgPSBuYW1lO1xyXG5cdFx0cmV0dXJuIG5hbWU7XHJcblx0fSxcclxuICAgIFxyXG4gICAgaXNBY3RpdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fc3RhdHVzID09PSAnYWN0aXZlJztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGFkZE1ldGhvZDogZnVuY3Rpb24gKG1ldGhvZHMpIHtcclxuICAgICAgICByZXR1cm4gXy5tYXBPYmplY3QobWV0aG9kcywgXy5iaW5kKGZ1bmN0aW9uIChtZXRob2QpIHtcclxuICAgICAgICAgICAgcmV0dXJuIF8uYmluZChtZXRob2QsIHRoaXMpO1xyXG4gICAgICAgIH0sIHRoaXMpKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9hY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9ICdhY3RpdmUnO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44GM44Ki44Kv44OG44Kj44OW5YyW44GV44KM44G+44GX44Gf44CCJyk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfaW5hY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9ICdpbmFjdGl2ZSc7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8odGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzpnZ7jgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgb7jgZfjgZ/jgIInKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIF91cGRhdGU6IF8ubm9vcCxcclxuICAgIFxyXG59LCBtaXhpbi5hY2Nlc3NvcikpO1xyXG5cclxuZnVuY3Rpb24gRWxlbShuYW1lKSB7XHJcbiAgICBFbnRpdHkuY2FsbCh0aGlzLCBuYW1lKTtcclxuICAgIFxyXG4gICAgdGhpcy5fdHlwZSA9ICdlbGVtZW50JztcclxuICAgIFxyXG4gICAgdGhpcy5fY29udGFpbmVyID0gbnVsbDtcclxuICAgIHRoaXMuX3Jvb3QgPSBudWxsO1xyXG4gICAgdGhpcy5fbGV2ZWwgPSAwO1xyXG4gICAgXHJcbiAgICB0aGlzLl9zZXRPYnNlcnZlclR5cGUoJ2NvbnRhaW5lcicpO1xyXG4gICAgXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCBtaXhpbi5kZXNjcmlwdG9yKTtcclxufVxyXG5cclxuRWxlbS5wcm90b3R5cGUgPSBfLmNyZWF0ZShFbnRpdHkucHJvdG90eXBlLCBfLmV4dGVuZCh7XHJcbiAgICBjb25zdHJ1Y3RvcjogRWxlbSxcclxuICAgIFxyXG4gICAgZ2V0Q29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2NvbnRhaW5lcjtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldEN1cnJlbnRMZXZlbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9sZXZlbDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9hc3luYzogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fbm90aWZ5KCdyb290JywgJ2FzeW5jJywgXy5iaW5kKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgXy5iaW5kKGNhbGxiYWNrLCB0aGlzKSgpO1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfSwgdGhpcykpO1xyXG4gICAgfSxcclxufSwgbWl4aW4uaGVscGVyKSk7XHJcblxyXG5mdW5jdGlvbiBQcm90b1N0YXRlKG5hbWUpIHtcclxuICAgIEVsZW0uY2FsbCh0aGlzLCBuYW1lKTtcclxuXHRcclxuICAgIHRoaXMuX3R5cGUgPSAnc3RhdGUnO1xyXG4gICAgdGhpcy5yZWdpb24gPSBudWxsO1xyXG4gICAgdGhpcy5fcmVnaW9ucyA9IFtdO1xyXG4gICAgXHJcbiAgICB0aGlzLl9zZXRPYnNlcnZlclR5cGUoJ3JlZ2lvbnMnKTtcclxufVxyXG5cclxuUHJvdG9TdGF0ZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShFbGVtLnByb3RvdHlwZSwgXy5leHRlbmQoe1xyXG4gICAgY29uc3RydWN0b3I6IFByb3RvU3RhdGUsXHJcbiAgICBcclxuICAgIGdldFJlZ2lvbjogZnVuY3Rpb24gKGluZGV4KSB7XHJcbiAgICAgICAgaWYgKF8uaXNOdW1iZXIoaW5kZXgpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWdpb25zW2luZGV4XTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVnaW9uO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9nZXRTdXBlclN0YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9jb250YWluZXIpICYmICFfLmlzTnVsbCh0aGlzLl9jb250YWluZXIuX3BhcmVudCkpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fY29udGFpbmVyLl9wYXJlbnQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBjb21wbGV0aW9uOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fYXN5bmMoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leGl0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9jb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KCdjb250YWluZXInLCAnY29tcGxldGlvbicpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKHRoaXMuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44Gu44Kz44Oz44OG44OK44GM5a2Y5Zyo44GX44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjga/jgZnjgafjgavpnZ7jgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgabjgYTjgb7jgZnjgIInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX3VwZGF0ZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBfLnRvQXJyYXkoYXJndW1lbnRzKS5zbGljZSgxKTtcclxuICAgICAgICBcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2VudHJ5JzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VudHJ5LmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAnZXhpdCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leGl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAndXBkYXRlLXJlbGF0aW9uJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVJlbGF0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAnY29tcGxldGlvbic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRpb24uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfdXBkYXRlUmVsYXRpb246IGZ1bmN0aW9uIChjdXJyZW50TGV2ZWwsIHJvb3QpIHtcclxuICAgICAgICB0aGlzLl9sZXZlbCA9IGN1cnJlbnRMZXZlbDtcclxuICAgICAgICB0aGlzLl9yb290ID0gcm9vdDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9ub3RpZnkoJ3JlZ2lvbnMnLCAndXBkYXRlLXJlbGF0aW9uJyk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfZW50cnk6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoJ3JlZ2lvbnMnLCAnZW50cnknKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfZXhpdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmICh0aGlzLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KCdyZWdpb25zJywgJ2V4aXQnKTtcclxuICAgICAgICAgICAgdGhpcy5faW5hY3RpdmF0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0sIG1peGluLm1hbmlwdWxhdG9yLnN0YXRlKSk7XHJcblxyXG5mdW5jdGlvbiBTdGF0ZShuYW1lLCBvcHRpb25zKSB7XHJcbiAgICBQcm90b1N0YXRlLmNhbGwodGhpcywgbmFtZSk7XHJcbiAgICBcclxuICAgIG9wdGlvbnMgPSBfLmRlZmF1bHRzKG9wdGlvbnMgfHwge30sIF8uY2xvbmUoU3RhdGUub3B0aW9ucykpO1xyXG4gICAgXHJcbiAgICBpZiAoXy5pc09iamVjdChvcHRpb25zLmRhdGEpKSB7XHJcbiAgICAgICAgdGhpcy5leHRlbmQob3B0aW9ucy5kYXRhKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdGhpcy5zYXZlKCk7XHJcbiAgICBcclxuICAgIGlmIChfLmlzT2JqZWN0KG9wdGlvbnMucHJvcHMpKSB7XHJcbiAgICAgICAgXy5leHRlbmQodGhpcy5wcm9wcywgb3B0aW9ucy5wcm9wcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChfLmlzT2JqZWN0KG9wdGlvbnMubWV0aG9kcykpIHtcclxuICAgICAgICB0aGlzLm1ldGhvZHMgPSB0aGlzLmFkZE1ldGhvZChvcHRpb25zLm1ldGhvZHMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLl9lbnRyeUFjdGlvbiA9IG9wdGlvbnMuZW50cnlBY3Rpb247XHJcbiAgICB0aGlzLl9leGl0QWN0aW9uID0gb3B0aW9ucy5leGl0QWN0aW9uO1xyXG4gICAgdGhpcy5fZG9BY3Rpdml0eSA9IG9wdGlvbnMuZG9BY3Rpdml0eTtcclxuICAgIFxyXG4gICAgdGhpcy5fYXV0b1RyYW5zaXRpb24gPSBvcHRpb25zLmF1dG9UcmFuc2l0aW9uO1xyXG4gICAgXHJcbiAgICB0aGlzLl9sb29wID0gb3B0aW9ucy5sb29wO1xyXG4gICAgdGhpcy5fZnBzID0gb3B0aW9ucy5mcHM7XHJcbiAgICB0aGlzLl9pbnRlcnZhbCA9IDEwMDAgLyB0aGlzLl9mcHM7XHJcbiAgICBcclxuICAgIHRoaXMuX3RpbWVySWQgPSAwO1xyXG4gICAgdGhpcy5fbGFzdENhbGxUaW1lID0gMDtcclxufVxyXG5cclxuU3RhdGUub3B0aW9ucyA9IHtcclxuICAgIGVudHJ5QWN0aW9uOiBfLm5vb3AsXHJcbiAgICBleGl0QWN0aW9uOiBfLm5vb3AsXHJcbiAgICBkb0FjdGl2aXR5OiBfLm5vb3AsXHJcbiAgICBcclxuICAgIGF1dG9UcmFuc2l0aW9uOiBmYWxzZSxcclxuICAgIGxvb3A6IGZhbHNlLFxyXG4gICAgZnBzOiA2MCxcclxufTtcclxuXHJcblN0YXRlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFByb3RvU3RhdGUucHJvdG90eXBlLCB7XHJcbiAgICBjb25zdHJ1Y3RvcjogU3RhdGUsXHJcbiAgICBcclxuICAgIGNvbXBsZXRpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9hc3luYyhmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciB0cmFuc2l0O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9jb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHJhbnNpdCA9IF9maW5kTmV4dFRyYW5zaXRpb24odGhpcy5fY29udGFpbmVyLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQodHJhbnNpdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhbnNpdC50cmlnZ2VyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZXhpdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLl9ub3RpZnkoJ2NvbnRhaW5lcicsICdjb21wbGV0aW9uJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IodGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjga7jgrPjg7Pjg4bjg4rjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBr+OBmeOBp+OBq+mdnuOCouOCr+ODhuOCo+ODluWMluOBleOCjOOBpuOBhOOBvuOBmeOAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfdXBkYXRlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpLnNsaWNlKDEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcclxuICAgICAgICAgICAgY2FzZSAnZW50cnknOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50cnkuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYXNlICdleGl0JzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V4aXQuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYXNlICd1cGRhdGUtcmVsYXRpb24nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fdXBkYXRlUmVsYXRpb24uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYXNlICdjb21wbGV0aW9uJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9zZXRUaW1lcjogZnVuY3Rpb24gKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fdGltZXJJZCA9IDA7XHJcbiAgICAgICAgdGhpcy5fbGFzdENhbGxUaW1lID0gMDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9yZXBlYXQoY2FsbGJhY2spO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX2NsZWFyVGltZXI6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5fdGltZXJJZCk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfcmVwZWF0OiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB2YXIgY3VycmVudFRpbWUsIHByb2Nlc3NpbmdUaW1lLCB0aW1lVG9DYWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGN1cnJlbnRUaW1lID0gXy5ub3coKTtcclxuICAgICAgICBwcm9jZXNzaW5nVGltZSA9IHRoaXMuX2xhc3RDYWxsVGltZSAhPT0gMCA/IGN1cnJlbnRUaW1lIC0gdGhpcy5fbGFzdENhbGxUaW1lIDogMDtcclxuICAgICAgICB0aW1lVG9DYWxsID0gTWF0aC5tYXgodGhpcy5faW50ZXJ2YWwgLSBwcm9jZXNzaW5nVGltZSwgMCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fbGFzdENhbGxUaW1lID0gY3VycmVudFRpbWUgKyB0aW1lVG9DYWxsO1xyXG4gICAgICAgIHRoaXMuX3RpbWVySWQgPSBzZXRUaW1lb3V0KF8uYmluZCh0aGlzLl90aW1lb3V0LCB0aGlzLCBjYWxsYmFjaywgY3VycmVudFRpbWUsIHByb2Nlc3NpbmdUaW1lKSwgdGltZVRvQ2FsbCk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX3RpbWVySWQ7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfdGltZW91dDogZnVuY3Rpb24gKGNhbGxiYWNrLCBwcmV2aW91c1RpbWUsIHByb2Nlc3NpbmdUaW1lKSB7XHJcbiAgICAgICAgdmFyIGRlbHRhVGltZTtcclxuICAgICAgICBkZWx0YVRpbWUgPSBfLm5vdygpIC0gcHJldmlvdXNUaW1lICsgcHJvY2Vzc2luZ1RpbWU7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY2FsbGJhY2soZGVsdGFUaW1lKTtcclxuICAgICAgICB0aGlzLl9yZXBlYXQoY2FsbGJhY2spO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX2FjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJvb3QsIG1vZGVsLCBwcm9wcywgbWV0aG9kcztcclxuICAgICAgICBcclxuICAgICAgICByb290ID0gdGhpcy5fcm9vdDtcclxuICAgICAgICBpZiAoIV8uaXNOdWxsKHJvb3QpKSB7XHJcbiAgICAgICAgICAgIG1vZGVsID0gcm9vdC5tb2RlbDtcclxuICAgICAgICAgICAgcHJvcHMgPSByb290LnByb3BzO1xyXG4gICAgICAgICAgICBtZXRob2RzID0gcm9vdC5tZXRob2RzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ01hY2hpbmXjgqTjg7Pjgrnjgr/jg7Pjgrnjga7lj4LnhafjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gJ2FjdGl2ZSc7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8odGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzjgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgb7jgZfjgZ/jgIInKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9lbnRyeUFjdGlvbihtb2RlbCwgcHJvcHMsIG1ldGhvZHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLl9sb29wKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX3NldFRpbWVyKF8uYmluZChmdW5jdGlvbiAoZGVsdGFUaW1lKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9kb0FjdGl2aXR5KGRlbHRhVGltZSwgbW9kZWwsIHByb3BzLCBtZXRob2RzKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2F1dG9UcmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5fZG9BY3Rpdml0eShtb2RlbCwgcHJvcHMsIG1ldGhvZHMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXMuX2F1dG9UcmFuc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9pbmFjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJvb3QsIG1vZGVsLCBwcm9wcywgbWV0aG9kcztcclxuICAgICAgICBcclxuICAgICAgICByb290ID0gdGhpcy5fcm9vdDtcclxuICAgICAgICBpZiAoIV8uaXNOdWxsKHJvb3QpKSB7XHJcbiAgICAgICAgICAgIG1vZGVsID0gcm9vdC5tb2RlbDtcclxuICAgICAgICAgICAgcHJvcHMgPSByb290LnByb3BzO1xyXG4gICAgICAgICAgICBtZXRob2RzID0gcm9vdC5tZXRob2RzO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ01hY2hpbmXjgqTjg7Pjgrnjgr/jg7Pjgrnjga7lj4LnhafjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fY2xlYXJUaW1lcigpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghXy5pc051bGwodGhpcy5fY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoJ2NvbnRhaW5lcicsICdzZXQtcHJldmlvdXMtc3RhdGUnLCB0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fZXhpdEFjdGlvbihtb2RlbCwgcHJvcHMsIG1ldGhvZHMpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9ICdpbmFjdGl2ZSc7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8odGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzpnZ7jgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgb7jgZfjgZ/jgIInKTtcclxuICAgICAgICBcclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9lbnRyeTogZnVuY3Rpb24gKGhpc3RvcnksIHByaW9yaXR5KSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KCdyZWdpb25zJywgJ2VudHJ5JywgaGlzdG9yeSwgcHJpb3JpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxufSk7XHJcblxyXG5mdW5jdGlvbiBNYWNoaW5lKG5hbWUsIG9wdGlvbnMpIHtcclxuICAgIFByb3RvU3RhdGUuY2FsbCh0aGlzLCBuYW1lLCBvcHRpb25zKTtcclxuICAgIFxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBcclxuICAgIGlmIChfLmlzT2JqZWN0KG9wdGlvbnMuZGF0YSkpIHtcclxuICAgICAgICB0aGlzLmV4dGVuZChvcHRpb25zLmRhdGEpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLnNhdmUoKTtcclxuICAgIFxyXG4gICAgaWYgKF8uaXNPYmplY3Qob3B0aW9ucy5wcm9wcykpIHtcclxuICAgICAgICBfLmV4dGVuZCh0aGlzLnByb3BzLCBvcHRpb25zLnByb3BzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKF8uaXNPYmplY3Qob3B0aW9ucy5tZXRob2RzKSkge1xyXG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHRoaXMuYWRkTWV0aG9kKG9wdGlvbnMubWV0aG9kcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRoaXMuX2RlcGxveWVkID0gZmFsc2U7XHJcbiAgICB0aGlzLl9wcm9taXNlID0gbnVsbDtcclxuICAgIFxyXG4gICAgdGhpcy5fbGlua3MgPSBbXTtcclxuICAgIFxyXG4gICAgdGhpcy5hcHBlbmRSZWdpb24oKTtcclxuICAgIHRoaXMuX3NldE9ic2VydmVyVHlwZSgnaW5ib3VuZCcpO1xyXG59XHJcblxyXG5NYWNoaW5lLnByb3RvdHlwZSA9IF8uY3JlYXRlKFByb3RvU3RhdGUucHJvdG90eXBlLCB7XHJcbiAgICBjb25zdHJ1Y3RvcjogTWFjaGluZSxcclxuICAgIFxyXG4gICAgZGVwbG95OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZGVwbG95ZWQgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB0aGlzLl91cGRhdGVSZWxhdGlvbih0aGlzLl9sZXZlbCwgdGhpcyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgX2VhY2hFbnRpdHkodGhpcywgXy5iaW5kKGZ1bmN0aW9uIChlbnRpdHkpIHtcclxuICAgICAgICAgICAgaWYgKCEoZW50aXR5IGluc3RhbmNlb2YgTWFjaGluZSkpIHtcclxuICAgICAgICAgICAgICAgIGVudGl0eS5fYWRkT2JzZXJ2ZXIoJ3Jvb3QnLCB0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKGVudGl0eSBpbnN0YW5jZW9mIENvbm5lY3Rpb25Qb2ludFBzZXVkb1N0YXRlICYmIGVudGl0eS5fZ2V0U3VwZXJTdGF0ZSgpID09PSB0aGlzKSB7XHJcbiAgICAgICAgICAgICAgICBlbnRpdHkuX2lzRW5kcG9pbnQgPSB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcykpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgdW5kZXBsb3k6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9kZXBsb3llZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuX3Byb21pc2UgPSBudWxsO1xyXG4gICAgICAgIFxyXG4gICAgICAgIF9lYWNoRW50aXR5KHRoaXMsIF8uYmluZChmdW5jdGlvbiAoZW50aXR5KSB7XHJcbiAgICAgICAgICAgIGlmICghKGVudGl0eSBpbnN0YW5jZW9mIE1hY2hpbmUpKSB7XHJcbiAgICAgICAgICAgICAgICBlbnRpdHkuX3JlbW92ZU9ic2VydmVyKCdyb290JywgdGhpcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChlbnRpdHkgaW5zdGFuY2VvZiBDb25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgZW50aXR5Ll9pc0VuZHBvaW50ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fdXBkYXRlUmVsYXRpb24odGhpcy5fbGV2ZWwsIG51bGwpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgc3RhcnQ6IGZ1bmN0aW9uIChwcmlvcml0eSkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZGVwbG95ZWQpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdzdGFydCgp44Gu5YmN44GrZGVwbG95KCnjg6Hjgr3jg4Pjg4njgpLlrp/ooYzjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ01hY2hpbmXjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44GM5YuV5L2c44KS6ZaL5aeL44GX44G+44GX44Gf44CCJyk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB0aGlzLl9zdGFja1Byb21pc2UoXy5iaW5kKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VudHJ5KHVuZGVmaW5lZCwgcHJpb3JpdHkpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgICAgIH0sIHRoaXMpKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9nZ2VyLndhcm4oJ01hY2hpbmXjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44Gv44GZ44Gn44Gr6LW35YuV44GX44Gm44GE44G+44GZ44CCJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZmluaXNoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9kZXBsb3llZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ3N0YXJ0KCnjga7liY3jgatkZXBsb3koKeODoeOCveODg+ODieOCkuWun+ihjOOBl+OBpuOBj+OBoOOBleOBhOOAgicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGlvbigpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci53YXJuKCdNYWNoaW5l44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBr+OBmeOBp+OBq+WLleS9nOOCkue1guS6huOBl+OBpuOBhOOBvuOBmeOAgicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGNvbXBsZXRpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9zdGFja1Byb21pc2UoXy5iaW5kKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fZXhpdCgpO1xyXG4gICAgICAgICAgICBsb2dnZXIuaW5mbygnTWFjaGluZeOCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzli5XkvZzjgpLntYLkuobjgZfjgb7jgZfjgZ/jgIInKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcclxuICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfc3RhY2tQcm9taXNlOiBmdW5jdGlvbiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9wcm9taXNlID0gdGhpcy5fcHJvbWlzZS50aGVuKGNhbGxiYWNrLCB0aGlzLl9vblJlamVjdGVkKS5jYXRjaCh0aGlzLl9vbkVycm9yKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9hYm9ydGVkOiBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICBsb2dnZXIuZXJyb3IoJ01hY2hpbmXjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44Gv5Yem55CG44KS5YGc5q2i44GX44G+44GX44Gf44CCJyk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfb3V0ZXJFeGVjdXRpb246IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICB2YXIgaSwgbCwgcmVnaW9uLCBzdGF0ZTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoa2V5KSkge1xyXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gdGhpcy5fcmVnaW9ucy5sZW5ndGg7IGkgPCBsOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgICAgIHJlZ2lvbiA9IHRoaXMuX3JlZ2lvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBzdGF0ZSA9IHJlZ2lvbi5fc3RhdGVzW2tleV07XHJcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoc3RhdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGFydChzdGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ+OCqOODs+ODieODneOCpOODs+ODiOOBrkVudHJ5UG9pbnRQc2V1ZG9TdGF0ZeOCpOODs+OCueOCv+ODs+OCueOBjOaMh+WumuOBleOCjOOBpuOBhOOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX2xpbmtCYWNrOiBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICB0aGlzLmNvbXBsZXRpb24oKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9zdGFja1Byb21pc2UoXy5iaW5kKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KCdpbmJvdW5kJywgJ2xpbmstYmFjaycsIHN0YXRlLl9pZCk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XHJcbiAgICAgICAgfSwgdGhpcykpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX3VwZGF0ZTogZnVuY3Rpb24gKGV2ZW50LCBjYWxsYmFjaykge1xyXG4gICAgICAgIHZhciBhcmdzID0gXy50b0FycmF5KGFyZ3VtZW50cykuc2xpY2UoMSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgc3dpdGNoIChldmVudCkge1xyXG4gICAgICAgICAgICBjYXNlICdhc3luYyc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9zdGFja1Byb21pc2UoY2FsbGJhY2spO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAnZW50cnknOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW50cnkuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYXNlICdleGl0JzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2V4aXQuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYXNlICdjb21wbGV0aW9uJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuY29tcGxldGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAndGVybWluYXRpb24nOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWJvcnRlZC5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNhc2UgJ2xpbmstZm9yd2FyZCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9vdXRlckV4ZWN1dGlvbi5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGNhc2UgJ2V4aXQtcG9pbnQnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlua0JhY2suYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfb25SZWplY3RlZDogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfb25FcnJvcjogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICBsb2dnZXIuaW5mbyhlKTtcclxuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfZW50cnk6IGZ1bmN0aW9uIChoaXN0b3J5LCBwcmlvcml0eSkge1xyXG4gICAgICAgIGlmICghdGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2FjdGl2YXRlKCk7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSgncmVnaW9ucycsICdlbnRyeScsIGhpc3RvcnksIHByaW9yaXR5KTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIEZpbmFsU3RhdGUobmFtZSkge1xyXG4gICAgUHJvdG9TdGF0ZS5jYWxsKHRoaXMsIG5hbWUpO1xyXG59XHJcblxyXG5GaW5hbFN0YXRlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFByb3RvU3RhdGUucHJvdG90eXBlLCBfLmV4dGVuZCh7XHJcbiAgICBjb25zdHJ1Y3RvcjogRmluYWxTdGF0ZSxcclxuICAgIFxyXG4gICAgX2FjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fc3RhdHVzID0gJ2FjdGl2ZSc7XHJcbiAgICAgICAgbG9nZ2VyLmluZm8oJ0ZpbmFsU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44GM44Ki44Kv44OG44Kj44OW5YyW44GV44KM44G+44GX44Gf44CCJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5jb21wbGV0aW9uKCk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfaW5hY3RpdmF0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9ICdpbmFjdGl2ZSc7XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9jb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSgnY29udGFpbmVyJywgJ3NldC1wcmV2aW91cy1zdGF0ZScsIG51bGwpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBsb2dnZXIuaW5mbygnRmluYWxTdGF0ZeOCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzpnZ7jgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgb7jgZfjgZ/jgIInKTtcclxuICAgIH0sXHJcbn0sIG1peGluLmRpc2FibGUpKTtcclxuXHJcbmZ1bmN0aW9uIFN1Yk1hY2hpbmUobmFtZSkge1xyXG4gICAgUHJvdG9TdGF0ZS5jYWxsKHRoaXMsIG5hbWUpO1xyXG4gICAgXHJcbiAgICB0aGlzLl9saW5rID0gbnVsbDtcclxuICAgIHRoaXMuX2RlcGxveWVkID0gZmFsc2U7XHJcbiAgICBcclxuICAgIHRoaXMuYXBwZW5kUmVnaW9uKCk7XHJcbiAgICB0aGlzLl9zZXRPYnNlcnZlclR5cGUoJ291dGJvdW5kJyk7XHJcbn1cclxuXHJcblN1Yk1hY2hpbmUucHJvdG90eXBlID0gXy5jcmVhdGUoUHJvdG9TdGF0ZS5wcm90b3R5cGUsIHtcclxuICAgIGNvbnN0cnVjdG9yOiBTdWJNYWNoaW5lLFxyXG4gICAgXHJcbiAgICBhZGRMaW5rOiBmdW5jdGlvbiAobWFjaGluZSkge1xyXG4gICAgICAgIGlmICghKG1hY2hpbmUgaW5zdGFuY2VvZiBNYWNoaW5lKSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ01hY2hpbmXjgqTjg7Pjgrnjgr/jg7PjgrnjgpLmjIflrprjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fbGluayA9IG1hY2hpbmU7XHJcbiAgICAgICAgdGhpcy5fYWRkT2JzZXJ2ZXIoJ291dGJvdW5kJywgbWFjaGluZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgbWFjaGluZS5fYWRkT2JzZXJ2ZXIoJ2luYm91bmQnLCB0aGlzKTtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIHJlbW92ZUxpbms6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9yZW1vdmVPYnNlcnZlcignb3V0Ym91bmQnLCB0aGlzLl9saW5rKTtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9saW5rLl9hZGRPYnNlcnZlcignaW5ib3VuZCcsIHRoaXMpO1xyXG4gICAgICAgIHRoaXMuX2xpbmsgPSBudWxsO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgZGVwbG95OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5fZGVwbG95ZWQgPSB0cnVlO1xyXG4gICAgICAgIFxyXG4gICAgICAgIF9lYWNoRW50aXR5KHRoaXMsIF8uYmluZChmdW5jdGlvbiAoZW50aXR5KSB7XHJcbiAgICAgICAgICAgIGlmIChlbnRpdHkgaW5zdGFuY2VvZiBQcm90b1N0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZW50aXR5IGluc3RhbmNlb2YgUHNldWRvU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZW50aXR5IGluc3RhbmNlb2YgQ29ubmVjdGlvblBvaW50UHNldWRvU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5Ll9hZGRPYnNlcnZlcignc3ViLXJvb3QnLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkuX2dldFN1cGVyU3RhdGUoKSA9PT0gdGhpcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZW50aXR5Ll9oYXNTdWJSb290ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdDb25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZeOCpOODs+OCueOCv+ODs+OCueOBr+OCteODluODnuOCt+ODs+ebtOS4i+OBruOCteODlueKtuaFi+OBp+OBquOBkeOCjOOBsOOBquOCiuOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKGVudGl0eSBpbnN0YW5jZW9mIEluaXRpYWxQc2V1ZG9TdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdTdWJNYWNoaW5l44Kk44Oz44K544K/44Oz44K544GvQ29ubmVjdGlvblBvaW50UHNldWRvU3RhdGXjgq/jg6njgrnku6XlpJbjga7nirbmhYvjgpLov73liqDjgafjgY3jgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEoZW50aXR5IGluc3RhbmNlb2YgU3ViTWFjaGluZSkgJiYgIShlbnRpdHkgaW5zdGFuY2VvZiBGaW5hbFN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignU3ViTWFjaGluZeOCpOODs+OCueOCv+ODs+OCueOBr0Nvbm5lY3Rpb25Qb2ludFBzZXVkb1N0YXRl44Kv44Op44K55Lul5aSW44Gu54q25oWL44KS5L+d5oyB44Gn44GN44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICB1bmRlcGxveTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2RlcGxveWVkID0gZmFsc2U7XHJcbiAgICAgICAgXHJcbiAgICAgICAgX2VhY2hFbnRpdHkodGhpcywgXy5iaW5kKGZ1bmN0aW9uIChlbnRpdHkpIHtcclxuICAgICAgICAgICAgaWYgKGVudGl0eSBpbnN0YW5jZW9mIFByb3RvU3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlbnRpdHkgaW5zdGFuY2VvZiBQc2V1ZG9TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChlbnRpdHkgaW5zdGFuY2VvZiBDb25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkuX3JlbW92ZU9ic2VydmVyKCdzdWItcm9vdCcsIHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbnRpdHkuX2hhc1N1YlJvb3QgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghKGVudGl0eSBpbnN0YW5jZW9mIEluaXRpYWxQc2V1ZG9TdGF0ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdTdWJNYWNoaW5l44Kk44Oz44K544K/44Oz44K544GvQ29ubmVjdGlvblBvaW50UHNldWRvU3RhdGXjgq/jg6njgrnku6XlpJbjga7nirbmhYvjgpLov73liqDjgafjgY3jgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCEoZW50aXR5IGluc3RhbmNlb2YgU3ViTWFjaGluZSkgJiYgIShlbnRpdHkgaW5zdGFuY2VvZiBGaW5hbFN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignU3ViTWFjaGluZeOCpOODs+OCueOCv+ODs+OCueOBr0Nvbm5lY3Rpb25Qb2ludFBzZXVkb1N0YXRl44Kv44Op44K55Lul5aSW44Gu54q25oWL44KS5L+d5oyB44Gn44GN44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LCB0aGlzKSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfbGlua0ZvcndhcmQ6IGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuX2FzeW5jKF8uYmluZChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHN0YXRlLl9leGl0KCk7XHJcblxyXG4gICAgICAgICAgICBpZiAoIV8uaXNFbXB0eShzdGF0ZS5fa2V5KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KCdvdXRib3VuZCcsICdsaW5rLWZvcndhcmQnLCBzdGF0ZS5fa2V5KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ+ODquODs+OCr+WFiOOBruODnuOCt+ODs+OBq+a4oeOBmeOCreODvOOBjOaMh+WumuOBleOCjOOBpuOBhOOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgdGhpcykpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX2lubmVyRXhlY3V0aW9uOiBmdW5jdGlvbiAoaWQpIHtcclxuICAgICAgICB2YXIgZXhpdFBvaW50LCBpLCBsLCByZWdpb247XHJcbiAgICAgICAgXHJcbiAgICAgICAgZm9yIChpID0gMCwgbCA9IHRoaXMuX3JlZ2lvbnMubGVuZ3RoOyBpIDwgbDsgaSArPSAxKSB7XHJcbiAgICAgICAgICAgIHJlZ2lvbiA9IHRoaXMuX3JlZ2lvbnNbaV07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBleGl0UG9pbnQgPSBfLmZpbmRXaGVyZShyZWdpb24uX3N0YXRlcywge19rZXk6IGlkfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQoZXhpdFBvaW50KSkge1xyXG4gICAgICAgICAgICAgICAgZXhpdFBvaW50Ll9lbnRyeSgpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ+OCqOODs+ODieODneOCpOODs+ODiOOBrkV4aXRQb2ludFBzZXVkb1N0YXRl44Kk44Oz44K544K/44Oz44K544GM5oyH5a6a44GV44KM44Gm44GE44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfdXBkYXRlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpLnNsaWNlKDEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcclxuICAgICAgICAgICAgY2FzZSAnZW50cnktcG9pbnQnOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5fbGlua0ZvcndhcmQuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBjYXNlICdsaW5rLWJhY2snOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5faW5uZXJFeGVjdXRpb24uYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfZW50cnk6IGZ1bmN0aW9uIChoaXN0b3J5LCBwcmlvcml0eSkge1xyXG4gICAgICAgIGlmICghdGhpcy5fZGVwbG95ZWQpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdTdWJNYWNoaW5l44Kk44Oz44K544K/44Oz44K544GuZGVwbG95KCnjg6Hjgr3jg4Pjg4njgpLlrp/ooYzjgZfjgabjgY/jgaDjgZXjgYTjgIInKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYgKCF0aGlzLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUoKTtcclxuICAgICAgICAgICAgdGhpcy5fbm90aWZ5KCdyZWdpb25zJywgJ2VudHJ5JywgaGlzdG9yeSwgcHJpb3JpdHkpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9leGl0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLl9kZXBsb3llZCkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1N1Yk1hY2hpbmXjgqTjg7Pjgrnjgr/jg7Pjgrnjga5kZXBsb3koKeODoeOCveODg+ODieOCkuWun+ihjOOBl+OBpuOBj+OBoOOBleOBhOOAgicpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSgncmVnaW9ucycsICdleGl0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2luYWN0aXZhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59KTtcclxuXHJcblxyXG5mdW5jdGlvbiBQc2V1ZG9TdGF0ZShuYW1lKSB7XHJcbiAgICBQcm90b1N0YXRlLmNhbGwodGhpcywgbmFtZSk7XHJcbiAgICBcclxuICAgIHRoaXMuX3R5cGUgPSAncHNldWRvLXN0YXRlJztcclxufVxyXG5cclxuUHNldWRvU3RhdGUucHJvdG90eXBlID0gXy5jcmVhdGUoUHJvdG9TdGF0ZS5wcm90b3R5cGUsIF8uZXh0ZW5kKHtcclxuICAgIGNvbnN0cnVjdG9yOiBQc2V1ZG9TdGF0ZSxcclxuICAgIFxyXG4gICAgX2luYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSAnaW5hY3RpdmUnO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghXy5pc051bGwodGhpcy5fY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoJ2NvbnRhaW5lcicsICdzZXQtcHJldmlvdXMtc3RhdGUnLCBudWxsKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgbG9nZ2VyLmluZm8odGhpcy5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzpnZ7jgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgb7jgZfjgZ/jgIInKTtcclxuICAgIH0sXHJcbn0sIG1peGluLmRpc2FibGUpKTtcclxuXHJcbmZ1bmN0aW9uIEluaXRpYWxQc2V1ZG9TdGF0ZShuYW1lKSB7XHJcbiAgICBQc2V1ZG9TdGF0ZS5jYWxsKHRoaXMsIG5hbWUpO1xyXG59XHJcblxyXG5Jbml0aWFsUHNldWRvU3RhdGUucHJvdG90eXBlID0gXy5jcmVhdGUoUHNldWRvU3RhdGUucHJvdG90eXBlLCB7XHJcbiAgICBjb25zdHJ1Y3RvcjogSW5pdGlhbFBzZXVkb1N0YXRlLFxyXG4gICAgXHJcbiAgICBfYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdHJhbnNpdDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSAnYWN0aXZlJztcclxuICAgICAgICBsb2dnZXIuaW5mbygnSW5pdGlhbFBzZXVkb1N0YXRl44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBjOOCouOCr+ODhuOCo+ODluWMluOBleOCjOOBvuOBl+OBn+OAgicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghXy5pc051bGwodGhpcy5fY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0ID0gX2ZpbmRGaXJzdFRyYW5zaXRpb24odGhpcy5fY29udGFpbmVyKTtcclxuICAgICAgICAgICAgaWYgKCFfLmlzVW5kZWZpbmVkKHRyYW5zaXQpKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0LnRyaWdnZXIoKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdSZWdpb27jgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9jb250YWluZXIuX25hbWUgKyAnXCLjga7liJ3mnJ/pgbfnp7vjgYzopovjgaTjgYvjgorjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignSW5pdGlhbFBzZXVkb1N0YXRl44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBruOCs+ODs+ODhuODiuOBjOWtmOWcqOOBl+OBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gSGlzdG9yeVBzZXVkb1N0YXRlKG5hbWUsIGRlZXApIHtcclxuICAgIFBzZXVkb1N0YXRlLmNhbGwodGhpcywgbmFtZSk7XHJcbiAgICBcclxuICAgIHRoaXMuX2lzRGVlcCA9ICFfLmlzVW5kZWZpbmVkKGRlZXApID8gZGVlcCA6IGZhbHNlO1xyXG59XHJcblxyXG5IaXN0b3J5UHNldWRvU3RhdGUucHJvdG90eXBlID0gXy5jcmVhdGUoUHNldWRvU3RhdGUucHJvdG90eXBlLCB7XHJcbiAgICBjb25zdHJ1Y3RvcjogSGlzdG9yeVBzZXVkb1N0YXRlLFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIFRlcm1pbmF0ZVBzZXVkb1N0YXRlKG5hbWUsIGRlZXApIHtcclxuICAgIFBzZXVkb1N0YXRlLmNhbGwodGhpcywgbmFtZSk7XHJcbn1cclxuXHJcblRlcm1pbmF0ZVBzZXVkb1N0YXRlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFBzZXVkb1N0YXRlLnByb3RvdHlwZSwge1xyXG4gICAgY29uc3RydWN0b3I6IFRlcm1pbmF0ZVBzZXVkb1N0YXRlLFxyXG4gICAgXHJcbiAgICBfYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSAnYWN0aXZlJztcclxuICAgICAgICBsb2dnZXIuaW5mbygnVGVybWluYXRlUHNldWRvU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44GM44Ki44Kv44OG44Kj44OW5YyW44GV44KM44G+44GX44Gf44CCJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5fbm90aWZ5KCdyb290JywgJ3Rlcm1pbmF0aW9uJywgdGhpcyk7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdFUlJPUjog5YGc5q2i54q25oWL44Gr6YG356e744GX44G+44GX44Gf44CC5Yem55CG44KS5Lit5pat44GX44G+44GZ44CCJyk7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIENob2ljZVBzZXVkb1N0YXRlKG5hbWUsIGNvbmRpdGlvbikge1xyXG4gICAgUHNldWRvU3RhdGUuY2FsbCh0aGlzLCBuYW1lKTtcclxuICAgIFxyXG4gICAgdGhpcy5fY29uZGl0aW9uID0gXy5pc0Z1bmN0aW9uKGNvbmRpdGlvbikgPyBjb25kaXRpb24gOiBfLm5vb3A7XHJcbn1cclxuXHJcbkNob2ljZVBzZXVkb1N0YXRlLnByb3RvdHlwZSA9IF8uY3JlYXRlKFBzZXVkb1N0YXRlLnByb3RvdHlwZSwge1xyXG4gICAgY29uc3RydWN0b3I6IENob2ljZVBzZXVkb1N0YXRlLFxyXG4gICAgXHJcbiAgICBfYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcm9vdCwgbW9kZWwsIHByb3BzLCBtZXRob2RzLCB0YXJnZXQsIHRyYW5zaXQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgcm9vdCA9IHRoaXMuX3Jvb3Q7XHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbChyb290KSkge1xyXG4gICAgICAgICAgICBtb2RlbCA9IHJvb3QubW9kZWw7XHJcbiAgICAgICAgICAgIHByb3BzID0gcm9vdC5wcm9wcztcclxuICAgICAgICAgICAgbWV0aG9kcyA9IHJvb3QubWV0aG9kcztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdNYWNoaW5l44Kk44Oz44K544K/44Oz44K544Gu5Y+C54Wn44GM5a2Y5Zyo44GX44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9ICdhY3RpdmUnO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKCdDaG9pY2VQc2V1ZG9TdGF0ZeOCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzjgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgb7jgZfjgZ/jgIInKTtcclxuICAgICAgICBcclxuICAgICAgICB0YXJnZXQgPSB0aGlzLl9jb25kaXRpb24obW9kZWwsIHByb3BzLCBtZXRob2RzKTtcclxuICAgICAgICBpZiAoISh0YXJnZXQgaW5zdGFuY2VvZiBQcm90b1N0YXRlKSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ+mBt+enu+WFiOOBrlN0YXRl44Kk44Oz44K544K/44Oz44K544GM5a2Y5Zyo44GX44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICghXy5pc051bGwodGhpcy5fY29udGFpbmVyKSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0ID0gX2ZpbmROZXh0VHJhbnNpdGlvbih0aGlzLl9jb250YWluZXIsIHRoaXMsIHRhcmdldCk7XHJcbiAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh0cmFuc2l0KSkge1xyXG4gICAgICAgICAgICAgICAgdHJhbnNpdC50cmlnZ2VyKCk7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignQ2hvaWNlUHNldWRvU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi6LW354K544GuVHJhbnNpdGlvbuOCpOODs+OCueOCv+ODs+OCueOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdDaG9pY2VQc2V1ZG9TdGF0ZeOCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjga7jgrPjg7Pjg4bjg4rjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIENvbm5lY3Rpb25Qb2ludFBzZXVkb1N0YXRlKG5hbWUpIHtcclxuICAgIFBzZXVkb1N0YXRlLmNhbGwodGhpcywgbmFtZSk7XHJcbiAgICBcclxuICAgIHRoaXMuX2tleSA9ICcnO1xyXG4gICAgdGhpcy5faGFzU3ViUm9vdCA9IGZhbHNlO1xyXG4gICAgdGhpcy5faXNFbmRwb2ludCA9IGZhbHNlO1xyXG4gICAgdGhpcy5fc2V0T2JzZXJ2ZXJUeXBlKCdzdWItcm9vdCcpO1xyXG59XHJcblxyXG5Db25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShQc2V1ZG9TdGF0ZS5wcm90b3R5cGUsIHtcclxuICAgIGNvbnN0cnVjdG9yOiBDb25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZSxcclxuICAgIFxyXG4gICAgc2V0S2V5OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgdGhpcy5fa2V5ID0ga2V5O1xyXG4gICAgICAgIHJldHVybiBrZXk7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIEVudHJ5UG9pbnRQc2V1ZG9TdGF0ZShuYW1lKSB7XHJcbiAgICBDb25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZS5jYWxsKHRoaXMsIG5hbWUpO1xyXG59XHJcblxyXG5FbnRyeVBvaW50UHNldWRvU3RhdGUucHJvdG90eXBlID0gXy5jcmVhdGUoQ29ubmVjdGlvblBvaW50UHNldWRvU3RhdGUucHJvdG90eXBlLCB7XHJcbiAgICBjb25zdHJ1Y3RvcjogRW50cnlQb2ludFBzZXVkb1N0YXRlLFxyXG4gICAgXHJcbiAgICBfYWN0aXZhdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgdHJhbnNpdDtcclxuICAgICAgICBcclxuICAgICAgICB0aGlzLl9zdGF0dXMgPSAnYWN0aXZlJztcclxuICAgICAgICBsb2dnZXIuaW5mbygnRW50cnlQb2ludFBzZXVkb1N0YXRl44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBjOOCouOCr+ODhuOCo+ODluWMluOBleOCjOOBvuOBl+OBn+OAgicpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmICh0aGlzLl9oYXNTdWJSb290KSB7XHJcbiAgICAgICAgICAgIHRoaXMuX25vdGlmeSgnc3ViLXJvb3QnLCAnZW50cnktcG9pbnQnLCB0aGlzKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9jb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgICAgICB0cmFuc2l0ID0gX2ZpbmRGaXJzdFRyYW5zaXRpb24odGhpcy5fY29udGFpbmVyLCB0aGlzKTtcclxuICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh0cmFuc2l0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRyYW5zaXQudHJpZ2dlcigpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdSZWdpb27jgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9jb250YWluZXIuX25hbWUgKyAnXCLjga7liJ3mnJ/pgbfnp7vjgYzopovjgaTjgYvjgorjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRW50cnlQb2ludFBzZXVkb1N0YXRl44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBruOCs+ODs+ODhuODiuOBjOWtmOWcqOOBl+OBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxufSk7XHJcblxyXG5mdW5jdGlvbiBFeGl0UG9pbnRQc2V1ZG9TdGF0ZShuYW1lKSB7XHJcbiAgICBDb25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZS5jYWxsKHRoaXMsIG5hbWUpO1xyXG59XHJcblxyXG5FeGl0UG9pbnRQc2V1ZG9TdGF0ZS5wcm90b3R5cGUgPSBfLmNyZWF0ZShDb25uZWN0aW9uUG9pbnRQc2V1ZG9TdGF0ZS5wcm90b3R5cGUsIHtcclxuICAgIGNvbnN0cnVjdG9yOiBFeGl0UG9pbnRQc2V1ZG9TdGF0ZSxcclxuICAgIFxyXG4gICAgX2FjdGl2YXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHVwcGVyQ29udGFpbmVyLCB0cmFuc2l0O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3N0YXR1cyA9ICdhY3RpdmUnO1xyXG4gICAgICAgIGxvZ2dlci5pbmZvKCdFeGl0UG9pbnRQc2V1ZG9TdGF0ZeOCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjgYzjgqLjgq/jg4bjgqPjg5bljJbjgZXjgozjgb7jgZfjgZ/jgIInKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAodGhpcy5faXNFbmRwb2ludCkge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoJ3Jvb3QnLCAnZXhpdC1wb2ludCcsIHRoaXMpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB1cHBlckNvbnRhaW5lciA9IHRoaXMuX2NvbnRhaW5lci5fZ2V0VXBwZXJDb250YWluZXIoKTtcclxuICAgICAgICAgICAgaWYgKCFfLmlzTnVsbCh1cHBlckNvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgICAgIHRyYW5zaXQgPSBfZmluZE5leHRUcmFuc2l0aW9uKHVwcGVyQ29udGFpbmVyLCB0aGlzKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoIV8uaXNVbmRlZmluZWQodHJhbnNpdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0cmFuc2l0LnRyaWdnZXIoKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcignRXhpdFBvaW50UHNldWRvU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi6LW354K544GuVHJhbnNpdGlvbuOCpOODs+OCueOCv+ODs+OCueOBjOimi+OBpOOBi+OCiuOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdFeGl0UG9pbnRQc2V1ZG9TdGF0ZeOCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjga7kuIrkvY3jgrPjg7Pjg4bjg4rjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbn0pO1xyXG5cclxuZnVuY3Rpb24gVHJhbnNpdGlvbihuYW1lLCBzb3VyY2UsIHRhcmdldCwgb3B0aW9ucykge1xyXG4gICAgRWxlbS5jYWxsKHRoaXMsIG5hbWUpO1xyXG4gICAgXHJcblx0dGhpcy5fdHlwZSA9ICd0cmFuc2l0aW9uJztcclxuICAgIFxyXG4gICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIFByb3RvU3RhdGUgfHwgaXNGYWxzeShzb3VyY2UpIHx8IEluaXRpYWxQc2V1ZG9TdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuX3Jhd1NvdXJjZSA9IHNvdXJjZTtcclxuICAgICAgICBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKCfnrKwy5byV5pWw44Gr6YG356e75YWD44GuU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrnjgIHjgb7jgZ/jga9mYWxzZeOCkuaMh+WumuOBl+OBpuOBj+OBoOOBleOBhOOAgicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBpZiAodGFyZ2V0IGluc3RhbmNlb2YgUHJvdG9TdGF0ZSB8fCBpc0ZhbHN5KHRhcmdldCkgfHwgRmluYWxTdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuX3Jhd1RhcmdldCA9IHRhcmdldDtcclxuICAgICAgICBcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgbG9nZ2VyLmVycm9yKCfnrKwz5byV5pWw44Gr6YG356e75YWD44GuU3RhdGXjgqTjg7Pjgrnjgr/jg7PjgrnjgIHjgb7jgZ/jga9mYWxzZeOCkuaMh+WumuOBl+OBpuOBj+OBoOOBleOBhOOAgicpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICBvcHRpb25zID0gXy5kZWZhdWx0cyhvcHRpb25zIHx8IHt9LCBfLmNsb25lKFRyYW5zaXRpb24ub3B0aW9ucykpO1xyXG4gICAgXHJcbiAgICBpZiAoXy5pc09iamVjdChvcHRpb25zLmRhdGEpKSB7XHJcbiAgICAgICAgdGhpcy5leHRlbmQob3B0aW9ucy5kYXRhKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgdGhpcy5zYXZlKCk7XHJcbiAgICBcclxuICAgIGlmIChfLmlzT2JqZWN0KG9wdGlvbnMucHJvcHMpKSB7XHJcbiAgICAgICAgXy5leHRlbmQodGhpcy5wcm9wcywgb3B0aW9ucy5wcm9wcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIGlmIChfLmlzT2JqZWN0KG9wdGlvbnMubWV0aG9kcykpIHtcclxuICAgICAgICB0aGlzLm1ldGhvZHMgPSB0aGlzLmFkZE1ldGhvZChvcHRpb25zLm1ldGhvZHMpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLl9zb3VyY2UgPSBudWxsO1xyXG4gICAgdGhpcy5fdGFyZ2V0ID0gbnVsbDtcclxuICAgIFxyXG4gICAgdGhpcy5fZ3VhcmQgPSBvcHRpb25zLmd1YXJkO1xyXG4gICAgdGhpcy5fZWZmZWN0ID0gb3B0aW9ucy5lZmZlY3Q7XHJcbiAgICB0aGlzLl9pbnRlcm5hbCA9IG9wdGlvbnMuaW50ZXJuYWw7XHJcbiAgICBcclxuICAgIHRoaXMuX2xvY2tlZCA9IG9wdGlvbnMubG9ja2VkO1xyXG4gICAgXHJcbiAgICB0aGlzLl9pc0V4cGxpY2l0RW50cnkgPSBmYWxzZTtcclxuICAgIHRoaXMuX2V4aXRWaWFFeGl0UG9pbnQgPSBmYWxzZTtcclxufVxyXG5cclxuVHJhbnNpdGlvbi5vcHRpb25zID0ge1xyXG4gICAgZ3VhcmQ6IG51bGwsXHJcbiAgICBlZmZlY3Q6IG51bGwsXHJcbiAgICBpbnRlcm5hbDogZmFsc2UsXHJcbiAgICBcclxuICAgIGxvY2tlZDogdHJ1ZSxcclxufTtcclxuXHJcblRyYW5zaXRpb24ucHJvdG90eXBlID0gXy5jcmVhdGUoRWxlbS5wcm90b3R5cGUsIHtcclxuICAgIGNvbnN0cnVjdG9yOiBUcmFuc2l0aW9uLFxyXG4gICAgXHJcbiAgICB0cmlnZ2VyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJvb3QsIG1vZGVsLCBwcm9wcywgbWV0aG9kcztcclxuICAgICAgICBcclxuICAgICAgICByb290ID0gdGhpcy5fcm9vdDtcclxuICAgICAgICBpZiAoIV8uaXNOdWxsKHJvb3QpKSB7XHJcbiAgICAgICAgICAgIG1vZGVsID0gcm9vdC5tb2RlbDtcclxuICAgICAgICAgICAgcHJvcHMgPSByb290LnByb3BzO1xyXG4gICAgICAgICAgICBtZXRob2RzID0gcm9vdC5tZXRob2RzO1xyXG5cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ01hY2hpbmXjgqTjg7Pjgrnjgr/jg7Pjgrnjga7lj4LnhafjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChfLmlzTnVsbCh0aGlzLl9jb250YWluZXIpKSB7XHJcbiAgICAgICAgICAgIGxvZ2dlci5lcnJvcignVHJhbnNpdGlvbuOCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX25hbWUgKyAnXCLjga7jgrPjg7Pjg4bjg4rjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5fY29udGFpbmVyLmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdUcmFuc2l0aW9u44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBruOCs+ODs+ODhuODiuOBjOmdnuOCouOCr+ODhuOCo+ODluOBp+OBmeOAgicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyog6YG356e75YWD44GM57WC5LqG54q25oWL44Gn44GC44Gj44Gf44KK44CB6YG356e75YWI44Gu54q25oWL44GM6ZaL5aeL5pOs5Ly854q25oWL44Gn44GC44KL5aC05ZCI44CB44Ko44Op44O85Ye65YqbICovXHJcbiAgICAgICAgaWYgKHRoaXMuX3NvdXJjZSBpbnN0YW5jZW9mIEZpbmFsU3RhdGUpIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCfntYLkuobnirbmhYvjgpLpgbfnp7vlhYPjgavjgZnjgovjgZPjgajjga/jgafjgY3jgb7jgZvjgpPjgIInKTtcclxuXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9zb3VyY2UgaW5zdGFuY2VvZiBUZXJtaW5hdGVQc2V1ZG9TdGF0ZSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ+WBnOatoueKtuaFi+OCkumBt+enu+WFg+OBq+OBmeOCi+OBk+OBqOOBr+OBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX3RhcmdldCBpbnN0YW5jZW9mIEluaXRpYWxQc2V1ZG9TdGF0ZSkge1xyXG4gICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ+mWi+Wni+aTrOS8vOeKtuaFi+OCkumBt+enu+WFiOOBq+OBmeOCi+OBk+OBqOOBr+OBp+OBjeOBvuOBm+OCk+OAgicpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLyog44Ks44O844OJ44GM6Kit5a6a44GV44KM44Gm44GE44Gf44KJ44CB44Ks44O844OJ5Yik5a6a44GZ44KLICovXHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9ndWFyZCkpIHtcclxuICAgICAgICAgICAgaWYgKCF0aGlzLl9ndWFyZChtb2RlbCwgcHJvcHMsIG1ldGhvZHMpKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygn44Ks44O844OJ44GM5oiQ56uL44GX44G+44Gb44KT44Gn44GX44Gf44CC6YG356e744Gv55m655Sf44GX44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLl9pbnRlcm5hbCkge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5fc291cmNlID09PSB0aGlzLl90YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuX2FzeW5jKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygn5YaF6YOo6YG356e744KS5a6f6KGM44GX44G+44GZ44CCJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIV8uaXNOdWxsKHRoaXMuX2VmZmVjdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0KG1vZGVsLCBwcm9wcywgbWV0aG9kcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCfpgbfnp7vlhYPjgajpgbfnp7vlhYjjga/lkIzjgZhTdGF0ZeOCpOODs+OCueOCv+ODs+OCueOCkuaMh+WumuOBl+OBpuOBj+OBoOOBleOBhOOAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX2FzeW5jKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHN1cGVyU3RhdGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZXIuZXJyb3IoJ1RyYW5zaXRpb27jgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44Gv44GZ44Gn44Gr44Ki44Kv44OG44Kj44OW5YyW44GV44KM44Gm44GE44G+44GZ44CCJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0aGlzLl9zb3VyY2UuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuX2V4aXRWaWFFeGl0UG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXBlclN0YXRlID0gdGhpcy5fc291cmNlLl9nZXRTdXBlclN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzTnVsbChzdXBlclN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlclN0YXRlLl9leGl0KCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLl90YXJnZXQuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl90YXJnZXQuX25hbWUgKyAnXCLjga7jgIzopqrjgI3nirbmhYvjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3NvdXJjZS5fZXhpdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCfpgbfnp7vlhYMnICsgdGhpcy5fdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWUgKyAn44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fdGFyZ2V0Ll9uYW1lICsgJ1wi44GM6Z2e44Ki44Kv44OG44Kj44OW44Gn44GZ44CCJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghXy5pc051bGwodGhpcy5fZWZmZWN0KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fZWZmZWN0KG1vZGVsLCBwcm9wcywgbWV0aG9kcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICghdGhpcy5fdGFyZ2V0LmlzQWN0aXZlKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9pc0V4cGxpY2l0RW50cnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdXBlclN0YXRlID0gdGhpcy5fdGFyZ2V0Ll9nZXRTdXBlclN0YXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfLmlzTnVsbChzdXBlclN0YXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdXBlclN0YXRlLl9lbnRyeSh1bmRlZmluZWQsIHRoaXMuX3RhcmdldCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcih0aGlzLl90YXJnZXQuY29uc3RydWN0b3IubmFtZSArICfjgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl90YXJnZXQuX25hbWUgKyAnXCLjga7jgIzopqrjgI3nirbmhYvjgYzlrZjlnKjjgZfjgb7jgZvjgpPjgIInKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RhcmdldC5fZW50cnkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcign6YG356e75YWIJyArIHRoaXMuX3RhcmdldC5jb25zdHJ1Y3Rvci5uYW1lICsgJ+OCpOODs+OCueOCv+ODs+OCuVwiJyArIHRoaXMuX3RhcmdldC5fbmFtZSArICdcIuOBjOOCouOCr+ODhuOCo+ODluOBp+OBmeOAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0FjdGl2ZSgpKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9pbmFjdGl2YXRlKCk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdUcmFuc2l0aW9u44Kk44Oz44K544K/44Oz44K5XCInICsgdGhpcy5fbmFtZSArICdcIuOBr+OBmeOBp+OBq+mdnuOCouOCr+ODhuOCo+ODluWMluOBleOCjOOBpuOBhOOBvuOBmeOAgicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfdXBkYXRlOiBmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICB2YXIgYXJncyA9IF8udG9BcnJheShhcmd1bWVudHMpLnNsaWNlKDEpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHN3aXRjaCAoZXZlbnQpIHtcclxuICAgICAgICAgICAgY2FzZSAndXBkYXRlLXJlbGF0aW9uJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVJlbGF0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX3VwZGF0ZVJlbGF0aW9uOiBmdW5jdGlvbiAoY3VycmVudExldmVsLCByb290KSB7XHJcbiAgICAgICAgdGhpcy5fbGV2ZWwgPSBjdXJyZW50TGV2ZWw7XHJcbiAgICAgICAgdGhpcy5fcm9vdCA9IHJvb3Q7XHJcbiAgICB9LFxyXG59KTtcclxuXHJcbmZ1bmN0aW9uIFJlZ2lvbihuYW1lLCBvcHRpb25zKSB7XHJcbiAgICBFbnRpdHkuY2FsbCh0aGlzLCBuYW1lKTtcclxuICAgIFxyXG5cdHRoaXMuX3R5cGUgPSAncmVnaW9uJztcclxuICAgIFxyXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICBcclxuICAgIGlmIChfLmlzT2JqZWN0KG9wdGlvbnMuZGF0YSkpIHtcclxuICAgICAgICB0aGlzLmV4dGVuZChvcHRpb25zLmRhdGEpO1xyXG4gICAgfVxyXG4gICAgXHJcbiAgICB0aGlzLnNhdmUoKTtcclxuICAgIFxyXG4gICAgaWYgKF8uaXNPYmplY3Qob3B0aW9ucy5wcm9wcykpIHtcclxuICAgICAgICBfLmV4dGVuZCh0aGlzLnByb3BzLCBvcHRpb25zLnByb3BzKTtcclxuICAgIH1cclxuICAgIFxyXG4gICAgaWYgKF8uaXNPYmplY3Qob3B0aW9ucy5tZXRob2RzKSkge1xyXG4gICAgICAgIHRoaXMubWV0aG9kcyA9IHRoaXMuYWRkTWV0aG9kKG9wdGlvbnMubWV0aG9kcyk7XHJcbiAgICB9XHJcbiAgICBcclxuICAgIHRoaXMuX3BhcmVudCA9IG51bGw7XHJcbiAgICBcclxuICAgIHRoaXMuX2luaXRpYWxQc2V1ZG8gPSBudWxsO1xyXG4gICAgdGhpcy5fZmluYWwgPSBudWxsO1xyXG5cdHRoaXMuX2hpc3RvcnlQc2V1ZG8gPSBudWxsO1xyXG5cdHRoaXMuX3ByZXZpb3VzU3RhdGUgPSBudWxsO1xyXG4gICAgXHJcblx0dGhpcy5fc3RhdGVzID0gW107XHJcblx0dGhpcy5fdHJhbnNpdHMgPSBbXTtcclxuICAgIFxyXG4gICAgdGhpcy5fc2V0T2JzZXJ2ZXJUeXBlKCdwYXJlbnQnLCAnc3RhdGVzJywgJ3RyYW5zaXRzJyk7XHJcbiAgICB0aGlzLl9zZXREZWZhdWx0U3RhdGVzKCk7XHJcbn1cclxuXHJcblJlZ2lvbi5wcm90b3R5cGUgPSBfLmNyZWF0ZShFbnRpdHkucHJvdG90eXBlLCBfLmV4dGVuZCh7XHJcbiAgICBjb25zdHJ1Y3RvcjogUmVnaW9uLFxyXG4gICAgXHJcbiAgICBoYXNIaXN0b3J5OiBmdW5jdGlvbiAoZGVlcCkge1xyXG4gICAgICAgIHJldHVybiBpc0ZhbHN5KGRlZXApID8gIV8uaXNOdWxsKHRoaXMuX2hpc3RvcnlQc2V1ZG8pIDpcclxuICAgICAgICAgICAgIV8uaXNOdWxsKHRoaXMuX2hpc3RvcnlQc2V1ZG8pICYmIHRoaXMuX2hpc3RvcnlQc2V1ZG8uX2lzRGVlcDtcclxuICAgIH0sXHJcbiAgICBcclxuICAgIGdldEluZGV4OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IC0xO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGlmIChfLmlzTnVsbCh0aGlzLl9wYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIF8uaW5kZXhPZih0aGlzLl9wYXJlbnQuX3JlZ2lvbnMsIHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX3VwZGF0ZTogZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgdmFyIGFyZ3MgPSBfLnRvQXJyYXkoYXJndW1lbnRzKS5zbGljZSgxKTtcclxuICAgICAgICBcclxuICAgICAgICBzd2l0Y2ggKGV2ZW50KSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2VudHJ5JzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX2VudHJ5LmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAnZXhpdCc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9leGl0LmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAndXBkYXRlLXJlbGF0aW9uJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3VwZGF0ZVJlbGF0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAnY29tcGxldGlvbic6XHJcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21wbGV0aW9uLmFwcGx5KHRoaXMsIGFyZ3MpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgY2FzZSAnc2V0LXByZXZpb3VzLXN0YXRlJzpcclxuICAgICAgICAgICAgICAgIHRoaXMuX3NldFByZXZpb3VzU3RhdGUuYXBwbHkodGhpcywgYXJncyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfZ2V0UGFyZW50TGV2ZWw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgcmVzdWx0ID0gLTE7XHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9wYXJlbnQpKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMuX3BhcmVudC5fbGV2ZWw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfZ2V0Um9vdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciByZXN1bHQgPSBudWxsO1xyXG4gICAgICAgIGlmICghXy5pc051bGwodGhpcy5fcGFyZW50KSkge1xyXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcGFyZW50Ll9yb290O1xyXG4gICAgICAgIH1cclxuICAgICAgICBcclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX2dldFVwcGVyQ29udGFpbmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHJlc3VsdCA9IG51bGw7XHJcbiAgICAgICAgaWYgKCFfLmlzTnVsbCh0aGlzLl9wYXJlbnQpICYmICFfLmlzTnVsbCh0aGlzLl9wYXJlbnQuX2NvbnRhaW5lcikpIHtcclxuICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy5fcGFyZW50Ll9jb250YWluZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfc2V0RGVmYXVsdFN0YXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciBpbml0aWFsUHNldWRvLCBmaW5hbDtcclxuICAgICAgICBpbml0aWFsUHNldWRvID0gbmV3IEluaXRpYWxQc2V1ZG9TdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgZmluYWwgPSBuZXcgRmluYWxTdGF0ZShmYWxzZSk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgdGhpcy5hZGRTdGF0ZShpbml0aWFsUHNldWRvLCBmaW5hbCk7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfc2V0RGVmYXVsdFN0YXRlTmFtZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2luaXRpYWxQc2V1ZG8uX25hbWUgPSAnaW5pdGlhbC1wc2V1ZG8tc3RhdGUtaW4tJyArIHRoaXMuX25hbWU7XHJcbiAgICAgICAgdGhpcy5fZmluYWwuX25hbWUgPSAnZmluYWwtc3RhdGUtaW4tJyArIHRoaXMuX25hbWU7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfdXBkYXRlUmVsYXRpb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY3VycmVudExldmVsLCByb290O1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX3NldERlZmF1bHRTdGF0ZU5hbWUoKTtcclxuICAgICAgICBcclxuICAgICAgICBjdXJyZW50TGV2ZWwgPSB0aGlzLl9nZXRQYXJlbnRMZXZlbCgpICsgMTtcclxuICAgICAgICByb290ID0gdGhpcy5fZ2V0Um9vdCgpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIHRoaXMuX25vdGlmeSgnc3RhdGVzJywgJ3VwZGF0ZS1yZWxhdGlvbicsIGN1cnJlbnRMZXZlbCwgcm9vdCk7XHJcbiAgICAgICAgdGhpcy5fbm90aWZ5KCd0cmFuc2l0cycsICd1cGRhdGUtcmVsYXRpb24nLCBjdXJyZW50TGV2ZWwsIHJvb3QpO1xyXG4gICAgfSxcclxuICAgIFxyXG4gICAgX3NldFByZXZpb3VzU3RhdGU6IGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgIHRoaXMuX3ByZXZpb3VzU3RhdGUgPSBzdGF0ZTtcclxuICAgICAgICByZXR1cm4gc3RhdGU7XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfZW50cnk6IGZ1bmN0aW9uIChoaXN0b3J5LCBwcmlvcml0eSkge1xyXG4gICAgICAgIHZhciBzdGF0ZTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIXRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9hY3RpdmF0ZSgpO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgaWYgKF8uaXNVbmRlZmluZWQoaGlzdG9yeSkpIHtcclxuICAgICAgICAgICAgICAgIGhpc3RvcnkgPSBfZmluZERlZXBIaXN0b3J5UHNldWRvU3RhdGUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBoaXN0b3J5ID0gIV8uaXNVbmRlZmluZWQoaGlzdG9yeSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmIChfLmluZGV4T2YodGhpcy5fc3RhdGVzLCBwcmlvcml0eSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgcHJpb3JpdHkuX3VwZGF0ZSgnZW50cnknLCBoaXN0b3J5KTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgaWYgKGhpc3RvcnkpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdGF0ZSA9IHRoaXMuX3ByZXZpb3VzU3RhdGUgfHwgdGhpcy5faW5pdGlhbFBzZXVkbztcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCFfLmlzTnVsbCh0aGlzLl9oaXN0b3J5UHNldWRvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlID0gdGhpcy5fcHJldmlvdXNTdGF0ZSB8fCB0aGlzLl9pbml0aWFsUHNldWRvO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhpcy5faGlzdG9yeVBzZXVkby5faXNEZWVwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhpc3RvcnkgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGUgPSB0aGlzLl9pbml0aWFsUHNldWRvO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBzdGF0ZS5fdXBkYXRlKCdlbnRyeScsIGhpc3RvcnksIHByaW9yaXR5KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBcclxuICAgIF9leGl0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNBY3RpdmUoKSkge1xyXG4gICAgICAgICAgICB0aGlzLl9ub3RpZnkoJ3N0YXRlcycsICdleGl0Jyk7XHJcbiAgICAgICAgICAgIHRoaXMuX2luYWN0aXZhdGUoKTtcclxuICAgICAgICB9XHJcbiAgICB9LFxyXG4gICAgXHJcbiAgICBfY29tcGxldGlvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHRoaXMuX2luYWN0aXZhdGUoKTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIV8uaXNOdWxsKHRoaXMuX3BhcmVudCkpIHtcclxuICAgICAgICAgICAgaWYgKF8uZXZlcnkodGhpcy5fcGFyZW50Ll9yZWdpb25zLCBmdW5jdGlvbiAocmVnaW9uKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gIXJlZ2lvbi5pc0FjdGl2ZSgpO1xyXG4gICAgICAgICAgICB9KSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5fbm90aWZ5KCdwYXJlbnQnLCAnY29tcGxldGlvbicpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgbG9nZ2VyLmVycm9yKCdSZWdpb27jgqTjg7Pjgrnjgr/jg7PjgrlcIicgKyB0aGlzLl9uYW1lICsgJ1wi44Gu44CM6Kaq44CN54q25oWL44GM5a2Y5Zyo44GX44G+44Gb44KT44CCJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgfSxcclxufSwgbWl4aW4ubWFuaXB1bGF0b3IucmVnaW9uKSk7XHJcblxyXG5mdW5jdGlvbiBfZWFjaEVudGl0eShzdGF0ZSwgY2FsbGJhY2spIHtcclxuICAgIHZhciBpLCBqLCBsLCBtLCByZWdpb24sIHN1YlN0YXRlLCB0cmFuc2l0O1xyXG4gICAgXHJcbiAgICBjYWxsYmFjayhzdGF0ZSk7XHJcbiAgICBcclxuICAgIGZvciAoaSA9IDAsIGwgPSBzdGF0ZS5fcmVnaW9ucy5sZW5ndGg7IGkgPCBsOyBpICs9IDEpIHtcclxuICAgICAgICByZWdpb24gPSBzdGF0ZS5fcmVnaW9uc1tpXTtcclxuICAgICAgICBjYWxsYmFjayhyZWdpb24pO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoaiA9IDAsIG0gPSByZWdpb24uX3RyYW5zaXRzLmxlbmd0aDsgaiA8IG07IGogKz0gMSkge1xyXG4gICAgICAgICAgICB0cmFuc2l0ID0gcmVnaW9uLl90cmFuc2l0c1tqXTtcclxuICAgICAgICAgICAgY2FsbGJhY2sodHJhbnNpdCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoaiA9IDAsIG0gPSByZWdpb24uX3N0YXRlcy5sZW5ndGg7IGogPCBtOyBqICs9IDEpIHtcclxuICAgICAgICAgICAgc3ViU3RhdGUgPSByZWdpb24uX3N0YXRlc1tqXTtcclxuICAgICAgICAgICAgX2VhY2hFbnRpdHkoc3ViU3RhdGUsIGNhbGxiYWNrKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9maW5kU3RhdGUocmVnaW9uLCB0YXJnZXRTdGF0ZSwgc3VibGV2ZWwpIHtcclxuICAgIHZhciBpLCBqLCBsLCBtLCBzdGF0ZSwgc3ViUmVnaW9uLCByZXN1bHQ7XHJcbiAgICBcclxuICAgIHN1YmxldmVsID0gIV8uaXNVbmRlZmluZWQoc3VibGV2ZWwpID8gc3VibGV2ZWwgOiBJbmZpbml0eTtcclxuICAgIFxyXG4gICAgaWYgKHN1YmxldmVsID49IDApIHtcclxuICAgICAgICBzdWJsZXZlbCAtPSAxO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSByZWdpb24uX3N0YXRlcy5sZW5ndGg7IGkgPCBsOyBpICs9IDEpIHtcclxuICAgICAgICAgICAgc3RhdGUgPSByZWdpb24uX3N0YXRlc1tpXTtcclxuXHJcbiAgICAgICAgICAgIGlmIChzdGF0ZSA9PT0gdGFyZ2V0U3RhdGUpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZm9yIChqID0gMCwgbSA9IHN0YXRlLl9yZWdpb25zLmxlbmd0aDsgaiA8IG07IGogKz0gMSkge1xyXG4gICAgICAgICAgICAgICAgc3ViUmVnaW9uID0gc3RhdGUuX3JlZ2lvbnNbal07XHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSBfZmluZFN0YXRlKHN1YlJlZ2lvbiwgdGFyZ2V0U3RhdGUsIHN1YmxldmVsKTtcclxuICAgICAgICAgICAgICAgIGlmICghXy5pc1VuZGVmaW5lZChyZXN1bHQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZnVuY3Rpb24gX2ZpbmREZWVwSGlzdG9yeVBzZXVkb1N0YXRlKHJlZ2lvbikge1xyXG4gICAgdmFyIGNvbnRhaW5lcjtcclxuICAgIFxyXG4gICAgaWYgKHJlZ2lvbi5oYXNIaXN0b3J5KHRydWUpKSB7XHJcbiAgICAgICAgcmV0dXJuIHJlZ2lvbi5faGlzdG9yeVBzZXVkbztcclxuICAgIH1cclxuICAgIFxyXG4gICAgY29udGFpbmVyID0gcmVnaW9uLl9nZXRVcHBlckNvbnRhaW5lcigpO1xyXG4gICAgaWYgKCFfLmlzTnVsbChjb250YWluZXIpKSB7XHJcbiAgICAgICAgcmV0dXJuIF9maW5kRGVlcEhpc3RvcnlQc2V1ZG9TdGF0ZShjb250YWluZXIpO1xyXG4gICAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBfZmluZEZpcnN0VHJhbnNpdGlvbihyZWdpb24sIGZyb20pIHtcclxuICAgIHZhciB0cmFuc2l0cyA9IHJlZ2lvbi5fdHJhbnNpdHM7XHJcbiAgICBpZiAoXy5pc1VuZGVmaW5lZChmcm9tKSkge1xyXG4gICAgICAgIGZyb20gPSByZWdpb24uX2luaXRpYWxQc2V1ZG87XHJcbiAgICAgICAgXHJcbiAgICB9IGVsc2UgaWYgKGZyb20gaW5zdGFuY2VvZiBFbnRyeVBvaW50UHNldWRvU3RhdGUpIHtcclxuICAgICAgICBcclxuICAgIH1cclxuICAgIFxyXG4gICAgcmV0dXJuIF8uZmluZCh0cmFuc2l0cywgZnVuY3Rpb24gKHRyYW5zaXQpIHtcclxuICAgICAgICByZXR1cm4gdHJhbnNpdC5fc291cmNlID09PSBmcm9tO1xyXG4gICAgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIF9maW5kTmV4dFRyYW5zaXRpb24ocmVnaW9uLCBmcm9tLCB0bykge1xyXG4gICAgdmFyIHRyYW5zaXRzO1xyXG4gICAgXHJcbiAgICB0cmFuc2l0cyA9IHJlZ2lvbi5fdHJhbnNpdHM7XHJcbiAgICByZXR1cm4gXy5maW5kKHRyYW5zaXRzLCBmdW5jdGlvbiAodHJhbnNpdCkge1xyXG4gICAgICAgIGlmICghXy5pc1VuZGVmaW5lZCh0bykpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXQuX3RhcmdldCA9PT0gdG8gJiYgdHJhbnNpdC5fc291cmNlID09PSBmcm9tO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2UgaWYgKHRyYW5zaXQuX3NvdXJjZSBpbnN0YW5jZW9mIEZpbmFsU3RhdGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zaXQuX3NvdXJjZSA9PT0gZnJvbSAmJiAhdHJhbnNpdC5fbG9ja2VkO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gdHJhbnNpdC5fc291cmNlID09PSBmcm9tO1xyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG59XHJcblxyXG5GU00gPSB7XHJcbiAgICBNYWNoaW5lOiBNYWNoaW5lLFxyXG4gICAgU3RhdGU6IFN0YXRlLFxyXG4gICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcclxuICAgIFJlZ2lvbjogUmVnaW9uLFxyXG4gICAgXHJcbiAgICBJbml0aWFsUHNldWRvU3RhdGU6IEluaXRpYWxQc2V1ZG9TdGF0ZSxcclxuICAgIEZpbmFsU3RhdGU6IEZpbmFsU3RhdGUsXHJcbiAgICBTdWJNYWNoaW5lOiBTdWJNYWNoaW5lLFxyXG4gICAgSGlzdG9yeVBzZXVkb1N0YXRlOiBIaXN0b3J5UHNldWRvU3RhdGUsXHJcbiAgICBUZXJtaW5hdGVQc2V1ZG9TdGF0ZTogVGVybWluYXRlUHNldWRvU3RhdGUsXHJcbiAgICBDaG9pY2VQc2V1ZG9TdGF0ZTogQ2hvaWNlUHNldWRvU3RhdGUsXHJcbiAgICBcclxuICAgIEVudHJ5UG9pbnRQc2V1ZG9TdGF0ZTogRW50cnlQb2ludFBzZXVkb1N0YXRlLFxyXG4gICAgRXhpdFBvaW50UHNldWRvU3RhdGU6IEV4aXRQb2ludFBzZXVkb1N0YXRlLFxyXG59O1xyXG5cclxuaWYgKGlzTm9kZUpTKSB7XHJcbiAgICBtb2R1bGUuZXhwb3J0cyA9IEZTTTtcclxuICAgIFxyXG59IGVsc2UgaWYgKCFfLmlzVW5kZWZpbmVkKHdpbmRvdykpIHtcclxuICAgIHdpbmRvdy5GU00gPSBGU007XHJcbn1cclxuXHJcbiJdfQ==
